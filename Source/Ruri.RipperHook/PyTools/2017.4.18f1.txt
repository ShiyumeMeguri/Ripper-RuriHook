Class Object

Class GameObject
GameObject Base;
	vector m_Component;
		Array Array; // Align
			int size;
			ComponentPair data;
				PPtr<Component> component;
					int m_FileID;
					SInt64 m_PathID;
	unsigned int m_Layer;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	UInt16 m_Tag;
	bool m_IsActive;

Class Component
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class LevelGameManager

Class Transform
Transform Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	Quaternionf m_LocalRotation;
		float x;
		float y;
		float z;
		float w;
	Vector3f m_LocalPosition;
		float x;
		float y;
		float z;
	Vector3f m_LocalScale;
		float x;
		float y;
		float z;
	vector m_Children;
		Array Array; // Align
			int size;
			PPtr<Transform> data;
				int m_FileID;
				SInt64 m_PathID;
	PPtr<Transform> m_Father;
		int m_FileID;
		SInt64 m_PathID;

Class TimeManager
TimeManager Base;
	float Fixed Timestep;
	float Maximum Allowed Timestep;
	float m_TimeScale;
	float Maximum Particle Timestep;

Class GlobalGameManager

Class Behaviour
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class GameManager

Class AudioManager
AudioManager Base;
	float m_Volume;
	float Rolloff Scale;
	float Doppler Factor;
	int Default Speaker Mode;
	int m_SampleRate;
	int m_DSPBufferSize;
	int m_VirtualVoiceCount;
	int m_RealVoiceCount;
	string m_SpatializerPlugin;
		Array Array; // Align
			int size;
			char data;
	string m_AmbisonicDecoderPlugin;
		Array Array; // Align
			int size;
			char data;
	bool m_DisableAudio;
	bool m_VirtualizeEffects; // Align

Class ParticleAnimator
ParticleAnimator Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool Does Animate Color?; // Align
	ColorRGBA colorAnimation[0];
		unsigned int rgba;
	ColorRGBA colorAnimation[1];
		unsigned int rgba;
	ColorRGBA colorAnimation[2];
		unsigned int rgba;
	ColorRGBA colorAnimation[3];
		unsigned int rgba;
	ColorRGBA colorAnimation[4];
		unsigned int rgba;
	Vector3f worldRotationAxis;
		float x;
		float y;
		float z;
	Vector3f localRotationAxis;
		float x;
		float y;
		float z;
	float sizeGrow;
	Vector3f rndForce;
		float x;
		float y;
		float z;
	Vector3f force;
		float x;
		float y;
		float z;
	float damping;
	bool stopSimulation;
	bool autodestruct;

Class InputManager
InputManager Base;
	vector m_Axes;
		Array Array; // Align
			int size;
			InputAxis data;
				string m_Name;
					Array Array; // Align
						int size;
						char data;
				string descriptiveName;
					Array Array; // Align
						int size;
						char data;
				string descriptiveNegativeName;
					Array Array; // Align
						int size;
						char data;
				string negativeButton;
					Array Array; // Align
						int size;
						char data;
				string positiveButton;
					Array Array; // Align
						int size;
						char data;
				string altNegativeButton;
					Array Array; // Align
						int size;
						char data;
				string altPositiveButton;
					Array Array; // Align
						int size;
						char data;
				float gravity;
				float dead;
				float sensitivity;
				bool snap;
				bool invert; // Align
				int type;
				int axis;
				int joyNum;

Class EllipsoidParticleEmitter
EllipsoidParticleEmitter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	bool m_Emit; // Align
	float minSize;
	float maxSize;
	float minEnergy;
	float maxEnergy;
	float minEmission;
	float maxEmission;
	Vector3f worldVelocity;
		float x;
		float y;
		float z;
	Vector3f localVelocity;
		float x;
		float y;
		float z;
	Vector3f rndVelocity;
		float x;
		float y;
		float z;
	float emitterVelocityScale;
	Vector3f tangentVelocity;
		float x;
		float y;
		float z;
	float angularVelocity;
	float rndAngularVelocity;
	bool rndRotation;
	bool Simulate in Worldspace?;
	bool m_OneShot; // Align
	Vector3f m_Ellipsoid;
		float x;
		float y;
		float z;
	float m_MinEmitterRange;

Class EditorExtension

Class Physics2DSettings
Physics2DSettings Base;
	Vector2f m_Gravity;
		float x;
		float y;
	PPtr<PhysicsMaterial2D> m_DefaultMaterial;
		int m_FileID;
		SInt64 m_PathID;
	int m_VelocityIterations;
	int m_PositionIterations;
	float m_VelocityThreshold;
	float m_MaxLinearCorrection;
	float m_MaxAngularCorrection;
	float m_MaxTranslationSpeed;
	float m_MaxRotationSpeed;
	float m_BaumgarteScale;
	float m_BaumgarteTimeOfImpactScale;
	float m_TimeToSleep;
	float m_LinearSleepTolerance;
	float m_AngularSleepTolerance;
	float m_DefaultContactOffset;
	bool m_AutoSimulation;
	bool m_QueriesHitTriggers;
	bool m_QueriesStartInColliders;
	bool m_ChangeStopsCallbacks;
	bool m_CallbacksOnDisable;
	bool m_AutoSyncTransforms; // Align
	vector m_LayerCollisionMatrix;
		Array Array; // Align
			int size;
			unsigned int data;

Class Camera
Camera Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	unsigned int m_ClearFlags;
	ColorRGBA m_BackGroundColor;
		float r;
		float g;
		float b;
		float a;
	Rectf m_NormalizedViewPortRect;
		float x;
		float y;
		float width;
		float height;
	float near clip plane;
	float far clip plane;
	float field of view;
	bool orthographic; // Align
	float orthographic size;
	float m_Depth;
	BitField m_CullingMask;
		unsigned int m_Bits;
	int m_RenderingPath;
	PPtr<RenderTexture> m_TargetTexture;
		int m_FileID;
		SInt64 m_PathID;
	int m_TargetDisplay;
	int m_TargetEye;
	bool m_HDR;
	bool m_AllowMSAA;
	bool m_AllowDynamicResolution;
	bool m_ForceIntoRT;
	bool m_OcclusionCulling; // Align
	float m_StereoConvergence;
	float m_StereoSeparation;

Class Material
Material Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<Shader> m_Shader;
		int m_FileID;
		SInt64 m_PathID;
	string m_ShaderKeywords;
		Array Array; // Align
			int size;
			char data;
	unsigned int m_LightmapFlags;
	bool m_EnableInstancingVariants;
	bool m_DoubleSidedGI; // Align
	int m_CustomRenderQueue;
	map stringTagMap;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				string second;
					Array Array; // Align
						int size;
						char data;
	vector disabledShaderPasses;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	UnityPropertySheet m_SavedProperties;
		map m_TexEnvs;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					UnityTexEnv second;
						PPtr<Texture> m_Texture;
							int m_FileID;
							SInt64 m_PathID;
						Vector2f m_Scale;
							float x;
							float y;
						Vector2f m_Offset;
							float x;
							float y;
		map m_Floats;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					float second;
		map m_Colors;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					ColorRGBA second;
						float r;
						float g;
						float b;
						float a;

Class MeshRenderer
MeshRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	PPtr<Mesh> m_AdditionalVertexStreams;
		int m_FileID;
		SInt64 m_PathID;

Class Renderer
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class ParticleRenderer
ParticleRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	float m_CameraVelocityScale;
	int m_StretchParticles;
	float m_LengthScale;
	float m_VelocityScale;
	float m_MaxParticleSize;
	UVAnimation UV Animation;
		int x Tile;
		int y Tile;
		float cycles;

Class Texture

Class Texture2D
Texture2D Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_CompleteImageSize;
	int m_TextureFormat;
	int m_MipCount;
	bool m_IsReadable; // Align
	int m_ImageCount;
	int m_TextureDimension;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_LightmapFormat;
	int m_ColorSpace;
	TypelessData image data; // Align
		int size;
		UInt8 data;
	StreamingInfo m_StreamData;
		unsigned int offset;
		unsigned int size;
		string path;
			Array Array; // Align
				int size;
				char data;

Class OcclusionCullingSettings
OcclusionCullingSettings Base;
	GUID m_SceneGUID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	PPtr<OcclusionCullingData> m_OcclusionCullingData;
		int m_FileID;
		SInt64 m_PathID;
	vector m_StaticRenderers;
		Array Array; // Align
			int size;
			PPtr<Renderer> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_Portals;
		Array Array; // Align
			int size;
			PPtr<OcclusionPortal> data;
				int m_FileID;
				SInt64 m_PathID;

Class GraphicsSettings
GraphicsSettings Base;
	BuiltinShaderSettings m_Deferred;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_DeferredReflections;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_ScreenSpaceShadows;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_LegacyDeferred;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_DepthNormals;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_MotionVectors;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_LightHalo;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	BuiltinShaderSettings m_LensFlare;
		int m_Mode;
		PPtr<Shader> m_Shader;
			int m_FileID;
			SInt64 m_PathID;
	vector m_AlwaysIncludedShaders;
		Array Array; // Align
			int size;
			PPtr<Shader> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_PreloadedShaders;
		Array Array; // Align
			int size;
			PPtr<ShaderVariantCollection> data;
				int m_FileID;
				SInt64 m_PathID;
	PPtr<Material> m_SpritesDefaultMaterial;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<MonoBehaviour> m_CustomRenderPipeline;
		int m_FileID;
		SInt64 m_PathID;
	int m_TransparencySortMode;
	Vector3f m_TransparencySortAxis;
		float x;
		float y;
		float z;
	TierGraphicsSettings m_TierSettings_Tier1;
		int renderingPath;
		int hdrMode;
		int realtimeGICPUUsage;
		bool useCascadedShadowMaps;
		bool prefer32BitShadowMaps;
		bool enableLPPV;
		bool useHDR; // Align
	TierGraphicsSettings m_TierSettings_Tier2;
		int renderingPath;
		int hdrMode;
		int realtimeGICPUUsage;
		bool useCascadedShadowMaps;
		bool prefer32BitShadowMaps;
		bool enableLPPV;
		bool useHDR; // Align
	TierGraphicsSettings m_TierSettings_Tier3;
		int renderingPath;
		int hdrMode;
		int realtimeGICPUUsage;
		bool useCascadedShadowMaps;
		bool prefer32BitShadowMaps;
		bool enableLPPV;
		bool useHDR; // Align
	vector m_ShaderDefinesPerShaderCompiler;
		Array Array; // Align
			int size;
			PlatformShaderDefines data;
				int shaderPlatform;
				fixed_bitset defines_Tier1;
					Array Array; // Align
						int size;
						unsigned int data;
				fixed_bitset defines_Tier2;
					Array Array; // Align
						int size;
						unsigned int data;
				fixed_bitset defines_Tier3; // Align
					Array Array; // Align
						int size;
						unsigned int data;
	bool m_LightsUseLinearIntensity;
	bool m_LightsUseColorTemperature;

Class MeshFilter
MeshFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Mesh> m_Mesh;
		int m_FileID;
		SInt64 m_PathID;

Class OcclusionPortal
OcclusionPortal Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Open; // Align
	Vector3f m_Center;
		float x;
		float y;
		float z;
	Vector3f m_Size;
		float x;
		float y;
		float z;

Class Mesh
Mesh Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_SubMeshes;
		Array Array; // Align
			int size;
			SubMesh data;
				unsigned int firstByte;
				unsigned int indexCount;
				int topology;
				unsigned int baseVertex;
				unsigned int firstVertex;
				unsigned int vertexCount;
				AABB localAABB;
					Vector3f m_Center;
						float x;
						float y;
						float z;
					Vector3f m_Extent;
						float x;
						float y;
						float z;
	BlendShapeData m_Shapes;
		vector vertices;
			Array Array; // Align
				int size;
				BlendShapeVertex data;
					Vector3f vertex;
						float x;
						float y;
						float z;
					Vector3f normal;
						float x;
						float y;
						float z;
					Vector3f tangent;
						float x;
						float y;
						float z;
					unsigned int index;
		vector shapes;
			Array Array; // Align
				int size;
				MeshBlendShape data;
					unsigned int firstVertex;
					unsigned int vertexCount;
					bool hasNormals;
					bool hasTangents; // Align
		vector channels;
			Array Array; // Align
				int size;
				MeshBlendShapeChannel data;
					string name;
						Array Array; // Align
							int size;
							char data;
					unsigned int nameHash;
					int frameIndex;
					int frameCount;
		vector fullWeights;
			Array Array; // Align
				int size;
				float data;
	vector m_BindPose;
		Array Array; // Align
			int size;
			Matrix4x4f data;
				float e00;
				float e01;
				float e02;
				float e03;
				float e10;
				float e11;
				float e12;
				float e13;
				float e20;
				float e21;
				float e22;
				float e23;
				float e30;
				float e31;
				float e32;
				float e33;
	vector m_BoneNameHashes;
		Array Array; // Align
			int size;
			unsigned int data;
	unsigned int m_RootBoneNameHash;
	UInt8 m_MeshCompression;
	bool m_IsReadable;
	bool m_KeepVertices;
	bool m_KeepIndices; // Align
	int m_IndexFormat;
	vector m_IndexBuffer;
		Array Array; // Align
			int size;
			UInt8 data;
	vector m_Skin;
		Array Array; // Align
			int size;
			BoneWeights4 data;
				float weight[0];
				float weight[1];
				float weight[2];
				float weight[3];
				int boneIndex[0];
				int boneIndex[1];
				int boneIndex[2];
				int boneIndex[3];
	VertexData m_VertexData; // Align
		int m_CurrentChannels;
		unsigned int m_VertexCount;
		vector m_Channels;
			Array Array; // Align
				int size;
				ChannelInfo data;
					UInt8 stream;
					UInt8 offset;
					UInt8 format;
					UInt8 dimension;
		TypelessData m_DataSize; // Align
			int size;
			UInt8 data;
	CompressedMesh m_CompressedMesh;
		PackedBitVector m_Vertices;
			unsigned int m_NumItems;
			float m_Range;
			float m_Start;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_UV;
			unsigned int m_NumItems;
			float m_Range;
			float m_Start;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_Normals;
			unsigned int m_NumItems;
			float m_Range;
			float m_Start;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_Tangents;
			unsigned int m_NumItems;
			float m_Range;
			float m_Start;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_Weights;
			unsigned int m_NumItems;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_NormalSigns;
			unsigned int m_NumItems;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_TangentSigns;
			unsigned int m_NumItems;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_FloatColors;
			unsigned int m_NumItems;
			float m_Range;
			float m_Start;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_BoneIndices;
			unsigned int m_NumItems;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		PackedBitVector m_Triangles;
			unsigned int m_NumItems;
			vector m_Data;
				Array Array; // Align
					int size;
					UInt8 data;
			UInt8 m_BitSize; // Align
		unsigned int m_UVInfo;
	AABB m_LocalAABB;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	int m_MeshUsageFlags;
	vector m_BakedConvexCollisionMesh;
		Array Array; // Align
			int size;
			UInt8 data;
	vector m_BakedTriangleCollisionMesh;
		Array Array; // Align
			int size;
			UInt8 data;

Class Skybox
Skybox Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<Material> m_CustomSkybox;
		int m_FileID;
		SInt64 m_PathID;

Class QualitySettings
QualitySettings Base;
	int m_CurrentQuality;
	vector m_QualitySettings;
		Array Array; // Align
			int size;
			QualitySetting data;
				string name;
					Array Array; // Align
						int size;
						char data;
				int pixelLightCount;
				int shadows;
				int shadowResolution;
				int shadowProjection;
				int shadowCascades;
				float shadowDistance;
				float shadowNearPlaneOffset;
				float shadowCascade2Split;
				Vector3f shadowCascade4Split;
					float x;
					float y;
					float z;
				int shadowmaskMode;
				int blendWeights;
				int textureQuality;
				int anisotropicTextures;
				int antiAliasing;
				bool softParticles;
				bool softVegetation;
				bool realtimeReflectionProbes;
				bool billboardsFaceCameraPosition; // Align
				int vSyncCount;
				float lodBias;
				int maximumLODLevel;
				int particleRaycastBudget;
				int asyncUploadTimeSlice;
				int asyncUploadBufferSize;
				float resolutionScalingFixedDPIFactor; // Align
	int m_StrippedMaximumLODLevel;

Class Shader
Shader Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	SerializedShader m_ParsedForm;
		SerializedProperties m_PropInfo;
			vector m_Props;
				Array Array; // Align
					int size;
					SerializedProperty data;
						string m_Name;
							Array Array; // Align
								int size;
								char data;
						string m_Description;
							Array Array; // Align
								int size;
								char data;
						vector m_Attributes;
							Array Array; // Align
								int size;
								string data;
									Array Array; // Align
										int size;
										char data;
						int m_Type;
						unsigned int m_Flags;
						float m_DefValue[0];
						float m_DefValue[1];
						float m_DefValue[2];
						float m_DefValue[3];
						SerializedTextureProperty m_DefTexture;
							string m_DefaultName;
								Array Array; // Align
									int size;
									char data;
							int m_TexDim;
		vector m_SubShaders;
			Array Array; // Align
				int size;
				SerializedSubShader data;
					vector m_Passes;
						Array Array; // Align
							int size;
							SerializedPass data;
								map m_NameIndices;
									Array Array;
										int size;
										pair data;
											string first;
												Array Array; // Align
													int size;
													char data;
											int second;
								int m_Type;
								SerializedShaderState m_State;
									string m_Name;
										Array Array; // Align
											int size;
											char data;
									SerializedShaderRTBlendState rtBlend0;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend1;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend2;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend3;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend4;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend5;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend6;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderRTBlendState rtBlend7;
										SerializedShaderFloatValue srcBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlend;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue srcBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue destBlendAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue blendOpAlpha;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue colMask;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									bool rtSeparateBlend; // Align
									SerializedShaderFloatValue zClip;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue zTest;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue zWrite;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue culling;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue offsetFactor;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue offsetUnits;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue alphaToMask;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedStencilOp stencilOp;
										SerializedShaderFloatValue pass;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue fail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue zFail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue comp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedStencilOp stencilOpFront;
										SerializedShaderFloatValue pass;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue fail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue zFail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue comp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedStencilOp stencilOpBack;
										SerializedShaderFloatValue pass;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue fail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue zFail;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue comp;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
									SerializedShaderFloatValue stencilReadMask;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue stencilWriteMask;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue stencilRef;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue fogStart;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue fogEnd;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderFloatValue fogDensity;
										float val;
										string name;
											Array Array; // Align
												int size;
												char data;
									SerializedShaderVectorValue fogColor;
										SerializedShaderFloatValue x;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue y;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue z;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										SerializedShaderFloatValue w;
											float val;
											string name;
												Array Array; // Align
													int size;
													char data;
										string name;
											Array Array; // Align
												int size;
												char data;
									int fogMode;
									int gpuProgramID;
									SerializedTagMap m_Tags;
										map tags;
											Array Array;
												int size;
												pair data;
													string first;
														Array Array; // Align
															int size;
															char data;
													string second;
														Array Array; // Align
															int size;
															char data;
									int m_LOD;
									bool lighting; // Align
								unsigned int m_ProgramMask;
								SerializedProgram progVertex;
									vector m_SubPrograms;
										Array Array; // Align
											int size;
											SerializedSubProgram data;
												unsigned int m_BlobIndex;
												ParserBindChannels m_Channels;
													vector m_Channels; // Align
														Array Array; // Align
															int size;
															ShaderBindChannel data;
																SInt8 source;
																SInt8 target;
													int m_SourceMap;
												vector m_KeywordIndices;
													Array Array; // Align
														int size;
														UInt16 data;
												SInt8 m_ShaderHardwareTier;
												SInt8 m_GpuProgramType; // Align
												vector m_VectorParams;
													Array Array; // Align
														int size;
														VectorParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_Dim; // Align
												vector m_MatrixParams;
													Array Array; // Align
														int size;
														MatrixParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_RowCount; // Align
												vector m_TextureParams;
													Array Array; // Align
														int size;
														TextureParameter data;
															int m_NameIndex;
															int m_Index;
															int m_SamplerIndex;
															bool m_MultiSampled;
															SInt8 m_Dim; // Align
												vector m_BufferParams;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_ConstantBuffers;
													Array Array; // Align
														int size;
														ConstantBuffer data;
															int m_NameIndex;
															vector m_MatrixParams;
																Array Array; // Align
																	int size;
																	MatrixParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_RowCount; // Align
															vector m_VectorParams;
																Array Array; // Align
																	int size;
																	VectorParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_Dim; // Align
															vector m_StructParams;
																Array Array; // Align
																	int size;
																	StructParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		int m_StructSize;
																		vector m_VectorMembers;
																			Array Array; // Align
																				int size;
																				VectorParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_Dim; // Align
																		vector m_MatrixMembers;
																			Array Array; // Align
																				int size;
																				MatrixParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_RowCount; // Align
															int m_Size;
												vector m_ConstantBufferBindings;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_UAVParams;
													Array Array; // Align
														int size;
														UAVParameter data;
															int m_NameIndex;
															int m_Index;
															int m_OriginalIndex;
												vector m_Samplers;
													Array Array; // Align
														int size;
														SamplerParameter data;
															unsigned int sampler;
															int bindPoint;
												int m_ShaderRequirements;
								SerializedProgram progFragment;
									vector m_SubPrograms;
										Array Array; // Align
											int size;
											SerializedSubProgram data;
												unsigned int m_BlobIndex;
												ParserBindChannels m_Channels;
													vector m_Channels; // Align
														Array Array; // Align
															int size;
															ShaderBindChannel data;
																SInt8 source;
																SInt8 target;
													int m_SourceMap;
												vector m_KeywordIndices;
													Array Array; // Align
														int size;
														UInt16 data;
												SInt8 m_ShaderHardwareTier;
												SInt8 m_GpuProgramType; // Align
												vector m_VectorParams;
													Array Array; // Align
														int size;
														VectorParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_Dim; // Align
												vector m_MatrixParams;
													Array Array; // Align
														int size;
														MatrixParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_RowCount; // Align
												vector m_TextureParams;
													Array Array; // Align
														int size;
														TextureParameter data;
															int m_NameIndex;
															int m_Index;
															int m_SamplerIndex;
															bool m_MultiSampled;
															SInt8 m_Dim; // Align
												vector m_BufferParams;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_ConstantBuffers;
													Array Array; // Align
														int size;
														ConstantBuffer data;
															int m_NameIndex;
															vector m_MatrixParams;
																Array Array; // Align
																	int size;
																	MatrixParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_RowCount; // Align
															vector m_VectorParams;
																Array Array; // Align
																	int size;
																	VectorParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_Dim; // Align
															vector m_StructParams;
																Array Array; // Align
																	int size;
																	StructParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		int m_StructSize;
																		vector m_VectorMembers;
																			Array Array; // Align
																				int size;
																				VectorParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_Dim; // Align
																		vector m_MatrixMembers;
																			Array Array; // Align
																				int size;
																				MatrixParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_RowCount; // Align
															int m_Size;
												vector m_ConstantBufferBindings;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_UAVParams;
													Array Array; // Align
														int size;
														UAVParameter data;
															int m_NameIndex;
															int m_Index;
															int m_OriginalIndex;
												vector m_Samplers;
													Array Array; // Align
														int size;
														SamplerParameter data;
															unsigned int sampler;
															int bindPoint;
												int m_ShaderRequirements;
								SerializedProgram progGeometry;
									vector m_SubPrograms;
										Array Array; // Align
											int size;
											SerializedSubProgram data;
												unsigned int m_BlobIndex;
												ParserBindChannels m_Channels;
													vector m_Channels; // Align
														Array Array; // Align
															int size;
															ShaderBindChannel data;
																SInt8 source;
																SInt8 target;
													int m_SourceMap;
												vector m_KeywordIndices;
													Array Array; // Align
														int size;
														UInt16 data;
												SInt8 m_ShaderHardwareTier;
												SInt8 m_GpuProgramType; // Align
												vector m_VectorParams;
													Array Array; // Align
														int size;
														VectorParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_Dim; // Align
												vector m_MatrixParams;
													Array Array; // Align
														int size;
														MatrixParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_RowCount; // Align
												vector m_TextureParams;
													Array Array; // Align
														int size;
														TextureParameter data;
															int m_NameIndex;
															int m_Index;
															int m_SamplerIndex;
															bool m_MultiSampled;
															SInt8 m_Dim; // Align
												vector m_BufferParams;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_ConstantBuffers;
													Array Array; // Align
														int size;
														ConstantBuffer data;
															int m_NameIndex;
															vector m_MatrixParams;
																Array Array; // Align
																	int size;
																	MatrixParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_RowCount; // Align
															vector m_VectorParams;
																Array Array; // Align
																	int size;
																	VectorParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_Dim; // Align
															vector m_StructParams;
																Array Array; // Align
																	int size;
																	StructParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		int m_StructSize;
																		vector m_VectorMembers;
																			Array Array; // Align
																				int size;
																				VectorParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_Dim; // Align
																		vector m_MatrixMembers;
																			Array Array; // Align
																				int size;
																				MatrixParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_RowCount; // Align
															int m_Size;
												vector m_ConstantBufferBindings;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_UAVParams;
													Array Array; // Align
														int size;
														UAVParameter data;
															int m_NameIndex;
															int m_Index;
															int m_OriginalIndex;
												vector m_Samplers;
													Array Array; // Align
														int size;
														SamplerParameter data;
															unsigned int sampler;
															int bindPoint;
												int m_ShaderRequirements;
								SerializedProgram progHull;
									vector m_SubPrograms;
										Array Array; // Align
											int size;
											SerializedSubProgram data;
												unsigned int m_BlobIndex;
												ParserBindChannels m_Channels;
													vector m_Channels; // Align
														Array Array; // Align
															int size;
															ShaderBindChannel data;
																SInt8 source;
																SInt8 target;
													int m_SourceMap;
												vector m_KeywordIndices;
													Array Array; // Align
														int size;
														UInt16 data;
												SInt8 m_ShaderHardwareTier;
												SInt8 m_GpuProgramType; // Align
												vector m_VectorParams;
													Array Array; // Align
														int size;
														VectorParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_Dim; // Align
												vector m_MatrixParams;
													Array Array; // Align
														int size;
														MatrixParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_RowCount; // Align
												vector m_TextureParams;
													Array Array; // Align
														int size;
														TextureParameter data;
															int m_NameIndex;
															int m_Index;
															int m_SamplerIndex;
															bool m_MultiSampled;
															SInt8 m_Dim; // Align
												vector m_BufferParams;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_ConstantBuffers;
													Array Array; // Align
														int size;
														ConstantBuffer data;
															int m_NameIndex;
															vector m_MatrixParams;
																Array Array; // Align
																	int size;
																	MatrixParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_RowCount; // Align
															vector m_VectorParams;
																Array Array; // Align
																	int size;
																	VectorParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_Dim; // Align
															vector m_StructParams;
																Array Array; // Align
																	int size;
																	StructParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		int m_StructSize;
																		vector m_VectorMembers;
																			Array Array; // Align
																				int size;
																				VectorParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_Dim; // Align
																		vector m_MatrixMembers;
																			Array Array; // Align
																				int size;
																				MatrixParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_RowCount; // Align
															int m_Size;
												vector m_ConstantBufferBindings;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_UAVParams;
													Array Array; // Align
														int size;
														UAVParameter data;
															int m_NameIndex;
															int m_Index;
															int m_OriginalIndex;
												vector m_Samplers;
													Array Array; // Align
														int size;
														SamplerParameter data;
															unsigned int sampler;
															int bindPoint;
												int m_ShaderRequirements;
								SerializedProgram progDomain;
									vector m_SubPrograms;
										Array Array; // Align
											int size;
											SerializedSubProgram data;
												unsigned int m_BlobIndex;
												ParserBindChannels m_Channels;
													vector m_Channels; // Align
														Array Array; // Align
															int size;
															ShaderBindChannel data;
																SInt8 source;
																SInt8 target;
													int m_SourceMap;
												vector m_KeywordIndices;
													Array Array; // Align
														int size;
														UInt16 data;
												SInt8 m_ShaderHardwareTier;
												SInt8 m_GpuProgramType; // Align
												vector m_VectorParams;
													Array Array; // Align
														int size;
														VectorParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_Dim; // Align
												vector m_MatrixParams;
													Array Array; // Align
														int size;
														MatrixParameter data;
															int m_NameIndex;
															int m_Index;
															int m_ArraySize;
															SInt8 m_Type;
															SInt8 m_RowCount; // Align
												vector m_TextureParams;
													Array Array; // Align
														int size;
														TextureParameter data;
															int m_NameIndex;
															int m_Index;
															int m_SamplerIndex;
															bool m_MultiSampled;
															SInt8 m_Dim; // Align
												vector m_BufferParams;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_ConstantBuffers;
													Array Array; // Align
														int size;
														ConstantBuffer data;
															int m_NameIndex;
															vector m_MatrixParams;
																Array Array; // Align
																	int size;
																	MatrixParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_RowCount; // Align
															vector m_VectorParams;
																Array Array; // Align
																	int size;
																	VectorParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		SInt8 m_Type;
																		SInt8 m_Dim; // Align
															vector m_StructParams;
																Array Array; // Align
																	int size;
																	StructParameter data;
																		int m_NameIndex;
																		int m_Index;
																		int m_ArraySize;
																		int m_StructSize;
																		vector m_VectorMembers;
																			Array Array; // Align
																				int size;
																				VectorParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_Dim; // Align
																		vector m_MatrixMembers;
																			Array Array; // Align
																				int size;
																				MatrixParameter data;
																					int m_NameIndex;
																					int m_Index;
																					int m_ArraySize;
																					SInt8 m_Type;
																					SInt8 m_RowCount; // Align
															int m_Size;
												vector m_ConstantBufferBindings;
													Array Array; // Align
														int size;
														BufferBinding data;
															int m_NameIndex;
															int m_Index;
												vector m_UAVParams;
													Array Array; // Align
														int size;
														UAVParameter data;
															int m_NameIndex;
															int m_Index;
															int m_OriginalIndex;
												vector m_Samplers;
													Array Array; // Align
														int size;
														SamplerParameter data;
															unsigned int sampler;
															int bindPoint;
												int m_ShaderRequirements;
								bool m_HasInstancingVariant; // Align
								string m_UseName;
									Array Array; // Align
										int size;
										char data;
								string m_Name;
									Array Array; // Align
										int size;
										char data;
								string m_TextureName;
									Array Array; // Align
										int size;
										char data;
								SerializedTagMap m_Tags;
									map tags;
										Array Array;
											int size;
											pair data;
												string first;
													Array Array; // Align
														int size;
														char data;
												string second;
													Array Array; // Align
														int size;
														char data;
					SerializedTagMap m_Tags;
						map tags;
							Array Array;
								int size;
								pair data;
									string first;
										Array Array; // Align
											int size;
											char data;
									string second;
										Array Array; // Align
											int size;
											char data;
					int m_LOD;
		string m_Name;
			Array Array; // Align
				int size;
				char data;
		string m_CustomEditorName;
			Array Array; // Align
				int size;
				char data;
		string m_FallbackName;
			Array Array; // Align
				int size;
				char data;
		vector m_Dependencies;
			Array Array; // Align
				int size;
				SerializedShaderDependency data;
					string from;
						Array Array; // Align
							int size;
							char data;
					string to;
						Array Array; // Align
							int size;
							char data;
		bool m_DisableNoSubshadersMessage; // Align
	vector platforms;
		Array Array; // Align
			int size;
			unsigned int data;
	vector offsets;
		Array Array; // Align
			int size;
			unsigned int data;
	vector compressedLengths;
		Array Array; // Align
			int size;
			unsigned int data;
	vector decompressedLengths;
		Array Array; // Align
			int size;
			unsigned int data;
	vector compressedBlob;
		Array Array; // Align
			int size;
			UInt8 data;
	vector m_Dependencies;
		Array Array; // Align
			int size;
			PPtr<Shader> data;
				int m_FileID;
				SInt64 m_PathID;
	bool m_ShaderIsBaked; // Align

Class TextAsset
TextAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_Script;
		Array Array; // Align
			int size;
			char data;

Class Rigidbody2D
Rigidbody2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	int m_BodyType;
	bool m_Simulated;
	bool m_UseFullKinematicContacts;
	bool m_UseAutoMass; // Align
	float m_Mass;
	float m_LinearDrag;
	float m_AngularDrag;
	float m_GravityScale;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	int m_Interpolate;
	int m_SleepingMode;
	int m_CollisionDetection;
	int m_Constraints;

Class Collider2D
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class Rigidbody
Rigidbody Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	float m_Mass;
	float m_Drag;
	float m_AngularDrag;
	bool m_UseGravity;
	bool m_IsKinematic;
	UInt8 m_Interpolate; // Align
	int m_Constraints;
	int m_CollisionDetection;

Class PhysicsManager
PhysicsManager Base;
	Vector3f m_Gravity;
		float x;
		float y;
		float z;
	PPtr<PhysicMaterial> m_DefaultMaterial;
		int m_FileID;
		SInt64 m_PathID;
	float m_BounceThreshold;
	float m_SleepThreshold;
	float m_DefaultContactOffset;
	int m_DefaultSolverIterations;
	int m_DefaultSolverVelocityIterations;
	bool m_QueriesHitBackfaces;
	bool m_QueriesHitTriggers;
	bool m_EnableAdaptiveForce; // Align
	float m_ClothInterCollisionDistance;
	float m_ClothInterCollisionStiffness;
	int m_ContactsGeneration; // Align
	vector m_LayerCollisionMatrix;
		Array Array; // Align
			int size;
			unsigned int data;
	bool m_AutoSimulation;
	bool m_AutoSyncTransforms;
	bool m_ClothInterCollisionSettingsToggle; // Align
	int m_ContactPairsMode;
	int m_BroadphaseType;
	AABB m_WorldBounds;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	int m_WorldSubdivisions;

Class Collider
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class Joint
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class CircleCollider2D
CircleCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	float m_Radius;

Class HingeJoint
HingeJoint Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Rigidbody> m_ConnectedBody;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Anchor;
		float x;
		float y;
		float z;
	Vector3f m_Axis;
		float x;
		float y;
		float z;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector3f m_ConnectedAnchor;
		float x;
		float y;
		float z;
	bool m_UseSpring; // Align
	JointSpring m_Spring;
		float spring;
		float damper;
		float targetPosition;
	bool m_UseMotor; // Align
	JointMotor m_Motor;
		float targetVelocity;
		float force;
		int freeSpin;
	bool m_UseLimits; // Align
	JointLimits m_Limits;
		float min;
		float max;
		float bounciness;
		float bounceMinVelocity;
		float contactDistance;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_EnableCollision;
	bool m_EnablePreprocessing; // Align
	float m_MassScale;
	float m_ConnectedMassScale;

Class PolygonCollider2D
PolygonCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	SpriteTilingProperty m_SpriteTilingProperty;
		Vector4f border;
			float x;
			float y;
			float z;
			float w;
		Vector2f pivot;
			float x;
			float y;
		Vector2f oldSize;
			float x;
			float y;
		Vector2f newSize;
			float x;
			float y;
		float adaptiveTilingThreshold;
		int drawMode;
		bool adaptiveTiling; // Align
	bool m_AutoTiling; // Align
	Polygon2D m_Points;
		vector m_Paths;
			Array Array; // Align
				int size;
				vector data;
					Array Array; // Align
						int size;
						Vector2f data;
							float x;
							float y;

Class BoxCollider2D
BoxCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	SpriteTilingProperty m_SpriteTilingProperty;
		Vector4f border;
			float x;
			float y;
			float z;
			float w;
		Vector2f pivot;
			float x;
			float y;
		Vector2f oldSize;
			float x;
			float y;
		Vector2f newSize;
			float x;
			float y;
		float adaptiveTilingThreshold;
		int drawMode;
		bool adaptiveTiling; // Align
	bool m_AutoTiling; // Align
	Vector2f m_Size;
		float x;
		float y;
	float m_EdgeRadius;

Class PhysicsMaterial2D
PhysicsMaterial2D Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float friction;
	float bounciness;

Class MeshCollider
MeshCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_Enabled; // Align
	bool m_Convex; // Align
	int m_CookingOptions; // Align
	float m_SkinWidth;
	PPtr<Mesh> m_Mesh;
		int m_FileID;
		SInt64 m_PathID;

Class BoxCollider
BoxCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_Enabled; // Align
	Vector3f m_Size;
		float x;
		float y;
		float z;
	Vector3f m_Center;
		float x;
		float y;
		float z;

Class CompositeCollider2D
CompositeCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	int m_GeometryType;
	int m_GenerationType;
	float m_EdgeRadius;
	vector m_ColliderPaths;
		Array Array; // Align
			int size;
			SubCollider data;
				PPtr<Collider2D> m_Collider;
					int m_FileID;
					SInt64 m_PathID;
				vector m_ColliderPaths;
					Array Array; // Align
						int size;
						vector data;
							Array Array; // Align
								int size;
								IntPoint data;
									SInt64 X;
									SInt64 Y;
	Polygon2D m_CompositePaths;
		vector m_Paths;
			Array Array; // Align
				int size;
				vector data;
					Array Array; // Align
						int size;
						Vector2f data;
							float x;
							float y;
	float m_VertexDistance;

Class EdgeCollider2D
EdgeCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	float m_EdgeRadius;
	vector m_Points;
		Array Array; // Align
			int size;
			Vector2f data;
				float x;
				float y;

Class CapsuleCollider2D
CapsuleCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;
	Vector2f m_Size;
		float x;
		float y;
	int m_Direction;

Class ComputeShader
ComputeShader Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector variants;
		Array Array; // Align
			int size;
			ComputeShaderVariant data;
				int targetRenderer;
				int targetLevel;
				vector kernels;
					Array Array; // Align
						int size;
						ComputeShaderKernel data;
							string name;
								Array Array; // Align
									int size;
									char data;
							vector cbs;
								Array Array; // Align
									int size;
									ComputeShaderResource data;
										string name;
											Array Array; // Align
												int size;
												char data;
										string generatedName;
											Array Array; // Align
												int size;
												char data;
										int bindPoint;
										ComputeBufferCounter counter;
											int bindpoint;
											int offset;
							vector textures;
								Array Array; // Align
									int size;
									ComputeShaderResource data;
										string name;
											Array Array; // Align
												int size;
												char data;
										string generatedName;
											Array Array; // Align
												int size;
												char data;
										int bindPoint;
										ComputeBufferCounter counter;
											int bindpoint;
											int offset;
							vector builtinSamplers;
								Array Array; // Align
									int size;
									ComputeShaderBuiltinSampler data;
										unsigned int sampler;
										int bindPoint;
							vector inBuffers;
								Array Array; // Align
									int size;
									ComputeShaderResource data;
										string name;
											Array Array; // Align
												int size;
												char data;
										string generatedName;
											Array Array; // Align
												int size;
												char data;
										int bindPoint;
										ComputeBufferCounter counter;
											int bindpoint;
											int offset;
							vector outBuffers;
								Array Array; // Align
									int size;
									ComputeShaderResource data;
										string name;
											Array Array; // Align
												int size;
												char data;
										string generatedName;
											Array Array; // Align
												int size;
												char data;
										int bindPoint;
										ComputeBufferCounter counter;
											int bindpoint;
											int offset;
							vector code;
								Array Array; // Align
									int size;
									UInt8 data;
							staticvector threadGroupSize;
								Array Array;
									int size;
									unsigned int data;
				vector constantBuffers;
					Array Array; // Align
						int size;
						ComputeShaderCB data;
							string name;
								Array Array; // Align
									int size;
									char data;
							int byteSize;
							vector params;
								Array Array; // Align
									int size;
									ComputeShaderParam data;
										string name;
											Array Array; // Align
												int size;
												char data;
										int type;
										int offset;
										int arraySize;
										int rowCount;
										int colCount;
				bool resourcesResolved; // Align

Class AnimationClip
AnimationClip Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	bool m_Legacy;
	bool m_Compressed;
	bool m_UseHighQualityCurve; // Align
	vector m_RotationCurves;
		Array Array; // Align
			int size;
			QuaternionCurve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Quaternionf value;
									float x;
									float y;
									float z;
									float w;
								Quaternionf inSlope;
									float x;
									float y;
									float z;
									float w;
								Quaternionf outSlope;
									float x;
									float y;
									float z;
									float w;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_CompressedRotationCurves;
		Array Array; // Align
			int size;
			CompressedAnimationCurve data;
				string m_Path;
					Array Array; // Align
						int size;
						char data;
				PackedBitVector m_Times;
					unsigned int m_NumItems;
					vector m_Data;
						Array Array; // Align
							int size;
							UInt8 data;
					UInt8 m_BitSize; // Align
				PackedBitVector m_Values;
					unsigned int m_NumItems;
					vector m_Data; // Align
						Array Array; // Align
							int size;
							UInt8 data;
				PackedBitVector m_Slopes;
					unsigned int m_NumItems;
					float m_Range;
					float m_Start;
					vector m_Data;
						Array Array; // Align
							int size;
							UInt8 data;
					UInt8 m_BitSize; // Align
				int m_PreInfinity;
				int m_PostInfinity;
	vector m_EulerCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_PositionCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_ScaleCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_FloatCurves;
		Array Array; // Align
			int size;
			FloatCurve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string attribute;
					Array Array; // Align
						int size;
						char data;
				string path;
					Array Array; // Align
						int size;
						char data;
				Type* classID;
				PPtr<MonoScript> script;
					int m_FileID;
					SInt64 m_PathID;
	vector m_PPtrCurves;
		Array Array; // Align
			int size;
			PPtrCurve data;
				vector curve;
					Array Array; // Align
						int size;
						PPtrKeyframe data;
							float time;
							PPtr<Object> value;
								int m_FileID;
								SInt64 m_PathID;
				string attribute;
					Array Array; // Align
						int size;
						char data;
				string path;
					Array Array; // Align
						int size;
						char data;
				Type* classID;
				PPtr<MonoScript> script;
					int m_FileID;
					SInt64 m_PathID;
	float m_SampleRate;
	int m_WrapMode;
	AABB m_Bounds;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	unsigned int m_MuscleClipSize;
	ClipMuscleConstant m_MuscleClip;
		HumanPose m_DeltaPose;
			xform m_RootX;
				float3 t;
					float x;
					float y;
					float z;
				float4 q;
					float x;
					float y;
					float z;
					float w;
				float3 s;
					float x;
					float y;
					float z;
			float3 m_LookAtPosition;
				float x;
				float y;
				float z;
			float4 m_LookAtWeight;
				float x;
				float y;
				float z;
				float w;
			staticvector m_GoalArray;
				Array Array;
					int size;
					HumanGoal data;
						xform m_X;
							float3 t;
								float x;
								float y;
								float z;
							float4 q;
								float x;
								float y;
								float z;
								float w;
							float3 s;
								float x;
								float y;
								float z;
						float m_WeightT;
						float m_WeightR;
						float3 m_HintT;
							float x;
							float y;
							float z;
						float m_HintWeightT;
			HandPose m_LeftHandPose;
				xform m_GrabX;
					float3 t;
						float x;
						float y;
						float z;
					float4 q;
						float x;
						float y;
						float z;
						float w;
					float3 s;
						float x;
						float y;
						float z;
				staticvector m_DoFArray;
					Array Array;
						int size;
						float data;
				float m_Override;
				float m_CloseOpen;
				float m_InOut;
				float m_Grab;
			HandPose m_RightHandPose;
				xform m_GrabX;
					float3 t;
						float x;
						float y;
						float z;
					float4 q;
						float x;
						float y;
						float z;
						float w;
					float3 s;
						float x;
						float y;
						float z;
				staticvector m_DoFArray;
					Array Array;
						int size;
						float data;
				float m_Override;
				float m_CloseOpen;
				float m_InOut;
				float m_Grab;
			staticvector m_DoFArray;
				Array Array;
					int size;
					float data;
			staticvector m_TDoFArray;
				Array Array;
					int size;
					float3 data;
						float x;
						float y;
						float z;
		xform m_StartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_StopX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_LeftFootStartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_RightFootStartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		float3 m_AverageSpeed;
			float x;
			float y;
			float z;
		OffsetPtr m_Clip;
			Clip data;
				StreamedClip m_StreamedClip;
					vector data;
						Array Array;
							int size;
							unsigned int data;
					unsigned int curveCount;
				DenseClip m_DenseClip;
					int m_FrameCount;
					unsigned int m_CurveCount;
					float m_SampleRate;
					float m_BeginTime;
					vector m_SampleArray;
						Array Array;
							int size;
							float data;
				ConstantClip m_ConstantClip;
					vector data;
						Array Array;
							int size;
							float data;
				OffsetPtr m_Binding;
					ValueArrayConstant data;
						vector m_ValueArray;
							Array Array;
								int size;
								ValueConstant data;
									unsigned int m_ID;
									unsigned int m_Type;
									unsigned int m_Index;
		float m_StartTime;
		float m_StopTime;
		float m_OrientationOffsetY;
		float m_Level;
		float m_CycleOffset;
		float m_AverageAngularSpeed;
		staticvector m_IndexArray;
			Array Array;
				int size;
				int data;
		vector m_ValueArrayDelta;
			Array Array;
				int size;
				ValueDelta data;
					float m_Start;
					float m_Stop;
		vector m_ValueArrayReferencePose;
			Array Array;
				int size;
				float data;
		bool m_Mirror;
		bool m_LoopTime;
		bool m_LoopBlend;
		bool m_LoopBlendOrientation;
		bool m_LoopBlendPositionY;
		bool m_LoopBlendPositionXZ;
		bool m_StartAtOrigin;
		bool m_KeepOriginalOrientation;
		bool m_KeepOriginalPositionY;
		bool m_KeepOriginalPositionXZ;
		bool m_HeightFromFeet; // Align
	AnimationClipBindingConstant m_ClipBindingConstant;
		vector genericBindings;
			Array Array; // Align
				int size;
				GenericBinding data;
					unsigned int path;
					unsigned int attribute;
					PPtr<Object> script;
						int m_FileID;
						SInt64 m_PathID;
					int typeID;
					UInt8 customType;
					UInt8 isPPtrCurve; // Align
		vector pptrCurveMapping;
			Array Array; // Align
				int size;
				PPtr<Object> data;
					int m_FileID;
					SInt64 m_PathID;
	vector m_Events;
		Array Array; // Align
			int size;
			AnimationEvent data;
				float time;
				string functionName;
					Array Array; // Align
						int size;
						char data;
				string data;
					Array Array; // Align
						int size;
						char data;
				PPtr<Object> objectReferenceParameter;
					int m_FileID;
					SInt64 m_PathID;
				float floatParameter;
				int intParameter;
				int messageOptions;

Class ConstantForce
ConstantForce Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	Vector3f m_Force;
		float x;
		float y;
		float z;
	Vector3f m_RelativeForce;
		float x;
		float y;
		float z;
	Vector3f m_Torque;
		float x;
		float y;
		float z;
	Vector3f m_RelativeTorque;
		float x;
		float y;
		float z;

Class WorldParticleCollider
WorldParticleCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	float m_BounceFactor;
	float m_CollisionEnergyLoss;
	BitField m_CollidesWith;
		unsigned int m_Bits;
	bool m_SendCollisionMessage; // Align
	float m_MinKillVelocity;

Class TagManager
TagManager Base;
	vector tags;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector layers;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_SortingLayers;
		Array Array; // Align
			int size;
			SortingLayerEntry data;
				string name;
					Array Array; // Align
						int size;
						char data;
				unsigned int uniqueID; // Align

Class AudioListener
AudioListener Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align

Class AudioSource
AudioSource Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<AudioMixerGroup> OutputAudioMixerGroup;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AudioClip> m_audioClip;
		int m_FileID;
		SInt64 m_PathID;
	bool m_PlayOnAwake; // Align
	float m_Volume;
	float m_Pitch;
	bool Loop;
	bool Mute;
	bool Spatialize;
	bool SpatializePostEffects; // Align
	int Priority;
	float DopplerLevel;
	float MinDistance;
	float MaxDistance;
	float Pan2D;
	int rolloffMode;
	bool BypassEffects;
	bool BypassListenerEffects;
	bool BypassReverbZones; // Align
	AnimationCurve rolloffCustomCurve;
		vector m_Curve;
			Array Array; // Align
				int size;
				Keyframe data;
					float time;
					float value;
					float inSlope;
					float outSlope;
		int m_PreInfinity;
		int m_PostInfinity;
		int m_RotationOrder;
	AnimationCurve panLevelCustomCurve;
		vector m_Curve;
			Array Array; // Align
				int size;
				Keyframe data;
					float time;
					float value;
					float inSlope;
					float outSlope;
		int m_PreInfinity;
		int m_PostInfinity;
		int m_RotationOrder;
	AnimationCurve spreadCustomCurve;
		vector m_Curve;
			Array Array; // Align
				int size;
				Keyframe data;
					float time;
					float value;
					float inSlope;
					float outSlope;
		int m_PreInfinity;
		int m_PostInfinity;
		int m_RotationOrder;
	AnimationCurve reverbZoneMixCustomCurve;
		vector m_Curve;
			Array Array; // Align
				int size;
				Keyframe data;
					float time;
					float value;
					float inSlope;
					float outSlope;
		int m_PreInfinity;
		int m_PostInfinity;
		int m_RotationOrder;

Class AudioClip
AudioClip Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_LoadType;
	int m_Channels;
	int m_Frequency;
	int m_BitsPerSample;
	float m_Length;
	bool m_IsTrackerFormat;
	bool m_Ambisonic; // Align
	int m_SubsoundIndex;
	bool m_PreloadAudioData;
	bool m_LoadInBackground;
	bool m_Legacy3D; // Align
	StreamedResource m_Resource;
		string m_Source;
			Array Array; // Align
				int size;
				char data;
		UInt64 m_Offset;
		UInt64 m_Size;
	int m_CompressionFormat; // Align

Class RenderTexture
RenderTexture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_AntiAliasing;
	int m_DepthFormat;
	int m_ColorFormat;
	bool m_MipMap;
	bool m_GenerateMips;
	bool m_SRGB;
	bool m_UseDynamicScale;
	bool m_BindMS; // Align
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_Dimension;
	int m_VolumeDepth;

Class CustomRenderTexture
CustomRenderTexture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_AntiAliasing;
	int m_DepthFormat;
	int m_ColorFormat;
	bool m_MipMap;
	bool m_GenerateMips;
	bool m_SRGB;
	bool m_UseDynamicScale;
	bool m_BindMS; // Align
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_Dimension;
	int m_VolumeDepth;
	PPtr<Material> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	int m_InitSource;
	PPtr<Material> m_InitMaterial;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_InitColor;
		float r;
		float g;
		float b;
		float a;
	PPtr<Texture> m_InitTexture;
		int m_FileID;
		SInt64 m_PathID;
	int m_UpdateMode;
	int m_InitializationMode;
	int m_UpdateZoneSpace;
	int m_CurrentUpdateZoneSpace;
	vector m_UpdateZones;
		Array Array; // Align
			int size;
			UpdateZoneInfo data;
				Vector3f updateZoneCenter;
					float x;
					float y;
					float z;
				Vector3f updateZoneSize;
					float x;
					float y;
					float z;
				float rotation;
				int passIndex;
				bool needSwap; // Align
	float m_UpdatePeriod; // Align
	unsigned int m_ShaderPass;
	unsigned int m_CubemapFaceMask;
	bool m_DoubleBuffered; // Align
	bool m_WrapUpdateZones; // Align

Class MeshParticleEmitter
MeshParticleEmitter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	bool m_Emit; // Align
	float minSize;
	float maxSize;
	float minEnergy;
	float maxEnergy;
	float minEmission;
	float maxEmission;
	Vector3f worldVelocity;
		float x;
		float y;
		float z;
	Vector3f localVelocity;
		float x;
		float y;
		float z;
	Vector3f rndVelocity;
		float x;
		float y;
		float z;
	float emitterVelocityScale;
	Vector3f tangentVelocity;
		float x;
		float y;
		float z;
	float angularVelocity;
	float rndAngularVelocity;
	bool rndRotation;
	bool Simulate in Worldspace?;
	bool m_OneShot;
	bool m_InterpolateTriangles;
	bool m_Systematic; // Align
	float m_MinNormalVelocity;
	float m_MaxNormalVelocity;
	PPtr<Mesh> m_Mesh;
		int m_FileID;
		SInt64 m_PathID;

Class ParticleEmitter
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class Cubemap
Cubemap Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_CompleteImageSize;
	int m_TextureFormat;
	int m_MipCount;
	bool m_IsReadable; // Align
	int m_ImageCount;
	int m_TextureDimension;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_LightmapFormat;
	int m_ColorSpace;
	TypelessData image data; // Align
		int size;
		UInt8 data;
	StreamingInfo m_StreamData;
		unsigned int offset;
		unsigned int size;
		string path;
			Array Array; // Align
				int size;
				char data;
	vector m_SourceTextures; // Align
		Array Array; // Align
			int size;
			PPtr<Texture2D> data;
				int m_FileID;
				SInt64 m_PathID;

Class Avatar
Avatar Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	unsigned int m_AvatarSize;
	AvatarConstant m_Avatar;
		OffsetPtr m_AvatarSkeleton;
			Skeleton data;
				vector m_Node;
					Array Array;
						int size;
						Node data;
							int m_ParentId;
							int m_AxesId;
				vector m_ID;
					Array Array;
						int size;
						unsigned int data;
				vector m_AxesArray;
					Array Array;
						int size;
						Axes data;
							float4 m_PreQ;
								float x;
								float y;
								float z;
								float w;
							float4 m_PostQ;
								float x;
								float y;
								float z;
								float w;
							float3 m_Sgn;
								float x;
								float y;
								float z;
							Limit m_Limit;
								float3 m_Min;
									float x;
									float y;
									float z;
								float3 m_Max;
									float x;
									float y;
									float z;
							float m_Length;
							unsigned int m_Type;
		OffsetPtr m_AvatarSkeletonPose;
			SkeletonPose data;
				vector m_X;
					Array Array;
						int size;
						xform data;
							float3 t;
								float x;
								float y;
								float z;
							float4 q;
								float x;
								float y;
								float z;
								float w;
							float3 s;
								float x;
								float y;
								float z;
		OffsetPtr m_DefaultPose;
			SkeletonPose data;
				vector m_X;
					Array Array;
						int size;
						xform data;
							float3 t;
								float x;
								float y;
								float z;
							float4 q;
								float x;
								float y;
								float z;
								float w;
							float3 s;
								float x;
								float y;
								float z;
		vector m_SkeletonNameIDArray;
			Array Array;
				int size;
				unsigned int data;
		OffsetPtr m_Human;
			Human data;
				xform m_RootX;
					float3 t;
						float x;
						float y;
						float z;
					float4 q;
						float x;
						float y;
						float z;
						float w;
					float3 s;
						float x;
						float y;
						float z;
				OffsetPtr m_Skeleton;
					Skeleton data;
						vector m_Node;
							Array Array;
								int size;
								Node data;
									int m_ParentId;
									int m_AxesId;
						vector m_ID;
							Array Array;
								int size;
								unsigned int data;
						vector m_AxesArray;
							Array Array;
								int size;
								Axes data;
									float4 m_PreQ;
										float x;
										float y;
										float z;
										float w;
									float4 m_PostQ;
										float x;
										float y;
										float z;
										float w;
									float3 m_Sgn;
										float x;
										float y;
										float z;
									Limit m_Limit;
										float3 m_Min;
											float x;
											float y;
											float z;
										float3 m_Max;
											float x;
											float y;
											float z;
									float m_Length;
									unsigned int m_Type;
				OffsetPtr m_SkeletonPose;
					SkeletonPose data;
						vector m_X;
							Array Array;
								int size;
								xform data;
									float3 t;
										float x;
										float y;
										float z;
									float4 q;
										float x;
										float y;
										float z;
										float w;
									float3 s;
										float x;
										float y;
										float z;
				OffsetPtr m_LeftHand;
					Hand data;
						staticvector m_HandBoneIndex;
							Array Array;
								int size;
								int data;
				OffsetPtr m_RightHand;
					Hand data;
						staticvector m_HandBoneIndex;
							Array Array;
								int size;
								int data;
				vector m_Handles;
					Array Array;
						int size;
						Handle data;
							xform m_X;
								float3 t;
									float x;
									float y;
									float z;
								float4 q;
									float x;
									float y;
									float z;
									float w;
								float3 s;
									float x;
									float y;
									float z;
							unsigned int m_ParentHumanIndex;
							unsigned int m_ID;
				vector m_ColliderArray;
					Array Array;
						int size;
						Collider data;
							xform m_X;
								float3 t;
									float x;
									float y;
									float z;
								float4 q;
									float x;
									float y;
									float z;
									float w;
								float3 s;
									float x;
									float y;
									float z;
							unsigned int m_Type;
							unsigned int m_XMotionType;
							unsigned int m_YMotionType;
							unsigned int m_ZMotionType;
							float m_MinLimitX;
							float m_MaxLimitX;
							float m_MaxLimitY;
							float m_MaxLimitZ;
				staticvector m_HumanBoneIndex;
					Array Array;
						int size;
						int data;
				staticvector m_HumanBoneMass;
					Array Array;
						int size;
						float data;
				staticvector m_ColliderIndex;
					Array Array;
						int size;
						int data;
				float m_Scale;
				float m_ArmTwist;
				float m_ForeArmTwist;
				float m_UpperLegTwist;
				float m_LegTwist;
				float m_ArmStretch;
				float m_LegStretch;
				float m_FeetSpacing;
				bool m_HasLeftHand;
				bool m_HasRightHand;
				bool m_HasTDoF; // Align
		vector m_HumanSkeletonIndexArray;
			Array Array;
				int size;
				int data;
		vector m_HumanSkeletonReverseIndexArray;
			Array Array;
				int size;
				int data;
		int m_RootMotionBoneIndex;
		xform m_RootMotionBoneX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		OffsetPtr m_RootMotionSkeleton;
			Skeleton data;
				vector m_Node;
					Array Array;
						int size;
						Node data;
							int m_ParentId;
							int m_AxesId;
				vector m_ID;
					Array Array;
						int size;
						unsigned int data;
				vector m_AxesArray;
					Array Array;
						int size;
						Axes data;
							float4 m_PreQ;
								float x;
								float y;
								float z;
								float w;
							float4 m_PostQ;
								float x;
								float y;
								float z;
								float w;
							float3 m_Sgn;
								float x;
								float y;
								float z;
							Limit m_Limit;
								float3 m_Min;
									float x;
									float y;
									float z;
								float3 m_Max;
									float x;
									float y;
									float z;
							float m_Length;
							unsigned int m_Type;
		OffsetPtr m_RootMotionSkeletonPose;
			SkeletonPose data;
				vector m_X;
					Array Array;
						int size;
						xform data;
							float3 t;
								float x;
								float y;
								float z;
							float4 q;
								float x;
								float y;
								float z;
								float w;
							float3 s;
								float x;
								float y;
								float z;
		vector m_RootMotionSkeletonIndexArray; // Align
			Array Array;
				int size;
				int data;
	map m_TOS;
		Array Array;
			int size;
			pair data;
				unsigned int first;
				string second;
					Array Array; // Align
						int size;
						char data;

Class AnimatorController
AnimatorController Base;
	string m_Name; // Align
		Array Array; // Align
			int size;
			char data;
	unsigned int m_ControllerSize;
	ControllerConstant m_Controller;
		vector m_LayerArray;
			Array Array;
				int size;
				OffsetPtr data;
					LayerConstant data;
						unsigned int m_StateMachineIndex;
						unsigned int m_StateMachineMotionSetIndex;
						HumanPoseMask m_BodyMask;
							unsigned int word0;
							unsigned int word1;
							unsigned int word2;
						OffsetPtr m_SkeletonMask;
							SkeletonMask data;
								vector m_Data;
									Array Array;
										int size;
										SkeletonMaskElement data;
											unsigned int m_PathHash;
											float m_Weight;
						unsigned int m_Binding;
						int (int&)m_LayerBlendingMode;
						float m_DefaultWeight;
						bool m_IKPass;
						bool m_SyncedLayerAffectsTiming; // Align
		vector m_StateMachineArray;
			Array Array;
				int size;
				OffsetPtr data;
					StateMachineConstant data;
						vector m_StateConstantArray;
							Array Array;
								int size;
								OffsetPtr data;
									StateConstant data;
										vector m_TransitionConstantArray;
											Array Array;
												int size;
												OffsetPtr data;
													TransitionConstant data;
														vector m_ConditionConstantArray;
															Array Array;
																int size;
																OffsetPtr data;
																	ConditionConstant data;
																		unsigned int m_ConditionMode;
																		unsigned int m_EventID;
																		float m_EventThreshold;
																		float m_ExitTime;
														unsigned int m_DestinationState;
														unsigned int m_FullPathID;
														unsigned int m_ID;
														unsigned int m_UserID;
														float m_TransitionDuration;
														float m_TransitionOffset;
														float m_ExitTime;
														bool m_HasExitTime;
														bool m_HasFixedDuration; // Align
														int m_InterruptionSource;
														bool m_OrderedInterruption;
														bool m_CanTransitionToSelf; // Align
										vector m_BlendTreeConstantIndexArray;
											Array Array;
												int size;
												int data;
										vector m_BlendTreeConstantArray;
											Array Array;
												int size;
												OffsetPtr data;
													BlendTreeConstant data;
														vector m_NodeArray;
															Array Array;
																int size;
																OffsetPtr data;
																	BlendTreeNodeConstant data;
																		unsigned int m_BlendType;
																		unsigned int m_BlendEventID;
																		unsigned int m_BlendEventYID;
																		vector m_ChildIndices;
																			Array Array;
																				int size;
																				unsigned int data;
																		OffsetPtr m_Blend1dData;
																			Blend1dDataConstant data;
																				vector m_ChildThresholdArray;
																					Array Array;
																						int size;
																						float data;
																		OffsetPtr m_Blend2dData;
																			Blend2dDataConstant data;
																				vector m_ChildPositionArray;
																					Array Array;
																						int size;
																						Vector2f data;
																							float x;
																							float y;
																				vector m_ChildMagnitudeArray;
																					Array Array;
																						int size;
																						float data;
																				vector m_ChildPairVectorArray;
																					Array Array;
																						int size;
																						Vector2f data;
																							float x;
																							float y;
																				vector m_ChildPairAvgMagInvArray;
																					Array Array;
																						int size;
																						float data;
																				vector m_ChildNeighborListArray;
																					Array Array;
																						int size;
																						MotionNeighborList data;
																							vector m_NeighborArray;
																								Array Array;
																									int size;
																									unsigned int data;
																		OffsetPtr m_BlendDirectData;
																			BlendDirectDataConstant data;
																				vector m_ChildBlendEventIDArray;
																					Array Array;
																						int size;
																						unsigned int data;
																				bool m_NormalizedBlendValues; // Align
																		unsigned int m_ClipID;
																		float m_Duration;
																		float m_CycleOffset;
																		bool m_Mirror; // Align
										unsigned int m_NameID;
										unsigned int m_PathID;
										unsigned int m_FullPathID;
										unsigned int m_TagID;
										unsigned int m_SpeedParamID;
										unsigned int m_MirrorParamID;
										unsigned int m_CycleOffsetParamID;
										unsigned int m_TimeParamID;
										float m_Speed;
										float m_CycleOffset;
										bool m_IKOnFeet;
										bool m_WriteDefaultValues;
										bool m_Loop;
										bool m_Mirror; // Align
						vector m_AnyStateTransitionConstantArray;
							Array Array;
								int size;
								OffsetPtr data;
									TransitionConstant data;
										vector m_ConditionConstantArray;
											Array Array;
												int size;
												OffsetPtr data;
													ConditionConstant data;
														unsigned int m_ConditionMode;
														unsigned int m_EventID;
														float m_EventThreshold;
														float m_ExitTime;
										unsigned int m_DestinationState;
										unsigned int m_FullPathID;
										unsigned int m_ID;
										unsigned int m_UserID;
										float m_TransitionDuration;
										float m_TransitionOffset;
										float m_ExitTime;
										bool m_HasExitTime;
										bool m_HasFixedDuration; // Align
										int m_InterruptionSource;
										bool m_OrderedInterruption;
										bool m_CanTransitionToSelf; // Align
						vector m_SelectorStateConstantArray;
							Array Array;
								int size;
								OffsetPtr data;
									SelectorStateConstant data;
										vector m_TransitionConstantArray;
											Array Array;
												int size;
												OffsetPtr data;
													SelectorTransitionConstant data;
														unsigned int m_Destination;
														vector m_ConditionConstantArray;
															Array Array;
																int size;
																OffsetPtr data;
																	ConditionConstant data;
																		unsigned int m_ConditionMode;
																		unsigned int m_EventID;
																		float m_EventThreshold;
																		float m_ExitTime;
										unsigned int m_FullPathID;
										bool m_IsEntry; // Align
						unsigned int m_DefaultState;
						unsigned int m_MotionSetCount;
		OffsetPtr m_Values;
			ValueArrayConstant data;
				vector m_ValueArray;
					Array Array;
						int size;
						ValueConstant data;
							unsigned int m_ID;
							unsigned int m_Type;
							unsigned int m_Index;
		OffsetPtr m_DefaultValues;
			ValueArray data;
				vector m_PositionValues;
					Array Array;
						int size;
						float3 data;
							float x;
							float y;
							float z;
				vector m_QuaternionValues;
					Array Array;
						int size;
						float4 data;
							float x;
							float y;
							float z;
							float w;
				vector m_ScaleValues;
					Array Array;
						int size;
						float3 data;
							float x;
							float y;
							float z;
				vector m_FloatValues;
					Array Array;
						int size;
						float data;
				vector m_IntValues;
					Array Array;
						int size;
						int data;
				vector m_BoolValues; // Align
					Array Array; // Align
						int size;
						bool data;
	map m_TOS;
		Array Array;
			int size;
			pair data;
				unsigned int first;
				string second;
					Array Array; // Align
						int size;
						char data;
	vector m_AnimationClips;
		Array Array; // Align
			int size;
			PPtr<AnimationClip> data;
				int m_FileID;
				SInt64 m_PathID;
	StateMachineBehaviourVectorDescription m_StateMachineBehaviourVectorDescription;
		map m_StateMachineBehaviourRanges;
			Array Array;
				int size;
				pair data;
					StateKey first;
						unsigned int m_StateID;
						int m_LayerIndex;
					StateRange second;
						unsigned int m_StartIndex;
						unsigned int m_Count;
		vector m_StateMachineBehaviourIndices;
			Array Array; // Align
				int size;
				unsigned int data;
	vector m_StateMachineBehaviours;
		Array Array; // Align
			int size;
			PPtr<MonoBehaviour> data;
				int m_FileID;
				SInt64 m_PathID;
	bool m_MultiThreadedStateMachine; // Align

Class GUILayer
Behaviour Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align

Class RuntimeAnimatorController

Class ScriptMapper
ScriptMapper Base;
	NameToObjectMap m_Shaders;
		map m_ObjectToName;
			Array Array;
				int size;
				pair data;
					PPtr<Shader> first;
						int m_FileID;
						SInt64 m_PathID;
					string second;
						Array Array; // Align
							int size;
							char data;
	bool m_PreloadShaders;

Class Animator
Animator Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<Avatar> m_Avatar;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<RuntimeAnimatorController> m_Controller;
		int m_FileID;
		SInt64 m_PathID;
	int m_CullingMode;
	int m_UpdateMode;
	bool m_ApplyRootMotion;
	bool m_LinearVelocityBlending; // Align
	bool m_HasTransformHierarchy;
	bool m_AllowConstantClipSamplingOptimization; // Align

Class TrailRenderer
TrailRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	float m_Time;
	LineParameters m_Parameters;
		float widthMultiplier;
		AnimationCurve widthCurve;
			vector m_Curve;
				Array Array; // Align
					int size;
					Keyframe data;
						float time;
						float value;
						float inSlope;
						float outSlope;
			int m_PreInfinity;
			int m_PostInfinity;
			int m_RotationOrder;
		Gradient colorGradient;
			ColorRGBA key0;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key1;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key2;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key3;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key4;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key5;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key6;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key7;
				float r;
				float g;
				float b;
				float a;
			UInt16 ctime0;
			UInt16 ctime1;
			UInt16 ctime2;
			UInt16 ctime3;
			UInt16 ctime4;
			UInt16 ctime5;
			UInt16 ctime6;
			UInt16 ctime7;
			UInt16 atime0;
			UInt16 atime1;
			UInt16 atime2;
			UInt16 atime3;
			UInt16 atime4;
			UInt16 atime5;
			UInt16 atime6;
			UInt16 atime7;
			int m_Mode;
			UInt8 m_NumColorKeys;
			UInt8 m_NumAlphaKeys; // Align
		int numCornerVertices;
		int numCapVertices;
		int alignment;
		int textureMode;
		bool generateLightingData; // Align
	float m_MinVertexDistance;
	bool m_Autodestruct;

Class DelayedCallManager
GlobalGameManager Base;

Class TextMesh
TextMesh Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	string m_Text;
		Array Array; // Align
			int size;
			char data;
	float m_OffsetZ;
	float m_CharacterSize;
	float m_LineSpacing;
	SInt16 m_Anchor;
	SInt16 m_Alignment;
	float m_TabSize;
	int m_FontSize;
	int m_FontStyle;
	bool m_RichText; // Align
	PPtr<Font> m_Font;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_Color;
		unsigned int rgba;

Class RenderSettings
RenderSettings Base;
	bool m_Fog; // Align
	ColorRGBA m_FogColor;
		float r;
		float g;
		float b;
		float a;
	int m_FogMode;
	float m_FogDensity;
	float m_LinearFogStart;
	float m_LinearFogEnd;
	ColorRGBA m_AmbientSkyColor;
		float r;
		float g;
		float b;
		float a;
	ColorRGBA m_AmbientEquatorColor;
		float r;
		float g;
		float b;
		float a;
	ColorRGBA m_AmbientGroundColor;
		float r;
		float g;
		float b;
		float a;
	float m_AmbientIntensity;
	int m_AmbientMode; // Align
	ColorRGBA m_SubtractiveShadowColor;
		float r;
		float g;
		float b;
		float a;
	PPtr<Material> m_SkyboxMaterial;
		int m_FileID;
		SInt64 m_PathID;
	float m_HaloStrength;
	float m_FlareStrength;
	float m_FlareFadeSpeed;
	PPtr<Texture2D> m_HaloTexture;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Texture2D> m_SpotCookie;
		int m_FileID;
		SInt64 m_PathID;
	int m_DefaultReflectionMode;
	int m_DefaultReflectionResolution;
	int m_ReflectionBounces;
	float m_ReflectionIntensity;
	PPtr<Cubemap> m_CustomReflection;
		int m_FileID;
		SInt64 m_PathID;
	SphericalHarmonicsL2 m_AmbientProbe;
		float sh[ 0];
		float sh[ 1];
		float sh[ 2];
		float sh[ 3];
		float sh[ 4];
		float sh[ 5];
		float sh[ 6];
		float sh[ 7];
		float sh[ 8];
		float sh[ 9];
		float sh[10];
		float sh[11];
		float sh[12];
		float sh[13];
		float sh[14];
		float sh[15];
		float sh[16];
		float sh[17];
		float sh[18];
		float sh[19];
		float sh[20];
		float sh[21];
		float sh[22];
		float sh[23];
		float sh[24];
		float sh[25];
		float sh[26];
	PPtr<Cubemap> m_GeneratedSkyboxReflection;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Light> m_Sun;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_IndirectSpecularColor;
		float r;
		float g;
		float b;
		float a;

Class Light
Light Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_Type;
	ColorRGBA m_Color;
		float r;
		float g;
		float b;
		float a;
	float m_Intensity;
	float m_Range;
	float m_SpotAngle;
	float m_CookieSize;
	ShadowSettings m_Shadows;
		int m_Type;
		int m_Resolution;
		int m_CustomResolution;
		float m_Strength;
		float m_Bias;
		float m_NormalBias;
		float m_NearPlane;
	PPtr<Texture> m_Cookie;
		int m_FileID;
		SInt64 m_PathID;
	bool m_DrawHalo; // Align
	LightBakingOutput m_BakingOutput;
		int probeOcclusionLightIndex;
		int occlusionMaskChannel;
		LightmapBakeMode lightmapBakeMode;
			int lightmapBakeType;
			int mixedLightingMode;
		bool isBaked; // Align
	PPtr<Flare> m_Flare;
		int m_FileID;
		SInt64 m_PathID;
	int m_RenderMode;
	BitField m_CullingMask;
		unsigned int m_Bits;
	int m_Lightmapping;
	Vector2f m_AreaSize;
		float x;
		float y;
	float m_BounceIntensity;
	float m_ColorTemperature;
	bool m_UseColorTemperature; // Align

Class CGProgram
TextAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_Script;
		Array Array; // Align
			int size;
			char data;

Class BaseAnimationTrack

Class Animation
Animation Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<AnimationClip> m_Animation;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Animations;
		Array Array; // Align
			int size;
			PPtr<AnimationClip> data;
				int m_FileID;
				SInt64 m_PathID;
	int m_WrapMode;
	bool m_PlayAutomatically;
	bool m_AnimatePhysics; // Align
	int m_CullingType;

Class MonoBehaviour
MonoBehaviour Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<MonoScript> m_Script;
		int m_FileID;
		SInt64 m_PathID;
	string m_Name;
		Array Array; // Align
			int size;
			char data;

Class MonoScript
MonoScript Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ExecutionOrder;
	Hash128 m_PropertiesHash;
		UInt8 bytes[0];
		UInt8 bytes[1];
		UInt8 bytes[2];
		UInt8 bytes[3];
		UInt8 bytes[4];
		UInt8 bytes[5];
		UInt8 bytes[6];
		UInt8 bytes[7];
		UInt8 bytes[8];
		UInt8 bytes[9];
		UInt8 bytes[10];
		UInt8 bytes[11];
		UInt8 bytes[12];
		UInt8 bytes[13];
		UInt8 bytes[14];
		UInt8 bytes[15];
	string m_ClassName;
		Array Array; // Align
			int size;
			char data;
	string m_Namespace;
		Array Array; // Align
			int size;
			char data;
	string m_AssemblyName;
		Array Array; // Align
			int size;
			char data;
	bool m_IsEditorScript;

Class MonoManager
MonoManager Base;
	set m_Scripts;
		Array Array;
			int size;
			PPtr<MonoScript> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_AssemblyNames;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_AssemblyTypes;
		Array Array; // Align
			int size;
			int data;

Class Texture3D
Texture3D Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_Depth;
	int m_Format;
	int m_MipCount; // Align
	unsigned int m_DataSize;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	bool m_IsReadable; // Align
	TypelessData image data; // Align
		int size;
		UInt8 data;
	StreamingInfo m_StreamData;
		unsigned int offset;
		unsigned int size;
		string path;
			Array Array; // Align
				int size;
				char data;

Class NewAnimationTrack
NewAnimationTrack Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Curves;
		Array Array; // Align
			int size;
			Channel data;
				int byteOffset;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string attributeName;
					Array Array; // Align
						int size;
						char data;
	Type* m_ClassID;

Class Projector
Projector Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_NearClipPlane;
	float m_FarClipPlane;
	float m_FieldOfView;
	float m_AspectRatio;
	bool m_Orthographic; // Align
	float m_OrthographicSize;
	PPtr<Material> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	BitField m_IgnoreLayers;
		unsigned int m_Bits;

Class LineRenderer
LineRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	vector m_Positions;
		Array Array; // Align
			int size;
			Vector3f data;
				float x;
				float y;
				float z;
	LineParameters m_Parameters;
		float widthMultiplier;
		AnimationCurve widthCurve;
			vector m_Curve;
				Array Array; // Align
					int size;
					Keyframe data;
						float time;
						float value;
						float inSlope;
						float outSlope;
			int m_PreInfinity;
			int m_PostInfinity;
			int m_RotationOrder;
		Gradient colorGradient;
			ColorRGBA key0;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key1;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key2;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key3;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key4;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key5;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key6;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA key7;
				float r;
				float g;
				float b;
				float a;
			UInt16 ctime0;
			UInt16 ctime1;
			UInt16 ctime2;
			UInt16 ctime3;
			UInt16 ctime4;
			UInt16 ctime5;
			UInt16 ctime6;
			UInt16 ctime7;
			UInt16 atime0;
			UInt16 atime1;
			UInt16 atime2;
			UInt16 atime3;
			UInt16 atime4;
			UInt16 atime5;
			UInt16 atime6;
			UInt16 atime7;
			int m_Mode;
			UInt8 m_NumColorKeys;
			UInt8 m_NumAlphaKeys; // Align
		int numCornerVertices;
		int numCapVertices;
		int alignment;
		int textureMode;
		bool generateLightingData; // Align
	bool m_UseWorldSpace;
	bool m_Loop;

Class Flare
Flare Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<Texture> m_FlareTexture;
		int m_FileID;
		SInt64 m_PathID;
	int m_TextureLayout;
	vector m_Elements;
		Array Array; // Align
			int size;
			FlareElement data;
				unsigned int m_ImageIndex;
				float m_Position;
				float m_Size;
				ColorRGBA m_Color;
					float r;
					float g;
					float b;
					float a;
				bool m_UseLightColor;
				bool m_Rotate;
				bool m_Zoom;
				bool m_Fade;
	bool m_UseFog;

Class Halo
Halo Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	ColorRGBA m_Color;
		unsigned int rgba;
	float m_Size;

Class LensFlare
LensFlare Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<Flare> m_Flare;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_Color;
		float r;
		float g;
		float b;
		float a;
	float m_Brightness;
	float m_FadeSpeed;
	BitField m_IgnoreLayers;
		unsigned int m_Bits;
	bool m_Directional;

Class FlareLayer
Behaviour Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align

Class HaloLayer
Behaviour Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align

Class NavMeshProjectSettings
NavMeshProjectSettings Base;
	vector areas;
		Array Array; // Align
			int size;
			NavMeshAreaData data;
				string name;
					Array Array; // Align
						int size;
						char data;
				float cost;
	int m_LastAgentTypeID;
	vector m_Settings;
		Array Array; // Align
			int size;
			NavMeshBuildSettings data;
				int agentTypeID;
				float agentRadius;
				float agentHeight;
				float agentSlope;
				float agentClimb;
				float ledgeDropHeight;
				float maxJumpAcrossDistance;
				float minRegionArea;
				int manualCellSize;
				float cellSize;
				int manualTileSize;
				int tileSize;
				int accuratePlacement;
				NavMeshBuildDebugSettings debug;
					UInt8 m_Flags; // Align
	vector m_SettingNames;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;

Class Font
Font Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float m_LineSpacing;
	PPtr<Material> m_DefaultMaterial;
		int m_FileID;
		SInt64 m_PathID;
	float m_FontSize;
	PPtr<Texture> m_Texture; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_AsciiStartOffset;
	float m_Tracking;
	int m_CharacterSpacing;
	int m_CharacterPadding;
	int m_ConvertCase;
	vector m_CharacterRects;
		Array Array; // Align
			int size;
			CharacterInfo data;
				unsigned int index;
				Rectf uv;
					float x;
					float y;
					float width;
					float height;
				Rectf vert;
					float x;
					float y;
					float width;
					float height;
				float advance;
				bool flipped; // Align
	map m_KerningValues;
		Array Array;
			int size;
			pair data;
				pair first;
					UInt16 first;
					UInt16 second;
				float second;
	float m_PixelScale; // Align
	vector m_FontData; // Align
		Array Array; // Align
			int size;
			char data;
	float m_Ascent;
	float m_Descent;
	unsigned int m_DefaultStyle;
	vector m_FontNames;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_FallbackFonts; // Align
		Array Array; // Align
			int size;
			PPtr<Font> data;
				int m_FileID;
				SInt64 m_PathID;
	int m_FontRenderingMode;
	bool m_UseLegacyBoundsCalculation;

Class PlayerSettings
PlayerSettings Base;
	GUID productGUID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	bool AndroidProfiler;
	bool AndroidFilterTouchesWhenObscured; // Align
	int defaultScreenOrientation;
	int targetDevice;
	bool useOnDemandResources; // Align
	int accelerometerFrequency; // Align
	string companyName;
		Array Array; // Align
			int size;
			char data;
	string productName;
		Array Array; // Align
			int size;
			char data;
	PPtr<Texture2D> defaultCursor;
		int m_FileID;
		SInt64 m_PathID;
	Vector2f cursorHotspot;
		float x;
		float y;
	ColorRGBA m_SplashScreenBackgroundColor;
		float r;
		float g;
		float b;
		float a;
	bool m_ShowUnitySplashScreen;
	bool m_ShowUnitySplashLogo; // Align
	float m_SplashScreenOverlayOpacity;
	int m_SplashScreenAnimation;
	int m_SplashScreenLogoStyle;
	int m_SplashScreenDrawMode; // Align
	float m_SplashScreenBackgroundAnimationZoom;
	float m_SplashScreenLogoAnimationZoom;
	float m_SplashScreenBackgroundLandscapeAspect;
	float m_SplashScreenBackgroundPortraitAspect;
	Rectf m_SplashScreenBackgroundLandscapeUvs;
		float x;
		float y;
		float width;
		float height;
	Rectf m_SplashScreenBackgroundPortraitUvs;
		float x;
		float y;
		float width;
		float height;
	vector m_SplashScreenLogos;
		Array Array; // Align
			int size;
			SplashScreenLogo data;
				PPtr<Sprite> logo;
					int m_FileID;
					SInt64 m_PathID;
				float duration; // Align
	PPtr<Texture2D> m_SplashScreenBackgroundLandscape;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Texture2D> m_SplashScreenBackgroundPortrait;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Texture2D> m_VirtualRealitySplashScreen;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Texture2D> m_HolographicTrackingLossScreen;
		int m_FileID;
		SInt64 m_PathID;
	int defaultScreenWidth;
	int defaultScreenHeight;
	int defaultScreenWidthWeb;
	int defaultScreenHeightWeb;
	int m_StereoRenderingPath;
	int m_ActiveColorSpace;
	bool m_MTRendering;
	bool mobileMTRenderingBaked; // Align
	vector m_StackTraceTypes;
		Array Array; // Align
			int size;
			int data;
	int iosShowActivityIndicatorOnLoading;
	int androidShowActivityIndicatorOnLoading;
	int tizenShowActivityIndicatorOnLoading;
	int iosAppInBackgroundBehavior;
	int displayResolutionDialog;
	bool iosAllowHTTPDownload;
	bool allowedAutorotateToPortrait;
	bool allowedAutorotateToPortraitUpsideDown;
	bool allowedAutorotateToLandscapeRight;
	bool allowedAutorotateToLandscapeLeft;
	bool useOSAutorotation;
	bool use32BitDisplayBuffer;
	bool preserveFramebufferAlpha;
	bool disableDepthAndStencilBuffers; // Align
	int androidBlitType; // Align
	bool defaultIsFullScreen;
	bool defaultIsNativeResolution;
	bool macRetinaSupport;
	bool runInBackground;
	bool captureSingleScreen;
	bool muteOtherAudioSources;
	bool Prepare IOS For Recording;
	bool Force IOS Speakers When Recording; // Align
	int deferSystemGesturesMode;
	bool hideHomeButton;
	bool submitAnalytics;
	bool usePlayerLog;
	bool bakeCollisionMeshes;
	bool forceSingleInstance;
	bool resizableWindow;
	bool useMacAppStoreValidation; // Align
	string macAppStoreCategory;
		Array Array; // Align
			int size;
			char data;
	bool gpuSkinning;
	bool graphicsJobs;
	bool xboxPIXTextureCapture;
	bool xboxEnableAvatar;
	bool xboxEnableKinect;
	bool xboxEnableKinectAutoTracking;
	bool xboxEnableFitness;
	bool visibleInBackground;
	bool allowFullscreenSwitch; // Align
	int graphicsJobMode;
	int macFullscreenMode;
	int d3d11FullscreenMode; // Align
	unsigned int xboxSpeechDB;
	bool xboxEnableHeadOrientation; // Align
	bool xboxEnableGuest; // Align
	bool xboxEnablePIXSampling; // Align
	bool metalFramebufferOnly;
	bool n3dsDisableStereoscopicView;
	bool n3dsEnableSharedListOpt;
	bool n3dsEnableVSync;
	int xboxOneResolution;
	int xboxOneSResolution;
	int xboxOneXResolution;
	int xboxOneMonoLoggingLevel;
	int xboxOneLoggingLevel;
	bool xboxOneDisableEsram; // Align
	unsigned int xboxOnePresentImmediateThreshold;
	int videoMemoryForVertexBuffers;
	int psp2PowerMode;
	bool psp2AcquireBGM; // Align
	int wiiUTVResolution;
	int wiiUGamePadMSAA;
	bool wiiUSupportsNunchuk;
	bool wiiUSupportsClassicController;
	bool wiiUSupportsBalanceBoard;
	bool wiiUSupportsMotionPlus;
	bool wiiUSupportsProController;
	bool wiiUAllowScreenCapture; // Align
	int wiiUControllerCount;
	AspectRatios m_SupportedAspectRatios;
		bool 4:3;
		bool 5:4;
		bool 16:10;
		bool 16:9;
		bool Others; // Align
	string bundleVersion;
		Array Array; // Align
			int size;
			char data;
	vector preloadedAssets;
		Array Array; // Align
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;
	int metroInputSource;
	bool wsaTransparentSwapchain; // Align
	bool m_HolographicPauseOnTrackingLoss;
	bool xboxOneDisableKinectGpuReservation;
	bool xboxOneEnable7thCore; // Align
	VRSettings vrSettings; // Align
		DeviceNone none; // Align
		Google cardboard; // Align
			int depthFormat; // Align
			bool enableTransitionView;
		Google daydream; // Align
			int depthFormat;
			bool useSustainedPerformanceMode;
			bool enableVideoLayer;
			bool useProtectedVideoMemory; // Align
			int minimumSupportedHeadTracking;
			int maximumSupportedHeadTracking;
		HoloLens hololens; // Align
			int depthFormat;
			bool depthBufferSharingEnabled;
		Oculus oculus; // Align
			bool sharedDepthBuffer;
			bool dashSupport; // Align
	bool protectGraphicsMemory; // Align
	bool useHDRDisplay; // Align
	vector m_ColorGamuts;
		Array Array; // Align
			int size;
			int data;
	int targetPixelDensity;
	int resolutionScalingMode;
	int androidSupportedAspectRatio;
	float androidMaxAspectRatio; // Align
	string cloudProjectId;
		Array Array; // Align
			int size;
			char data;
	string projectName;
		Array Array; // Align
			int size;
			char data;
	string organizationId;
		Array Array; // Align
			int size;
			char data;
	bool cloudEnabled;
	bool enableNativePlatformBackendsForNewInputSystem;
	bool disableOldInputManagerSupport;

Class NamedObject

Class GUITexture
GUITexture Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<Texture> m_Texture;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_Color;
		float r;
		float g;
		float b;
		float a;
	Rectf m_PixelInset;
		float x;
		float y;
		float width;
		float height;
	int m_LeftBorder;
	int m_RightBorder;
	int m_TopBorder;
	int m_BottomBorder;

Class GUIText
GUIText Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	string m_Text;
		Array Array; // Align
			int size;
			char data;
	SInt16 m_Anchor;
	SInt16 m_Alignment;
	Vector2f m_PixelOffset;
		float x;
		float y;
	float m_LineSpacing;
	float m_TabSize;
	PPtr<Font> m_Font;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Material> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	int m_FontSize;
	int m_FontStyle;
	ColorRGBA m_Color;
		unsigned int rgba;
	bool m_PixelCorrect;
	bool m_RichText;

Class GUIElement
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class PhysicMaterial
PhysicMaterial Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float dynamicFriction;
	float staticFriction;
	float bounciness;
	int frictionCombine;
	int bounceCombine;

Class SphereCollider
SphereCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_Enabled; // Align
	float m_Radius;
	Vector3f m_Center;
		float x;
		float y;
		float z;

Class CapsuleCollider
CapsuleCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_Enabled; // Align
	float m_Radius;
	float m_Height;
	int m_Direction;
	Vector3f m_Center;
		float x;
		float y;
		float z;

Class SkinnedMeshRenderer
SkinnedMeshRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	int m_Quality;
	bool m_UpdateWhenOffscreen;
	bool m_SkinnedMotionVectors; // Align
	PPtr<Mesh> m_Mesh;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Bones; // Align
		Array Array; // Align
			int size;
			PPtr<Transform> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_BlendShapeWeights;
		Array Array; // Align
			int size;
			float data;
	PPtr<Transform> m_RootBone;
		int m_FileID;
		SInt64 m_PathID;
	AABB m_AABB;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	bool m_DirtyAABB; // Align

Class FixedJoint
FixedJoint Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Rigidbody> m_ConnectedBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_EnableCollision;
	bool m_EnablePreprocessing; // Align
	float m_MassScale;
	float m_ConnectedMassScale;

Class BuildSettings
BuildSettings Base;
	vector scenes;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector preloadedPlugins;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector enabledVRDevices;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector buildTags;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	GUID buildGUID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	bool hasPROVersion;
	bool isNoWatermarkBuild;
	bool isPrototypingBuild;
	bool isEducationalBuild;
	bool isEmbedded;
	bool hasPublishingRights;
	bool hasShadows;
	bool hasSoftShadows;
	bool hasLocalLightShadows;
	bool hasAdvancedVersion;
	bool enableDynamicBatching;
	bool isDebugBuild;
	bool usesOnMouseEvents;
	bool hasClusterRendering; // Align
	string m_Version;
		Array Array; // Align
			int size;
			char data;
	string m_AuthToken;
		Array Array; // Align
			int size;
			char data;
	map runtimeClassHashes;
		Array Array;
			int size;
			pair data;
				Type* first;
				Hash128 second;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
	map scriptHashes;
		Array Array;
			int size;
			pair data;
				Hash128 first;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
				Hash128 second;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
	vector m_GraphicsAPIs;
		Array Array; // Align
			int size;
			int data;

Class AssetBundle
AssetBundle Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_PreloadTable;
		Array Array; // Align
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;
	map m_Container;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				AssetInfo second;
					int preloadIndex;
					int preloadSize;
					PPtr<Object> asset;
						int m_FileID;
						SInt64 m_PathID;
	AssetInfo m_MainAsset;
		int preloadIndex;
		int preloadSize;
		PPtr<Object> asset;
			int m_FileID;
			SInt64 m_PathID;
	unsigned int m_RuntimeCompatibility;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	vector m_Dependencies;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	bool m_IsStreamedSceneAssetBundle; // Align
	int m_ExplicitDataLayout;
	int m_PathFlags;
	map m_SceneHashes;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				string second;
					Array Array; // Align
						int size;
						char data;

Class CharacterController
CharacterController Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_Enabled; // Align
	float m_Height;
	float m_Radius;
	float m_SlopeLimit;
	float m_StepOffset;
	float m_SkinWidth;
	float m_MinMoveDistance;
	Vector3f m_Center;
		float x;
		float y;
		float z;

Class CharacterJoint
CharacterJoint Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Rigidbody> m_ConnectedBody;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Anchor;
		float x;
		float y;
		float z;
	Vector3f m_Axis;
		float x;
		float y;
		float z;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector3f m_ConnectedAnchor;
		float x;
		float y;
		float z;
	Vector3f m_SwingAxis;
		float x;
		float y;
		float z;
	SoftJointLimitSpring m_TwistLimitSpring;
		float spring;
		float damper;
	SoftJointLimit m_LowTwistLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimit m_HighTwistLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimitSpring m_SwingLimitSpring;
		float spring;
		float damper;
	SoftJointLimit m_Swing1Limit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimit m_Swing2Limit;
		float limit;
		float bounciness;
		float contactDistance;
	bool m_EnableProjection; // Align
	float m_ProjectionDistance;
	float m_ProjectionAngle;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_EnableCollision;
	bool m_EnablePreprocessing; // Align
	float m_MassScale;
	float m_ConnectedMassScale;

Class SpringJoint
SpringJoint Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Rigidbody> m_ConnectedBody;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Anchor;
		float x;
		float y;
		float z;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector3f m_ConnectedAnchor;
		float x;
		float y;
		float z;
	float m_Spring;
	float m_Damper;
	float m_MinDistance;
	float m_MaxDistance;
	float m_Tolerance;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_EnableCollision;
	bool m_EnablePreprocessing; // Align
	float m_MassScale;
	float m_ConnectedMassScale;

Class WheelCollider
WheelCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Center;
		float x;
		float y;
		float z;
	float m_Radius;
	JointSpring m_SuspensionSpring;
		float spring;
		float damper;
		float targetPosition;
	float m_SuspensionDistance;
	float m_ForceAppPointDistance;
	float m_Mass;
	float m_WheelDampingRate;
	WheelFrictionCurve m_ForwardFriction;
		float m_ExtremumSlip;
		float m_ExtremumValue;
		float m_AsymptoteSlip;
		float m_AsymptoteValue;
		float m_Stiffness;
	WheelFrictionCurve m_SidewaysFriction;
		float m_ExtremumSlip;
		float m_ExtremumValue;
		float m_AsymptoteSlip;
		float m_AsymptoteValue;
		float m_Stiffness;
	bool m_Enabled; // Align

Class ResourceManager
ResourceManager Base;
	map m_Container;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	vector m_DependentAssets;
		Array Array; // Align
			int size;
			ResourceManager_Dependency data;
				PPtr<Object> m_Object;
					int m_FileID;
					SInt64 m_PathID;
				vector m_Dependencies;
					Array Array; // Align
						int size;
						PPtr<Object> data;
							int m_FileID;
							SInt64 m_PathID;

Class NetworkView
NetworkView Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_StateSynchronization;
	PPtr<Component> m_Observed;
		int m_FileID;
		SInt64 m_PathID;
	NetworkViewID m_ViewID;
		unsigned int m_ID;
		unsigned int m_Type;

Class NetworkManager
NetworkManager Base;
	int m_DebugLevel;
	float m_Sendrate;
	map m_AssetToPrefab;
		Array Array;
			int size;
			pair data;
				GUID first;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
				PPtr<GameObject> second;
					int m_FileID;
					SInt64 m_PathID;

Class PreloadData
PreloadData Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Assets;
		Array Array; // Align
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_Dependencies;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;

Class MovieTexture
MovieTexture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	bool m_Loop; // Align
	PPtr<AudioClip> m_AudioClip;
		int m_FileID;
		SInt64 m_PathID;
	vector m_MovieData;
		Array Array; // Align
			int size;
			UInt8 data;
	int m_ColorSpace;

Class ConfigurableJoint
ConfigurableJoint Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Rigidbody> m_ConnectedBody;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Anchor;
		float x;
		float y;
		float z;
	Vector3f m_Axis;
		float x;
		float y;
		float z;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector3f m_ConnectedAnchor;
		float x;
		float y;
		float z;
	Vector3f m_SecondaryAxis;
		float x;
		float y;
		float z;
	int m_XMotion;
	int m_YMotion;
	int m_ZMotion;
	int m_AngularXMotion;
	int m_AngularYMotion;
	int m_AngularZMotion;
	SoftJointLimitSpring m_LinearLimitSpring;
		float spring;
		float damper;
	SoftJointLimit m_LinearLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimitSpring m_AngularXLimitSpring;
		float spring;
		float damper;
	SoftJointLimit m_LowAngularXLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimit m_HighAngularXLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimitSpring m_AngularYZLimitSpring;
		float spring;
		float damper;
	SoftJointLimit m_AngularYLimit;
		float limit;
		float bounciness;
		float contactDistance;
	SoftJointLimit m_AngularZLimit;
		float limit;
		float bounciness;
		float contactDistance;
	Vector3f m_TargetPosition;
		float x;
		float y;
		float z;
	Vector3f m_TargetVelocity;
		float x;
		float y;
		float z;
	JointDrive m_XDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	JointDrive m_YDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	JointDrive m_ZDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	Quaternionf m_TargetRotation;
		float x;
		float y;
		float z;
		float w;
	Vector3f m_TargetAngularVelocity;
		float x;
		float y;
		float z;
	int m_RotationDriveMode;
	JointDrive m_AngularXDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	JointDrive m_AngularYZDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	JointDrive m_SlerpDrive;
		float positionSpring;
		float positionDamper;
		float maximumForce;
	int m_ProjectionMode;
	float m_ProjectionDistance;
	float m_ProjectionAngle;
	bool m_ConfiguredInWorldSpace;
	bool m_SwapBodies; // Align
	float m_BreakForce;
	float m_BreakTorque;
	bool m_EnableCollision;
	bool m_EnablePreprocessing; // Align
	float m_MassScale;
	float m_ConnectedMassScale;

Class TerrainCollider
TerrainCollider Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<PhysicMaterial> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled; // Align
	PPtr<TerrainData> m_TerrainData;
		int m_FileID;
		SInt64 m_PathID;
	bool m_EnableTreeColliders;

Class MasterServerInterface
GlobalGameManager Base;

Class TerrainData
TerrainData Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	SplatDatabase m_SplatDatabase;
		vector m_Splats;
			Array Array; // Align
				int size;
				SplatPrototype data;
					PPtr<Texture2D> texture;
						int m_FileID;
						SInt64 m_PathID;
					PPtr<Texture2D> normalMap;
						int m_FileID;
						SInt64 m_PathID;
					Vector2f tileSize;
						float x;
						float y;
					Vector2f tileOffset;
						float x;
						float y;
					Vector4f specularMetallic;
						float x;
						float y;
						float z;
						float w;
					float smoothness;
		vector m_AlphaTextures;
			Array Array; // Align
				int size;
				PPtr<Texture2D> data;
					int m_FileID;
					SInt64 m_PathID;
		int m_AlphamapResolution;
		int m_BaseMapResolution;
		int m_ColorSpace;
		bool m_MaterialRequiresMetallic;
		bool m_MaterialRequiresSmoothness; // Align
	DetailDatabase m_DetailDatabase;
		vector m_Patches;
			Array Array; // Align
				int size;
				DetailPatch data;
					AABB bounds;
						Vector3f m_Center;
							float x;
							float y;
							float z;
						Vector3f m_Extent;
							float x;
							float y;
							float z;
					vector layerIndices;
						Array Array; // Align
							int size;
							UInt8 data;
					vector numberOfObjects;
						Array Array; // Align
							int size;
							UInt8 data;
		vector m_DetailPrototypes;
			Array Array; // Align
				int size;
				DetailPrototype data;
					PPtr<GameObject> prototype;
						int m_FileID;
						SInt64 m_PathID;
					PPtr<Texture2D> prototypeTexture;
						int m_FileID;
						SInt64 m_PathID;
					float minWidth;
					float maxWidth;
					float minHeight;
					float maxHeight;
					float noiseSpread;
					float bendFactor;
					ColorRGBA healthyColor;
						float r;
						float g;
						float b;
						float a;
					ColorRGBA dryColor;
						float r;
						float g;
						float b;
						float a;
					float lightmapFactor;
					int renderMode;
					int usePrototypeMesh;
		int m_PatchCount;
		int m_PatchSamples;
		vector m_RandomRotations;
			Array Array; // Align
				int size;
				Vector3f data;
					float x;
					float y;
					float z;
		ColorRGBA WavingGrassTint;
			float r;
			float g;
			float b;
			float a;
		float m_WavingGrassStrength;
		float m_WavingGrassAmount;
		float m_WavingGrassSpeed;
		vector m_TreeInstances;
			Array Array; // Align
				int size;
				TreeInstance data;
					Vector3f position;
						float x;
						float y;
						float z;
					float widthScale;
					float heightScale;
					float rotation;
					ColorRGBA color;
						unsigned int rgba;
					ColorRGBA lightmapColor;
						unsigned int rgba;
					int index;
		vector m_TreePrototypes;
			Array Array; // Align
				int size;
				TreePrototype data;
					PPtr<GameObject> prefab;
						int m_FileID;
						SInt64 m_PathID;
					float bendFactor;
		vector m_PreloadTextureAtlasData;
			Array Array; // Align
				int size;
				PPtr<Texture2D> data;
					int m_FileID;
					SInt64 m_PathID;
	Heightmap m_Heightmap;
		vector m_Heights; // Align
			Array Array; // Align
				int size;
				SInt16 data;
		vector m_PrecomputedError;
			Array Array; // Align
				int size;
				float data;
		vector m_MinMaxPatchHeights;
			Array Array; // Align
				int size;
				float data;
		int m_Width;
		int m_Height;
		float m_Thickness;
		int m_Levels;
		Vector3f m_Scale;
			float x;
			float y;
			float z;

Class LightmapSettings
LightmapSettings Base;
	EnlightenSceneMapping m_EnlightenSceneMapping;
		vector m_Renderers;
			Array Array; // Align
				int size;
				EnlightenRendererInformation data;
					PPtr<Object> renderer;
						int m_FileID;
						SInt64 m_PathID;
					Vector4f dynamicLightmapSTInSystem;
						float x;
						float y;
						float z;
						float w;
					int systemId;
					Hash128 instanceHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
		vector m_Systems;
			Array Array; // Align
				int size;
				EnlightenSystemInformation data;
					unsigned int rendererIndex;
					unsigned int rendererSize;
					int atlasIndex;
					int atlasOffsetX;
					int atlasOffsetY;
					Hash128 inputSystemHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					Hash128 radiositySystemHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
		vector m_Probesets;
			Array Array; // Align
				int size;
				Hash128 data;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
		vector m_SystemAtlases;
			Array Array; // Align
				int size;
				EnlightenSystemAtlasInformation data;
					int atlasSize;
					Hash128 atlasHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					int firstSystemId;
		vector m_TerrainChunks;
			Array Array; // Align
				int size;
				EnlightenTerrainChunksInformation data;
					int firstSystemId;
					int numChunksInX;
					int numChunksInY;
	PPtr<LightProbes> m_LightProbes;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Lightmaps;
		Array Array; // Align
			int size;
			LightmapData data;
				PPtr<Texture2D> m_Lightmap;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<Texture2D> m_DirLightmap;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<Texture2D> m_ShadowMask;
					int m_FileID;
					SInt64 m_PathID;
	int m_LightmapsMode; // Align
	GISettings m_GISettings;
		float m_BounceScale;
		float m_IndirectOutputScale;
		float m_AlbedoBoost;
		float m_TemporalCoherenceThreshold;
		unsigned int m_EnvironmentLightingMode;
		bool m_EnableBakedLightmaps;
		bool m_EnableRealtimeLightmaps; // Align
	bool m_UseShadowmask;

Class WebCamTexture
Texture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align

Class EditorSettings
EditorSettings Base;
	string m_ExternalVersionControlSupport;
		Array Array; // Align
			int size;
			char data;
	int m_SerializationMode; // Align
	int m_LineEndingsForNewScripts;
	int m_DefaultBehaviorMode;
	int m_SpritePackerMode;
	int m_SpritePackerPaddingPower;
	int m_EtcTextureCompressorBehavior;
	int m_EtcTextureFastCompressor;
	int m_EtcTextureNormalCompressor;
	int m_EtcTextureBestCompressor;
	string m_ProjectGenerationIncludedExtensions;
		Array Array; // Align
			int size;
			char data;
	string m_ProjectGenerationRootNamespace;
		Array Array; // Align
			int size;
			char data;
	string m_UserGeneratedProjectSuffix;
		Array Array; // Align
			int size;
			char data;
	CollabEditorSettings m_CollabEditorSettings;
		bool inProgressEnabled; // Align

Class EditorUserSettings
EditorUserSettings Base;
	map m_ConfigSettings;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				ConfigSetting second;
					string value;
						Array Array; // Align
							int size;
							char data;
					unsigned int flags;
	bool m_VCAutomaticAdd;
	bool m_VCDebugCom;
	bool m_VCDebugCmd;
	bool m_VCDebugOut;
	int m_SemanticMergeMode;
	bool m_VCShowFailedCheckout;
	bool m_VCAllowAsyncUpdate; // Align

Class AudioReverbFilter
AudioReverbFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_DryLevel;
	float m_Room;
	float m_RoomHF;
	float m_DecayTime;
	float m_DecayHFRatio;
	float m_ReflectionsLevel;
	float m_ReverbLevel;
	float m_ReverbDelay;
	float m_Diffusion;
	float m_Density;
	float m_HFReference;
	float m_RoomLF;
	float m_LFReference;
	float m_ReflectionsDelay;
	int m_ReverbPreset;

Class AudioHighPassFilter
AudioHighPassFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_CutoffFrequency;
	float m_HighpassResonanceQ;

Class AudioChorusFilter
AudioChorusFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_DryMix;
	float m_WetMix1;
	float m_WetMix2;
	float m_WetMix3;
	float m_Delay;
	float m_Rate;
	float m_Depth;

Class AudioReverbZone
AudioReverbZone Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_MinDistance;
	float m_MaxDistance;
	int m_ReverbPreset;
	int m_Room;
	int m_RoomHF;
	float m_DecayTime;
	float m_DecayHFRatio;
	int m_Reflections;
	float m_ReflectionsDelay;
	int m_Reverb;
	float m_ReverbDelay;
	float m_HFReference;
	float m_Diffusion;
	float m_Density;
	float m_LFReference;
	int m_RoomLF;

Class AudioEchoFilter
AudioEchoFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	unsigned int m_Delay;
	float m_DecayRatio;
	float m_WetMix;
	float m_DryMix;

Class AudioLowPassFilter
AudioLowPassFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_LowpassResonanceQ;
	AnimationCurve lowpassLevelCustomCurve;
		vector m_Curve;
			Array Array; // Align
				int size;
				Keyframe data;
					float time;
					float value;
					float inSlope;
					float outSlope;
		int m_PreInfinity;
		int m_PostInfinity;
		int m_RotationOrder;

Class AudioDistortionFilter
AudioDistortionFilter Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_DistortionLevel;

Class SparseTexture
SparseTexture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_MipCount;
	int m_Format;
	int m_ColorSpace;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;

Class AudioBehaviour
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class AudioFilter
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class WindZone
WindZone Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_Mode;
	float m_Radius;
	float m_WindMain;
	float m_WindTurbulence;
	float m_WindPulseMagnitude;
	float m_WindPulseFrequency;

Class Cloth
Cloth Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_StretchingStiffness;
	float m_BendingStiffness;
	bool m_UseTethers;
	bool m_UseGravity; // Align
	float m_Damping;
	Vector3f m_ExternalAcceleration;
		float x;
		float y;
		float z;
	Vector3f m_RandomAcceleration;
		float x;
		float y;
		float z;
	float m_WorldVelocityScale;
	float m_WorldAccelerationScale;
	float m_Friction;
	float m_CollisionMassScale;
	bool m_UseContinuousCollision; // Align
	float m_SolverFrequency;
	float m_SleepThreshold;
	vector m_Coefficients; // Align
		Array Array; // Align
			int size;
			ClothConstrainCoefficients data;
				float maxDistance;
				float collisionSphereDistance;
	vector m_CapsuleColliders;
		Array Array; // Align
			int size;
			PPtr<CapsuleCollider> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_SphereColliders;
		Array Array; // Align
			int size;
			pair data;
				PPtr<SphereCollider> first;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<SphereCollider> second;
					int m_FileID;
					SInt64 m_PathID;
	float m_SelfCollisionDistance;
	float m_SelfCollisionStiffness;
	vector m_SelfAndInterCollisionIndices;
		Array Array; // Align
			int size;
			unsigned int data;
	vector m_VirtualParticleWeights;
		Array Array; // Align
			int size;
			Vector3f data;
				float x;
				float y;
				float z;
	vector m_VirtualParticleIndices;
		Array Array; // Align
			int size;
			unsigned int data;

Class SubstanceArchive
SubstanceArchive Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_PackageData; // Align
		Array Array; // Align
			int size;
			UInt8 data;

Class ProceduralMaterial
ProceduralMaterial Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<Shader> m_Shader;
		int m_FileID;
		SInt64 m_PathID;
	string m_ShaderKeywords;
		Array Array; // Align
			int size;
			char data;
	unsigned int m_LightmapFlags;
	bool m_EnableInstancingVariants;
	bool m_DoubleSidedGI; // Align
	int m_CustomRenderQueue;
	map stringTagMap;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				string second;
					Array Array; // Align
						int size;
						char data;
	vector disabledShaderPasses;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	UnityPropertySheet m_SavedProperties;
		map m_TexEnvs;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					UnityTexEnv second;
						PPtr<Texture> m_Texture;
							int m_FileID;
							SInt64 m_PathID;
						Vector2f m_Scale;
							float x;
							float y;
						Vector2f m_Offset;
							float x;
							float y;
		map m_Floats;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					float second;
		map m_Colors;
			Array Array;
				int size;
				pair data;
					string first;
						Array Array; // Align
							int size;
							char data;
					ColorRGBA second;
						float r;
						float g;
						float b;
						float a;
	int m_Width;
	int m_Height;
	bool m_GenerateMipmaps; // Align
	vector m_Textures;
		Array Array; // Align
			int size;
			PPtr<ProceduralTexture> data;
				int m_FileID;
				SInt64 m_PathID;
	unsigned int m_Flags;
	int m_LoadingBehavior;
	PPtr<SubstanceArchive> m_SubstancePackage;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Inputs;
		Array Array; // Align
			int size;
			SubstanceInput data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string label;
					Array Array; // Align
						int size;
						char data;
				string group;
					Array Array; // Align
						int size;
						char data;
				string visibleIf;
					Array Array; // Align
						int size;
						char data;
				int type;
				SubstanceValue value;
					float scalar[0];
					float scalar[1];
					float scalar[2];
					float scalar[3];
					PPtr<Texture2D> texture;
						int m_FileID;
						SInt64 m_PathID;
					string stringvalue;
						Array Array; // Align
							int size;
							char data;
				int internalType;
				unsigned int internalIndex;
				unsigned int internalIdentifier;
				vector componentLabels;
					Array Array; // Align
						int size;
						string data;
							Array Array; // Align
								int size;
								char data;
				float minimum;
				float maximum;
				float step;
				unsigned int flags;
				set alteredTexturesUID;
					Array Array;
						int size;
						unsigned int data;
				vector enumValues;
					Array Array; // Align
						int size;
						SubstanceEnumItem data;
							int value;
							string text;
								Array Array; // Align
									int size;
									char data;
	string m_PrototypeName;
		Array Array; // Align
			int size;
			char data;
	int m_AnimationUpdateRate;
	Hash128 m_Hash;
		UInt8 bytes[0];
		UInt8 bytes[1];
		UInt8 bytes[2];
		UInt8 bytes[3];
		UInt8 bytes[4];
		UInt8 bytes[5];
		UInt8 bytes[6];
		UInt8 bytes[7];
		UInt8 bytes[8];
		UInt8 bytes[9];
		UInt8 bytes[10];
		UInt8 bytes[11];
		UInt8 bytes[12];
		UInt8 bytes[13];
		UInt8 bytes[14];
		UInt8 bytes[15];

Class ProceduralTexture
ProceduralTexture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	PPtr<ProceduralMaterial> m_SubstanceMaterial;
		int m_FileID;
		SInt64 m_PathID;
	UInt64 m_SubstanceTextureUID;
	int Type;
	int AlphaSource;
	UInt64 m_AlphaSourceUID;
	bool AlphaSourceIsGrayscale;
	bool m_AlphaSourceIsInverted; // Align
	int m_Mipmaps;
	int Format;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	vector m_BakedData;
		Array Array; // Align
			int size;
			UInt8 data;
	TextureParameters m_BakedParameters;
		int width;
		int height;
		int mipLevels;
		int textureFormat;
	TextureParameters m_TextureParameters;
		int width;
		int height;
		int mipLevels;
		int textureFormat;
	int m_LightmapFormat;
	int m_ColorSpace;

Class Texture2DArray
Texture2DArray Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_Height;
	int m_Depth;
	int m_Format;
	int m_MipCount;
	unsigned int m_DataSize;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_ColorSpace;
	bool m_IsReadable; // Align
	TypelessData image data; // Align
		int size;
		UInt8 data;
	StreamingInfo m_StreamData;
		unsigned int offset;
		unsigned int size;
		string path;
			Array Array; // Align
				int size;
				char data;

Class CubemapArray
CubemapArray Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align
	int m_Width;
	int m_CubemapCount;
	int m_Format;
	int m_MipCount;
	unsigned int m_DataSize;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_ColorSpace;
	bool m_IsReadable; // Align
	TypelessData image data; // Align
		int size;
		UInt8 data;
	StreamingInfo m_StreamData;
		unsigned int offset;
		unsigned int size;
		string path;
			Array Array; // Align
				int size;
				char data;

Class OffMeshLink
OffMeshLink Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	unsigned int m_AreaIndex;
	int m_AgentTypeID;
	PPtr<Transform> m_Start;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_End;
		int m_FileID;
		SInt64 m_PathID;
	float m_CostOverride; // Align
	bool m_BiDirectional;
	bool m_Activated;
	bool m_AutoUpdatePositions;

Class OcclusionArea
OcclusionArea Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_Size;
		float x;
		float y;
		float z;
	Vector3f m_Center;
		float x;
		float y;
		float z;
	bool m_IsViewVolume; // Align

Class Tree
Tree Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<SpeedTreeWindAsset> m_SpeedTreeWindAsset;
		int m_FileID;
		SInt64 m_PathID;

Class NavMeshAgent
NavMeshAgent Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_AgentTypeID;
	float m_Radius;
	float m_Speed;
	float m_Acceleration;
	int avoidancePriority;
	float m_AngularSpeed;
	float m_StoppingDistance;
	bool m_AutoTraverseOffMeshLink;
	bool m_AutoBraking;
	bool m_AutoRepath; // Align
	float m_Height;
	float m_BaseOffset;
	unsigned int m_WalkableMask;
	int m_ObstacleAvoidanceType;

Class NavMeshSettings
NavMeshSettings Base;
	PPtr<NavMeshData> m_NavMeshData;
		int m_FileID;
		SInt64 m_PathID;

Class ParticleSystem
ParticleSystem Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	float lengthInSec;
	float simulationSpeed;
	int stopAction;
	bool looping;
	bool prewarm;
	bool playOnAwake;
	bool useUnscaledTime;
	bool autoRandomSeed;
	bool useRigidbodyForVelocity; // Align
	MinMaxCurve startDelay; // Align
		UInt16 minMaxState; // Align
		float scalar;
		float minScalar;
		AnimationCurve maxCurve;
			vector m_Curve;
				Array Array; // Align
					int size;
					Keyframe data;
						float time;
						float value;
						float inSlope;
						float outSlope;
			int m_PreInfinity;
			int m_PostInfinity;
			int m_RotationOrder;
		AnimationCurve minCurve;
			vector m_Curve;
				Array Array; // Align
					int size;
					Keyframe data;
						float time;
						float value;
						float inSlope;
						float outSlope;
			int m_PreInfinity;
			int m_PostInfinity;
			int m_RotationOrder;
	int moveWithTransform; // Align
	PPtr<Transform> moveWithCustomTransform;
		int m_FileID;
		SInt64 m_PathID;
	int scalingMode;
	int randomSeed;
	InitialModule InitialModule;
		bool enabled; // Align
		MinMaxCurve startLifetime;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startSpeed;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxGradient startColor;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
		MinMaxCurve startSize;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startSizeY;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startSizeZ;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startRotationX;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startRotationY;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startRotation;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		float randomizeRotationDirection;
		int maxNumParticles;
		bool size3D;
		bool rotation3D; // Align
		MinMaxCurve gravityModifier;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
	ShapeModule ShapeModule;
		bool enabled; // Align
		int type;
		float angle;
		float length;
		Vector3f boxThickness;
			float x;
			float y;
			float z;
		float radiusThickness;
		float donutRadius;
		Vector3f m_Position;
			float x;
			float y;
			float z;
		Vector3f m_Rotation;
			float x;
			float y;
			float z;
		Vector3f m_Scale;
			float x;
			float y;
			float z;
		int placementMode;
		int m_MeshMaterialIndex;
		float m_MeshNormalOffset;
		PPtr<Mesh> m_Mesh;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<MeshRenderer> m_MeshRenderer;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<SkinnedMeshRenderer> m_SkinnedMeshRenderer;
			int m_FileID;
			SInt64 m_PathID;
		bool m_UseMeshMaterialIndex;
		bool m_UseMeshColors;
		bool alignToDirection; // Align
		float randomDirectionAmount;
		float sphericalDirectionAmount;
		float randomPositionAmount;
		MultiModeParameter radius;
			float value;
			int mode;
			float spread;
			MinMaxCurve speed;
				UInt16 minMaxState; // Align
				float scalar;
				float minScalar;
				AnimationCurve maxCurve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				AnimationCurve minCurve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
		MultiModeParameter arc;
			float value;
			int mode;
			float spread;
			MinMaxCurve speed;
				UInt16 minMaxState; // Align
				float scalar;
				float minScalar;
				AnimationCurve maxCurve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				AnimationCurve minCurve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
	EmissionModule EmissionModule;
		bool enabled; // Align
		MinMaxCurve rateOverTime;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve rateOverDistance;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		int m_BurstCount; // Align
		vector m_Bursts;
			Array Array; // Align
				int size;
				ParticleSystemEmissionBurst data;
					float time;
					MinMaxCurve countCurve;
						UInt16 minMaxState; // Align
						float scalar;
						float minScalar;
						AnimationCurve maxCurve;
							vector m_Curve;
								Array Array; // Align
									int size;
									Keyframe data;
										float time;
										float value;
										float inSlope;
										float outSlope;
							int m_PreInfinity;
							int m_PostInfinity;
							int m_RotationOrder;
						AnimationCurve minCurve;
							vector m_Curve;
								Array Array; // Align
									int size;
									Keyframe data;
										float time;
										float value;
										float inSlope;
										float outSlope;
							int m_PreInfinity;
							int m_PostInfinity;
							int m_RotationOrder;
					int cycleCount;
					float repeatInterval;
	SizeModule SizeModule;
		bool enabled; // Align
		MinMaxCurve curve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve z;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool separateAxes; // Align
	RotationModule RotationModule;
		bool enabled; // Align
		MinMaxCurve x;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve curve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool separateAxes; // Align
	ColorModule ColorModule;
		bool enabled; // Align
		MinMaxGradient gradient;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
	UVModule UVModule;
		bool enabled; // Align
		int mode;
		MinMaxCurve frameOverTime;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve startFrame;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		int tilesX;
		int tilesY;
		int animationType;
		int rowIndex;
		float cycles;
		int uvChannelMask;
		float flipU;
		float flipV;
		bool randomRow; // Align
		vector sprites;
			Array Array; // Align
				int size;
				SpriteData data;
					PPtr<Object> sprite;
						int m_FileID;
						SInt64 m_PathID;
	VelocityModule VelocityModule;
		bool enabled; // Align
		MinMaxCurve x;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve z;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve speedModifier;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool inWorldSpace; // Align
	InheritVelocityModule InheritVelocityModule;
		bool enabled; // Align
		int m_Mode;
		MinMaxCurve m_Curve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
	ForceModule ForceModule;
		bool enabled; // Align
		MinMaxCurve x;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve z;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool inWorldSpace;
		bool randomizePerFrame; // Align
	ExternalForcesModule ExternalForcesModule;
		bool enabled; // Align
		float multiplier;
	ClampVelocityModule ClampVelocityModule;
		bool enabled; // Align
		MinMaxCurve x;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve z;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve magnitude;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool separateAxis;
		bool inWorldSpace;
		bool multiplyDragByParticleSize;
		bool multiplyDragByParticleVelocity; // Align
		float dampen;
		MinMaxCurve drag;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
	NoiseModule NoiseModule;
		bool enabled; // Align
		MinMaxCurve strength;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve strengthY;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve strengthZ;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool separateAxes; // Align
		float frequency;
		bool damping; // Align
		int octaves;
		float octaveMultiplier;
		float octaveScale;
		int quality;
		MinMaxCurve scrollSpeed;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve remap;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve remapY;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve remapZ;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool remapEnabled; // Align
		MinMaxCurve positionAmount;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve rotationAmount;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve sizeAmount;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
	SizeBySpeedModule SizeBySpeedModule;
		bool enabled; // Align
		MinMaxCurve curve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve z;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		Vector2f range;
			float x;
			float y;
		bool separateAxes; // Align
	RotationBySpeedModule RotationBySpeedModule;
		bool enabled; // Align
		MinMaxCurve x;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve y;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve curve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		bool separateAxes; // Align
		Vector2f range;
			float x;
			float y;
	ColorBySpeedModule ColorBySpeedModule;
		bool enabled; // Align
		MinMaxGradient gradient;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
		Vector2f range;
			float x;
			float y;
	CollisionModule CollisionModule;
		bool enabled; // Align
		int type;
		int collisionMode;
		float colliderForce;
		bool multiplyColliderForceByParticleSize;
		bool multiplyColliderForceByParticleSpeed;
		bool multiplyColliderForceByCollisionAngle; // Align
		PPtr<Transform> plane0;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Transform> plane1;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Transform> plane2;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Transform> plane3;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Transform> plane4;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Transform> plane5;
			int m_FileID;
			SInt64 m_PathID;
		MinMaxCurve m_Dampen;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve m_Bounce;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve m_EnergyLossOnCollision;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		float minKillSpeed;
		float maxKillSpeed;
		float radiusScale;
		BitField collidesWith;
			unsigned int m_Bits;
		int maxCollisionShapes;
		int quality;
		float voxelSize;
		bool collisionMessages;
		bool collidesWithDynamic;
		bool interiorCollisions; // Align
	TriggerModule TriggerModule;
		bool enabled; // Align
		PPtr<Component> collisionShape0;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Component> collisionShape1;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Component> collisionShape2;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Component> collisionShape3;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Component> collisionShape4;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Component> collisionShape5;
			int m_FileID;
			SInt64 m_PathID;
		int inside;
		int outside;
		int enter;
		int exit;
		float radiusScale;
	SubModule SubModule;
		bool enabled; // Align
		vector subEmitters;
			Array Array; // Align
				int size;
				SubEmitterData data;
					PPtr<ParticleSystem> emitter;
						int m_FileID;
						SInt64 m_PathID;
					int type;
					int properties;
	LightsModule LightsModule;
		bool enabled; // Align
		float ratio;
		PPtr<Light> light;
			int m_FileID;
			SInt64 m_PathID;
		bool randomDistribution;
		bool color;
		bool range;
		bool intensity;
		MinMaxCurve rangeCurve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve intensityCurve;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		int maxLights;
	TrailModule TrailModule;
		bool enabled; // Align
		int mode;
		float ratio;
		MinMaxCurve lifetime;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		float minVertexDistance;
		int textureMode;
		int ribbonCount;
		bool worldSpace;
		bool dieWithParticles;
		bool sizeAffectsWidth;
		bool sizeAffectsLifetime;
		bool inheritParticleColor;
		bool generateLightingData;
		bool splitSubEmitterRibbons; // Align
		MinMaxGradient colorOverLifetime;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
		MinMaxCurve widthOverTrail;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxGradient colorOverTrail;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
	CustomDataModule CustomDataModule;
		bool enabled; // Align
		int mode0;
		int vectorComponentCount0;
		MinMaxGradient color0;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
		MinMaxCurve vector0_0;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector0_1;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector0_2;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector0_3;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		int mode1;
		int vectorComponentCount1;
		MinMaxGradient color1;
			UInt16 minMaxState; // Align
			ColorRGBA minColor;
				float r;
				float g;
				float b;
				float a;
			ColorRGBA maxColor;
				float r;
				float g;
				float b;
				float a;
			Gradient maxGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
			Gradient minGradient;
				ColorRGBA key0;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key1;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key2;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key3;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key4;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key5;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key6;
					float r;
					float g;
					float b;
					float a;
				ColorRGBA key7;
					float r;
					float g;
					float b;
					float a;
				UInt16 ctime0;
				UInt16 ctime1;
				UInt16 ctime2;
				UInt16 ctime3;
				UInt16 ctime4;
				UInt16 ctime5;
				UInt16 ctime6;
				UInt16 ctime7;
				UInt16 atime0;
				UInt16 atime1;
				UInt16 atime2;
				UInt16 atime3;
				UInt16 atime4;
				UInt16 atime5;
				UInt16 atime6;
				UInt16 atime7;
				int m_Mode;
				UInt8 m_NumColorKeys;
				UInt8 m_NumAlphaKeys; // Align
		MinMaxCurve vector1_0;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector1_1;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector1_2;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
		MinMaxCurve vector1_3;
			UInt16 minMaxState; // Align
			float scalar;
			float minScalar;
			AnimationCurve maxCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;
			AnimationCurve minCurve;
				vector m_Curve;
					Array Array; // Align
						int size;
						Keyframe data;
							float time;
							float value;
							float inSlope;
							float outSlope;
				int m_PreInfinity;
				int m_PostInfinity;
				int m_RotationOrder;

Class ParticleSystemRenderer
ParticleSystemRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	UInt16 m_RenderMode;
	UInt16 m_SortMode;
	float m_MinParticleSize;
	float m_MaxParticleSize;
	float m_CameraVelocityScale;
	float m_VelocityScale;
	float m_LengthScale;
	float m_SortingFudge;
	float m_NormalDirection;
	int m_RenderAlignment;
	Vector3f m_Pivot;
		float x;
		float y;
		float z;
	bool m_UseCustomVertexStreams; // Align
	vector m_VertexStreams; // Align
		Array Array; // Align
			int size;
			UInt8 data;
	PPtr<Mesh> m_Mesh;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Mesh> m_Mesh1;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Mesh> m_Mesh2;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Mesh> m_Mesh3;
		int m_FileID;
		SInt64 m_PathID;
	int m_MaskInteraction;

Class ShaderVariantCollection
ShaderVariantCollection Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_Shaders;
		Array Array;
			int size;
			pair data;
				PPtr<Shader> first;
					int m_FileID;
					SInt64 m_PathID;
				ShaderInfo second;
					set variants;
						Array Array;
							int size;
							VariantInfo data;
								string keywords;
									Array Array; // Align
										int size;
										char data;
								int passType;

Class LODGroup
LODGroup Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	Vector3f m_LocalReferencePoint;
		float x;
		float y;
		float z;
	float m_Size;
	int m_FadeMode;
	bool m_AnimateCrossFading; // Align
	vector m_LODs;
		Array Array; // Align
			int size;
			LOD data;
				float screenRelativeHeight;
				float fadeTransitionWidth;
				vector renderers;
					Array Array; // Align
						int size;
						LODRenderer data;
							PPtr<Renderer> renderer;
								int m_FileID;
								SInt64 m_PathID;
	bool m_Enabled; // Align

Class BlendTree
BlendTree Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Childs;
		Array Array; // Align
			int size;
			ChildMotion data;
				PPtr<Motion> m_Motion;
					int m_FileID;
					SInt64 m_PathID;
				float m_Threshold;
				Vector2f m_Position;
					float x;
					float y;
				float m_TimeScale;
				float m_CycleOffset;
				string m_DirectBlendParameter;
					Array Array; // Align
						int size;
						char data;
				bool m_Mirror; // Align
	string m_BlendParameter;
		Array Array; // Align
			int size;
			char data;
	string m_BlendParameterY;
		Array Array; // Align
			int size;
			char data;
	float m_MinThreshold;
	float m_MaxThreshold;
	bool m_UseAutomaticThresholds;
	bool m_NormalizedBlendValues; // Align
	int m_BlendType;

Class Motion

Class NavMeshObstacle
NavMeshObstacle Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_Shape;
	Vector3f m_Extents;
		float x;
		float y;
		float z;
	float m_MoveThreshold;
	bool m_Carve;
	bool m_CarveOnlyStationary; // Align
	Vector3f m_Center;
		float x;
		float y;
		float z;
	float m_TimeToStationary;

Class SortingGroup
SortingGroup Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align

Class SpriteRenderer
SpriteRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	PPtr<Sprite> m_Sprite;
		int m_FileID;
		SInt64 m_PathID;
	ColorRGBA m_Color; // Align
		float r;
		float g;
		float b;
		float a;
	bool m_FlipX;
	bool m_FlipY; // Align
	int m_DrawMode;
	Vector2f m_Size;
		float x;
		float y;
	float m_AdaptiveModeThreshold;
	int m_SpriteTileMode;
	bool m_WasSpriteAssigned; // Align
	int m_MaskInteraction;

Class Sprite
Sprite Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	Rectf m_Rect;
		float x;
		float y;
		float width;
		float height;
	Vector2f m_Offset;
		float x;
		float y;
	Vector4f m_Border;
		float x;
		float y;
		float z;
		float w;
	float m_PixelsToUnits;
	Vector2f m_Pivot;
		float x;
		float y;
	unsigned int m_Extrude;
	bool m_IsPolygon; // Align
	pair m_RenderDataKey;
		GUID first;
			unsigned int data[0];
			unsigned int data[1];
			unsigned int data[2];
			unsigned int data[3];
		SInt64 second;
	vector m_AtlasTags;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	PPtr<SpriteAtlas> m_SpriteAtlas; // Align
		int m_FileID;
		SInt64 m_PathID;
	SpriteRenderData m_RD; // Align
		PPtr<Texture2D> texture;
			int m_FileID;
			SInt64 m_PathID;
		PPtr<Texture2D> alphaTexture;
			int m_FileID;
			SInt64 m_PathID;
		vector m_SubMeshes;
			Array Array; // Align
				int size;
				SubMesh data;
					unsigned int firstByte;
					unsigned int indexCount;
					int topology;
					unsigned int baseVertex;
					unsigned int firstVertex;
					unsigned int vertexCount;
					AABB localAABB;
						Vector3f m_Center;
							float x;
							float y;
							float z;
						Vector3f m_Extent;
							float x;
							float y;
							float z;
		vector m_IndexBuffer;
			Array Array; // Align
				int size;
				UInt8 data;
		VertexData m_VertexData; // Align
			int m_CurrentChannels;
			unsigned int m_VertexCount;
			vector m_Channels;
				Array Array; // Align
					int size;
					ChannelInfo data;
						UInt8 stream;
						UInt8 offset;
						UInt8 format;
						UInt8 dimension;
			TypelessData m_DataSize; // Align
				int size;
				UInt8 data;
		Rectf textureRect;
			float x;
			float y;
			float width;
			float height;
		Vector2f textureRectOffset;
			float x;
			float y;
		Vector2f atlasRectOffset;
			float x;
			float y;
		unsigned int settingsRaw;
		Vector4f uvTransform;
			float x;
			float y;
			float z;
			float w;
		float downscaleMultiplier;
	vector m_PhysicsShape;
		Array Array; // Align
			int size;
			vector data;
				Array Array; // Align
					int size;
					Vector2f data;
						float x;
						float y;

Class CachedSpriteAtlas
CachedSpriteAtlas Base;
	vector textures;
		Array Array; // Align
			int size;
			PPtr<Texture2D> data;
				int m_FileID;
				SInt64 m_PathID;
	vector alphaTextures;
		Array Array; // Align
			int size;
			PPtr<Texture2D> data;
				int m_FileID;
				SInt64 m_PathID;
	map frames;
		Array Array;
			int size;
			pair data;
				pair first;
					GUID first;
						unsigned int data[0];
						unsigned int data[1];
						unsigned int data[2];
						unsigned int data[3];
					SInt64 second;
				SpriteRenderData second;
					PPtr<Texture2D> texture;
						int m_FileID;
						SInt64 m_PathID;
					PPtr<Texture2D> alphaTexture;
						int m_FileID;
						SInt64 m_PathID;
					vector m_SubMeshes;
						Array Array; // Align
							int size;
							SubMesh data;
								unsigned int firstByte;
								unsigned int indexCount;
								int topology;
								unsigned int baseVertex;
								unsigned int firstVertex;
								unsigned int vertexCount;
								AABB localAABB;
									Vector3f m_Center;
										float x;
										float y;
										float z;
									Vector3f m_Extent;
										float x;
										float y;
										float z;
					vector m_IndexBuffer;
						Array Array; // Align
							int size;
							UInt8 data;
					VertexData m_VertexData; // Align
						int m_CurrentChannels;
						unsigned int m_VertexCount;
						vector m_Channels;
							Array Array; // Align
								int size;
								ChannelInfo data;
									UInt8 stream;
									UInt8 offset;
									UInt8 format;
									UInt8 dimension;
						TypelessData m_DataSize; // Align
							int size;
							UInt8 data;
					Rectf textureRect;
						float x;
						float y;
						float width;
						float height;
					Vector2f textureRectOffset;
						float x;
						float y;
					Vector2f atlasRectOffset;
						float x;
						float y;
					unsigned int settingsRaw;
					Vector4f uvTransform;
						float x;
						float y;
						float z;
						float w;
					float downscaleMultiplier;

Class ReflectionProbe
ReflectionProbe Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_Type;
	int m_Mode;
	int m_RefreshMode;
	int m_TimeSlicingMode;
	int m_Resolution;
	int m_UpdateFrequency;
	Vector3f m_BoxSize;
		float x;
		float y;
		float z;
	Vector3f m_BoxOffset;
		float x;
		float y;
		float z;
	float m_NearClip;
	float m_FarClip;
	float m_ShadowDistance;
	unsigned int m_ClearFlags;
	ColorRGBA m_BackGroundColor;
		float r;
		float g;
		float b;
		float a;
	BitField m_CullingMask;
		unsigned int m_Bits;
	float m_IntensityMultiplier;
	float m_BlendDistance;
	bool m_HDR;
	bool m_BoxProjection;
	bool m_RenderDynamicObjects;
	bool m_UseOcclusionCulling;
	SInt16 m_Importance; // Align
	PPtr<Texture> m_CustomBakedTexture;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Texture> m_BakedTexture;
		int m_FileID;
		SInt64 m_PathID;

Class Terrain
Terrain Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<TerrainData> m_TerrainData;
		int m_FileID;
		SInt64 m_PathID;
	float m_TreeDistance;
	float m_TreeBillboardDistance;
	float m_TreeCrossFadeLength;
	int m_TreeMaximumFullLODCount;
	float m_DetailObjectDistance;
	float m_DetailObjectDensity;
	float m_HeightmapPixelError;
	float m_SplatMapDistance;
	int m_HeightmapMaximumLOD;
	bool m_CastShadows;
	bool m_DrawHeightmap;
	bool m_DrawTreesAndFoliage; // Align
	int m_ReflectionProbeUsage;
	int m_MaterialType;
	ColorRGBA m_LegacySpecular;
		unsigned int rgba;
	float m_LegacyShininess;
	PPtr<Material> m_MaterialTemplate;
		int m_FileID;
		SInt64 m_PathID;
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	Hash128 m_ExplicitProbeSetHash;
		UInt8 bytes[0];
		UInt8 bytes[1];
		UInt8 bytes[2];
		UInt8 bytes[3];
		UInt8 bytes[4];
		UInt8 bytes[5];
		UInt8 bytes[6];
		UInt8 bytes[7];
		UInt8 bytes[8];
		UInt8 bytes[9];
		UInt8 bytes[10];
		UInt8 bytes[11];
		UInt8 bytes[12];
		UInt8 bytes[13];
		UInt8 bytes[14];
		UInt8 bytes[15];
	bool m_BakeLightProbesForTrees; // Align
	Vector4f m_DynamicUVST;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_ChunkDynamicUVST;
		float x;
		float y;
		float z;
		float w;

Class LightProbeGroup
LightProbeGroup Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align

Class AnimatorOverrideController
AnimatorOverrideController Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<RuntimeAnimatorController> m_Controller;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Clips;
		Array Array; // Align
			int size;
			AnimationClipOverride data;
				PPtr<AnimationClip> m_OriginalClip;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<AnimationClip> m_OverrideClip;
					int m_FileID;
					SInt64 m_PathID;

Class CanvasRenderer
CanvasRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class Canvas
Canvas Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_RenderMode;
	PPtr<Camera> m_Camera;
		int m_FileID;
		SInt64 m_PathID;
	float m_PlaneDistance;
	bool m_PixelPerfect;
	bool m_ReceivesEvents;
	bool m_OverrideSorting;
	bool m_OverridePixelPerfect;
	float m_SortingBucketNormalizedSize;
	int m_AdditionalShaderChannelsFlag; // Align
	int m_SortingLayerID;
	SInt16 m_SortingOrder;
	SInt8 m_TargetDisplay;

Class RectTransform
RectTransform Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	Quaternionf m_LocalRotation;
		float x;
		float y;
		float z;
		float w;
	Vector3f m_LocalPosition;
		float x;
		float y;
		float z;
	Vector3f m_LocalScale;
		float x;
		float y;
		float z;
	vector m_Children;
		Array Array; // Align
			int size;
			PPtr<Transform> data;
				int m_FileID;
				SInt64 m_PathID;
	PPtr<Transform> m_Father;
		int m_FileID;
		SInt64 m_PathID;
	Vector2f m_AnchorMin;
		float x;
		float y;
	Vector2f m_AnchorMax;
		float x;
		float y;
	Vector2f m_AnchoredPosition;
		float x;
		float y;
	Vector2f m_SizeDelta;
		float x;
		float y;
	Vector2f m_Pivot;
		float x;
		float y;

Class CanvasGroup
CanvasGroup Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Alpha;
	bool m_Interactable;
	bool m_BlocksRaycasts;
	bool m_IgnoreParentGroups; // Align

Class BillboardAsset
BillboardAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float width;
	float bottom;
	float height;
	vector imageTexCoords;
		Array Array; // Align
			int size;
			Vector4f data;
				float x;
				float y;
				float z;
				float w;
	vector vertices;
		Array Array; // Align
			int size;
			Vector2f data;
				float x;
				float y;
	vector indices; // Align
		Array Array; // Align
			int size;
			UInt16 data;
	PPtr<Material> material;
		int m_FileID;
		SInt64 m_PathID;

Class BillboardRenderer
BillboardRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	PPtr<BillboardAsset> m_Billboard;
		int m_FileID;
		SInt64 m_PathID;

Class SpeedTreeWindAsset
SpeedTreeWindAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	SpeedTreeWind m_Wind;
		SParams m_sParams;
			float m_fStrengthResponse;
			float m_fDirectionResponse;
			float m_fAnchorOffset;
			float m_fAnchorDistanceScale;
			float Oscillation0_0;
			float Oscillation0_1;
			float Oscillation0_2;
			float Oscillation0_3;
			float Oscillation0_4;
			float Oscillation0_5;
			float Oscillation0_6;
			float Oscillation0_7;
			float Oscillation0_8;
			float Oscillation0_9;
			float Oscillation1_0;
			float Oscillation1_1;
			float Oscillation1_2;
			float Oscillation1_3;
			float Oscillation1_4;
			float Oscillation1_5;
			float Oscillation1_6;
			float Oscillation1_7;
			float Oscillation1_8;
			float Oscillation1_9;
			float Oscillation2_0;
			float Oscillation2_1;
			float Oscillation2_2;
			float Oscillation2_3;
			float Oscillation2_4;
			float Oscillation2_5;
			float Oscillation2_6;
			float Oscillation2_7;
			float Oscillation2_8;
			float Oscillation2_9;
			float Oscillation3_0;
			float Oscillation3_1;
			float Oscillation3_2;
			float Oscillation3_3;
			float Oscillation3_4;
			float Oscillation3_5;
			float Oscillation3_6;
			float Oscillation3_7;
			float Oscillation3_8;
			float Oscillation3_9;
			float Oscillation4_0;
			float Oscillation4_1;
			float Oscillation4_2;
			float Oscillation4_3;
			float Oscillation4_4;
			float Oscillation4_5;
			float Oscillation4_6;
			float Oscillation4_7;
			float Oscillation4_8;
			float Oscillation4_9;
			float Oscillation5_0;
			float Oscillation5_1;
			float Oscillation5_2;
			float Oscillation5_3;
			float Oscillation5_4;
			float Oscillation5_5;
			float Oscillation5_6;
			float Oscillation5_7;
			float Oscillation5_8;
			float Oscillation5_9;
			float Oscillation6_0;
			float Oscillation6_1;
			float Oscillation6_2;
			float Oscillation6_3;
			float Oscillation6_4;
			float Oscillation6_5;
			float Oscillation6_6;
			float Oscillation6_7;
			float Oscillation6_8;
			float Oscillation6_9;
			float Oscillation7_0;
			float Oscillation7_1;
			float Oscillation7_2;
			float Oscillation7_3;
			float Oscillation7_4;
			float Oscillation7_5;
			float Oscillation7_6;
			float Oscillation7_7;
			float Oscillation7_8;
			float Oscillation7_9;
			float Oscillation8_0;
			float Oscillation8_1;
			float Oscillation8_2;
			float Oscillation8_3;
			float Oscillation8_4;
			float Oscillation8_5;
			float Oscillation8_6;
			float Oscillation8_7;
			float Oscillation8_8;
			float Oscillation8_9;
			float Oscillation9_0;
			float Oscillation9_1;
			float Oscillation9_2;
			float Oscillation9_3;
			float Oscillation9_4;
			float Oscillation9_5;
			float Oscillation9_6;
			float Oscillation9_7;
			float Oscillation9_8;
			float Oscillation9_9;
			float m_fGlobalHeight;
			float m_fGlobalHeightExponent;
			float m_afGlobalDistance_0;
			float m_afGlobalDistance_1;
			float m_afGlobalDistance_2;
			float m_afGlobalDistance_3;
			float m_afGlobalDistance_4;
			float m_afGlobalDistance_5;
			float m_afGlobalDistance_6;
			float m_afGlobalDistance_7;
			float m_afGlobalDistance_8;
			float m_afGlobalDistance_9;
			float m_afGlobalDirectionAdherence_0;
			float m_afGlobalDirectionAdherence_1;
			float m_afGlobalDirectionAdherence_2;
			float m_afGlobalDirectionAdherence_3;
			float m_afGlobalDirectionAdherence_4;
			float m_afGlobalDirectionAdherence_5;
			float m_afGlobalDirectionAdherence_6;
			float m_afGlobalDirectionAdherence_7;
			float m_afGlobalDirectionAdherence_8;
			float m_afGlobalDirectionAdherence_9;
			SBranchWindLevel BranchLevel1;
				float m_afDistance_0;
				float m_afDistance_1;
				float m_afDistance_2;
				float m_afDistance_3;
				float m_afDistance_4;
				float m_afDistance_5;
				float m_afDistance_6;
				float m_afDistance_7;
				float m_afDistance_8;
				float m_afDistance_9;
				float m_afDirectionAdherence_0;
				float m_afDirectionAdherence_1;
				float m_afDirectionAdherence_2;
				float m_afDirectionAdherence_3;
				float m_afDirectionAdherence_4;
				float m_afDirectionAdherence_5;
				float m_afDirectionAdherence_6;
				float m_afDirectionAdherence_7;
				float m_afDirectionAdherence_8;
				float m_afDirectionAdherence_9;
				float m_afWhip_0;
				float m_afWhip_1;
				float m_afWhip_2;
				float m_afWhip_3;
				float m_afWhip_4;
				float m_afWhip_5;
				float m_afWhip_6;
				float m_afWhip_7;
				float m_afWhip_8;
				float m_afWhip_9;
				float m_fTurbulence;
				float m_fTwitch;
				float m_fTwitchFreqScale;
			SBranchWindLevel BranchLevel2;
				float m_afDistance_0;
				float m_afDistance_1;
				float m_afDistance_2;
				float m_afDistance_3;
				float m_afDistance_4;
				float m_afDistance_5;
				float m_afDistance_6;
				float m_afDistance_7;
				float m_afDistance_8;
				float m_afDistance_9;
				float m_afDirectionAdherence_0;
				float m_afDirectionAdherence_1;
				float m_afDirectionAdherence_2;
				float m_afDirectionAdherence_3;
				float m_afDirectionAdherence_4;
				float m_afDirectionAdherence_5;
				float m_afDirectionAdherence_6;
				float m_afDirectionAdherence_7;
				float m_afDirectionAdherence_8;
				float m_afDirectionAdherence_9;
				float m_afWhip_0;
				float m_afWhip_1;
				float m_afWhip_2;
				float m_afWhip_3;
				float m_afWhip_4;
				float m_afWhip_5;
				float m_afWhip_6;
				float m_afWhip_7;
				float m_afWhip_8;
				float m_afWhip_9;
				float m_fTurbulence;
				float m_fTwitch;
				float m_fTwitchFreqScale;
			SWindGroup LeafGroup1;
				float m_afRippleDistance_0;
				float m_afRippleDistance_1;
				float m_afRippleDistance_2;
				float m_afRippleDistance_3;
				float m_afRippleDistance_4;
				float m_afRippleDistance_5;
				float m_afRippleDistance_6;
				float m_afRippleDistance_7;
				float m_afRippleDistance_8;
				float m_afRippleDistance_9;
				float m_afTumbleFlip_0;
				float m_afTumbleFlip_1;
				float m_afTumbleFlip_2;
				float m_afTumbleFlip_3;
				float m_afTumbleFlip_4;
				float m_afTumbleFlip_5;
				float m_afTumbleFlip_6;
				float m_afTumbleFlip_7;
				float m_afTumbleFlip_8;
				float m_afTumbleFlip_9;
				float m_afTumbleTwist_0;
				float m_afTumbleTwist_1;
				float m_afTumbleTwist_2;
				float m_afTumbleTwist_3;
				float m_afTumbleTwist_4;
				float m_afTumbleTwist_5;
				float m_afTumbleTwist_6;
				float m_afTumbleTwist_7;
				float m_afTumbleTwist_8;
				float m_afTumbleTwist_9;
				float m_afTumbleDirectionAdherence_0;
				float m_afTumbleDirectionAdherence_1;
				float m_afTumbleDirectionAdherence_2;
				float m_afTumbleDirectionAdherence_3;
				float m_afTumbleDirectionAdherence_4;
				float m_afTumbleDirectionAdherence_5;
				float m_afTumbleDirectionAdherence_6;
				float m_afTumbleDirectionAdherence_7;
				float m_afTumbleDirectionAdherence_8;
				float m_afTumbleDirectionAdherence_9;
				float m_afTwitchThrow_0;
				float m_afTwitchThrow_1;
				float m_afTwitchThrow_2;
				float m_afTwitchThrow_3;
				float m_afTwitchThrow_4;
				float m_afTwitchThrow_5;
				float m_afTwitchThrow_6;
				float m_afTwitchThrow_7;
				float m_afTwitchThrow_8;
				float m_afTwitchThrow_9;
				float m_fTwitchSharpness;
				float m_fRollMaxScale;
				float m_fRollMinScale;
				float m_fRollSpeed;
				float m_fRollSeparation;
				float m_fLeewardScalar;
			SWindGroup LeafGroup2;
				float m_afRippleDistance_0;
				float m_afRippleDistance_1;
				float m_afRippleDistance_2;
				float m_afRippleDistance_3;
				float m_afRippleDistance_4;
				float m_afRippleDistance_5;
				float m_afRippleDistance_6;
				float m_afRippleDistance_7;
				float m_afRippleDistance_8;
				float m_afRippleDistance_9;
				float m_afTumbleFlip_0;
				float m_afTumbleFlip_1;
				float m_afTumbleFlip_2;
				float m_afTumbleFlip_3;
				float m_afTumbleFlip_4;
				float m_afTumbleFlip_5;
				float m_afTumbleFlip_6;
				float m_afTumbleFlip_7;
				float m_afTumbleFlip_8;
				float m_afTumbleFlip_9;
				float m_afTumbleTwist_0;
				float m_afTumbleTwist_1;
				float m_afTumbleTwist_2;
				float m_afTumbleTwist_3;
				float m_afTumbleTwist_4;
				float m_afTumbleTwist_5;
				float m_afTumbleTwist_6;
				float m_afTumbleTwist_7;
				float m_afTumbleTwist_8;
				float m_afTumbleTwist_9;
				float m_afTumbleDirectionAdherence_0;
				float m_afTumbleDirectionAdherence_1;
				float m_afTumbleDirectionAdherence_2;
				float m_afTumbleDirectionAdherence_3;
				float m_afTumbleDirectionAdherence_4;
				float m_afTumbleDirectionAdherence_5;
				float m_afTumbleDirectionAdherence_6;
				float m_afTumbleDirectionAdherence_7;
				float m_afTumbleDirectionAdherence_8;
				float m_afTumbleDirectionAdherence_9;
				float m_afTwitchThrow_0;
				float m_afTwitchThrow_1;
				float m_afTwitchThrow_2;
				float m_afTwitchThrow_3;
				float m_afTwitchThrow_4;
				float m_afTwitchThrow_5;
				float m_afTwitchThrow_6;
				float m_afTwitchThrow_7;
				float m_afTwitchThrow_8;
				float m_afTwitchThrow_9;
				float m_fTwitchSharpness;
				float m_fRollMaxScale;
				float m_fRollMinScale;
				float m_fRollSpeed;
				float m_fRollSeparation;
				float m_fLeewardScalar;
			float m_afFrondRippleDistance_0;
			float m_afFrondRippleDistance_1;
			float m_afFrondRippleDistance_2;
			float m_afFrondRippleDistance_3;
			float m_afFrondRippleDistance_4;
			float m_afFrondRippleDistance_5;
			float m_afFrondRippleDistance_6;
			float m_afFrondRippleDistance_7;
			float m_afFrondRippleDistance_8;
			float m_afFrondRippleDistance_9;
			float m_fFrondRippleTile;
			float m_fFrondRippleLightingScalar;
			float m_fRollingNoiseSize;
			float m_fRollingNoiseTwist;
			float m_fRollingNoiseTurbulence;
			float m_fRollingNoisePeriod;
			float m_fRollingNoiseSpeed;
			float m_fRollingBranchFieldMin;
			float m_fRollingBranchLightingAdjust;
			float m_fRollingBranchVerticalOffset;
			float m_fRollingLeafRippleMin;
			float m_fRollingLeafTumbleMin;
			float m_fGustFrequency;
			float m_fGustStrengthMin;
			float m_fGustStrengthMax;
			float m_fGustDurationMin;
			float m_fGustDurationMax;
			float m_fGustRiseScalar;
			float m_fGustFallScalar;
		float BranchWindAnchor0;
		float BranchWindAnchor1;
		float BranchWindAnchor2;
		float m_fMaxBranchLevel1Length;
		bool GLOBAL_WIND;
		bool GLOBAL_PRESERVE_SHAPE;
		bool BRANCH_SIMPLE_1;
		bool BRANCH_DIRECTIONAL_1;
		bool BRANCH_DIRECTIONAL_FROND_1;
		bool BRANCH_TURBULENCE_1;
		bool BRANCH_WHIP_1;
		bool BRANCH_OSC_COMPLEX_1;
		bool BRANCH_SIMPLE_2;
		bool BRANCH_DIRECTIONAL_2;
		bool BRANCH_DIRECTIONAL_FROND_2;
		bool BRANCH_TURBULENCE_2;
		bool BRANCH_WHIP_2;
		bool BRANCH_OSC_COMPLEX_2;
		bool LEAF_RIPPLE_VERTEX_NORMAL_1;
		bool LEAF_RIPPLE_COMPUTED_1;
		bool LEAF_TUMBLE_1;
		bool LEAF_TWITCH_1;
		bool LEAF_OCCLUSION_1;
		bool LEAF_RIPPLE_VERTEX_NORMAL_2;
		bool LEAF_RIPPLE_COMPUTED_2;
		bool LEAF_TUMBLE_2;
		bool LEAF_TWITCH_2;
		bool LEAF_OCCLUSION_2;
		bool FROND_RIPPLE_ONE_SIDED;
		bool FROND_RIPPLE_TWO_SIDED;
		bool FROND_RIPPLE_ADJUST_LIGHTING;
		bool ROLLING;

Class AnchoredJoint2D
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class Joint2D
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class SpringJoint2D
SpringJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	bool m_AutoConfigureDistance; // Align
	float m_Distance;
	float m_DampingRatio;
	float m_Frequency;

Class DistanceJoint2D
DistanceJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	bool m_AutoConfigureDistance; // Align
	float m_Distance;
	bool m_MaxDistanceOnly; // Align

Class HingeJoint2D
HingeJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	bool m_UseMotor; // Align
	JointMotor2D m_Motor;
		float m_MotorSpeed;
		float m_MaximumMotorForce;
	bool m_UseLimits; // Align
	JointAngleLimits2D m_AngleLimits;
		float m_LowerAngle;
		float m_UpperAngle;

Class SliderJoint2D
SliderJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	bool m_AutoConfigureAngle; // Align
	float m_Angle;
	bool m_UseMotor; // Align
	JointMotor2D m_Motor;
		float m_MotorSpeed;
		float m_MaximumMotorForce;
	bool m_UseLimits; // Align
	JointTranslationLimits2D m_TranslationLimits;
		float m_LowerTranslation;
		float m_UpperTranslation;

Class WheelJoint2D
WheelJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	JointSuspension2D m_Suspension;
		float m_DampingRatio;
		float m_Frequency;
		float m_Angle;
	bool m_UseMotor; // Align
	JointMotor2D m_Motor;
		float m_MotorSpeed;
		float m_MaximumMotorForce;

Class ClusterInputManager
ClusterInputManager Base;
	vector m_Inputs;
		Array Array; // Align
			int size;
			ClusterInput data;
				string m_Name;
					Array Array; // Align
						int size;
						char data;
				string m_DeviceName;
					Array Array; // Align
						int size;
						char data;
				string m_ServerUrl;
					Array Array; // Align
						int size;
						char data;
				int m_Index;
				int m_Type;

Class BaseVideoTexture

Class NavMeshData
NavMeshData Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_NavMeshTiles;
		Array Array; // Align
			int size;
			NavMeshTileData data;
				vector m_MeshData;
					Array Array; // Align
						int size;
						UInt8 data;
				Hash128 m_Hash;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
	NavMeshBuildSettings m_NavMeshBuildSettings;
		int agentTypeID;
		float agentRadius;
		float agentHeight;
		float agentSlope;
		float agentClimb;
		float ledgeDropHeight;
		float maxJumpAcrossDistance;
		float minRegionArea;
		int manualCellSize;
		float cellSize;
		int manualTileSize;
		int tileSize;
		int accuratePlacement;
		NavMeshBuildDebugSettings debug;
			UInt8 m_Flags; // Align
	vector m_Heightmaps;
		Array Array; // Align
			int size;
			HeightmapData data;
				Vector3f position;
					float x;
					float y;
					float z;
				PPtr<Object> terrainData;
					int m_FileID;
					SInt64 m_PathID;
	vector m_HeightMeshes;
		Array Array; // Align
			int size;
			HeightMeshData data;
				vector m_Vertices;
					Array Array; // Align
						int size;
						Vector3f data;
							float x;
							float y;
							float z;
				vector m_Indices;
					Array Array; // Align
						int size;
						int data;
				AABB m_Bounds;
					Vector3f m_Center;
						float x;
						float y;
						float z;
					Vector3f m_Extent;
						float x;
						float y;
						float z;
				vector m_Nodes;
					Array Array; // Align
						int size;
						HeightMeshBVNode data;
							Vector3f min;
								float x;
								float y;
								float z;
							Vector3f max;
								float x;
								float y;
								float z;
							int i;
							int n;
	vector m_OffMeshLinks;
		Array Array; // Align
			int size;
			AutoOffMeshLinkData data;
				Vector3f m_Start;
					float x;
					float y;
					float z;
				Vector3f m_End;
					float x;
					float y;
					float z;
				float m_Radius;
				UInt16 m_LinkType;
				UInt8 m_Area;
				UInt8 m_LinkDirection;
	AABB m_SourceBounds;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	Quaternionf m_Rotation;
		float x;
		float y;
		float z;
		float w;
	Vector3f m_Position;
		float x;
		float y;
		float z;
	int m_AgentTypeID;

Class AudioMixer
AudioMixer Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixerGroup> m_OutputGroup;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AudioMixerGroup> m_MasterGroup;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Snapshots;
		Array Array; // Align
			int size;
			PPtr<AudioMixerSnapshot> data;
				int m_FileID;
				SInt64 m_PathID;
	PPtr<AudioMixerSnapshot> m_StartSnapshot;
		int m_FileID;
		SInt64 m_PathID;
	float m_SuspendThreshold;
	bool m_EnableSuspend; // Align
	int m_UpdateMode; // Align
	AudioMixerConstant m_MixerConstant; // Align
		vector groups;
			Array Array;
				int size;
				GroupConstant data;
					int parentConstantIndex;
					unsigned int volumeIndex;
					unsigned int pitchIndex;
					bool mute;
					bool solo;
					bool bypassEffects; // Align
		vector groupGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		vector effects;
			Array Array;
				int size;
				EffectConstant data;
					int type;
					unsigned int groupConstantIndex;
					unsigned int sendTargetEffectIndex;
					unsigned int wetMixLevelIndex;
					unsigned int prevEffectIndex;
					bool bypass; // Align
					vector parameterIndices;
						Array Array;
							int size;
							unsigned int data;
		vector effectGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		unsigned int numSideChainBuffers;
		vector snapshots;
			Array Array;
				int size;
				SnapshotConstant data;
					unsigned int nameHash;
					vector values;
						Array Array;
							int size;
							float data;
					vector transitionTypes;
						Array Array;
							int size;
							unsigned int data;
					vector transitionIndices;
						Array Array;
							int size;
							unsigned int data;
		vector snapshotGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		vector groupNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector snapshotNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector pluginEffectNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector exposedParameterNames;
			Array Array;
				int size;
				unsigned int data;
		vector exposedParameterIndices;
			Array Array;
				int size;
				unsigned int data;

Class AudioMixerController
AudioMixerController Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixerGroup> m_OutputGroup;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AudioMixerGroup> m_MasterGroup;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Snapshots;
		Array Array; // Align
			int size;
			PPtr<AudioMixerSnapshot> data;
				int m_FileID;
				SInt64 m_PathID;
	PPtr<AudioMixerSnapshot> m_StartSnapshot;
		int m_FileID;
		SInt64 m_PathID;
	float m_SuspendThreshold;
	bool m_EnableSuspend; // Align
	int m_UpdateMode; // Align
	AudioMixerConstant m_MixerConstant; // Align
		vector groups;
			Array Array;
				int size;
				GroupConstant data;
					int parentConstantIndex;
					unsigned int volumeIndex;
					unsigned int pitchIndex;
					bool mute;
					bool solo;
					bool bypassEffects; // Align
		vector groupGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		vector effects;
			Array Array;
				int size;
				EffectConstant data;
					int type;
					unsigned int groupConstantIndex;
					unsigned int sendTargetEffectIndex;
					unsigned int wetMixLevelIndex;
					unsigned int prevEffectIndex;
					bool bypass; // Align
					vector parameterIndices;
						Array Array;
							int size;
							unsigned int data;
		vector effectGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		unsigned int numSideChainBuffers;
		vector snapshots;
			Array Array;
				int size;
				SnapshotConstant data;
					unsigned int nameHash;
					vector values;
						Array Array;
							int size;
							float data;
					vector transitionTypes;
						Array Array;
							int size;
							unsigned int data;
					vector transitionIndices;
						Array Array;
							int size;
							unsigned int data;
		vector snapshotGUIDs;
			Array Array;
				int size;
				GUID data;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
		vector groupNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector snapshotNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector pluginEffectNameBuffer; // Align
			Array Array;
				int size;
				char data;
		vector exposedParameterNames;
			Array Array;
				int size;
				unsigned int data;
		vector exposedParameterIndices;
			Array Array;
				int size;
				unsigned int data;

Class AudioMixerGroupController
AudioMixerGroupController Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixer> m_AudioMixer;
		int m_FileID;
		SInt64 m_PathID;
	GUID m_GroupID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	vector m_Children; // Align
		Array Array; // Align
			int size;
			PPtr<AudioMixerGroup> data;
				int m_FileID;
				SInt64 m_PathID;

Class AudioMixerEffectController
AudioMixerEffectController Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	GUID m_EffectID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	string m_EffectName;
		Array Array; // Align
			int size;
			char data;
	GUID m_MixLevel;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	vector m_Parameters;
		Array Array; // Align
			int size;
			Parameter data;
				string m_ParameterName;
					Array Array; // Align
						int size;
						char data;
				GUID m_GUID;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
	PPtr<AudioMixerEffectController> m_SendTarget;
		int m_FileID;
		SInt64 m_PathID;
	bool m_EnableWetMix;
	bool m_Bypass; // Align

Class AudioMixerSnapshotController
AudioMixerSnapshotController Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixer> m_AudioMixer;
		int m_FileID;
		SInt64 m_PathID;
	GUID m_SnapshotID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];

Class PhysicsUpdateBehaviour2D
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class ConstantForce2D
ConstantForce2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	Vector2f m_Force;
		float x;
		float y;
	Vector2f m_RelativeForce;
		float x;
		float y;
	float m_Torque;

Class Effector2D
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class AreaEffector2D
AreaEffector2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_UseColliderMask; // Align
	BitField m_ColliderMask;
		unsigned int m_Bits;
	bool m_UseGlobalAngle; // Align
	float m_ForceAngle;
	float m_ForceMagnitude;
	float m_ForceVariation;
	int m_ForceTarget;
	float m_Drag;
	float m_AngularDrag;

Class PointEffector2D
PointEffector2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_UseColliderMask; // Align
	BitField m_ColliderMask;
		unsigned int m_Bits;
	float m_ForceMagnitude;
	float m_ForceVariation;
	float m_DistanceScale;
	int m_ForceSource;
	int m_ForceTarget;
	int m_ForceMode;
	float m_Drag;
	float m_AngularDrag;

Class PlatformEffector2D
PlatformEffector2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_UseColliderMask; // Align
	BitField m_ColliderMask;
		unsigned int m_Bits;
	float m_RotationalOffset;
	bool m_UseOneWay;
	bool m_UseOneWayGrouping; // Align
	float m_SurfaceArc;
	bool m_UseSideFriction;
	bool m_UseSideBounce; // Align
	float m_SideArc;

Class SurfaceEffector2D
SurfaceEffector2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_UseColliderMask; // Align
	BitField m_ColliderMask;
		unsigned int m_Bits;
	float m_Speed;
	float m_SpeedVariation;
	float m_ForceScale;
	bool m_UseContactForce;
	bool m_UseFriction;
	bool m_UseBounce; // Align

Class BuoyancyEffector2D
BuoyancyEffector2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_UseColliderMask; // Align
	BitField m_ColliderMask;
		unsigned int m_Bits;
	float m_SurfaceLevel;
	float m_Density;
	float m_LinearDrag;
	float m_AngularDrag;
	float m_FlowAngle;
	float m_FlowMagnitude;
	float m_FlowVariation;

Class RelativeJoint2D
RelativeJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	float m_MaxForce;
	float m_MaxTorque;
	float m_CorrectionScale;
	bool m_AutoConfigureOffset; // Align
	Vector2f m_LinearOffset;
		float x;
		float y;
	float m_AngularOffset;

Class FixedJoint2D
FixedJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	float m_DampingRatio;
	float m_Frequency;

Class FrictionJoint2D
FrictionJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	bool m_AutoConfigureConnectedAnchor; // Align
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_ConnectedAnchor;
		float x;
		float y;
	float m_MaxForce;
	float m_MaxTorque;

Class TargetJoint2D
TargetJoint2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	bool m_EnableCollision; // Align
	PPtr<Rigidbody2D> m_ConnectedRigidBody;
		int m_FileID;
		SInt64 m_PathID;
	float m_BreakForce;
	float m_BreakTorque;
	Vector2f m_Anchor;
		float x;
		float y;
	Vector2f m_Target;
		float x;
		float y;
	bool m_AutoConfigureTarget; // Align
	float m_MaxForce;
	float m_DampingRatio;
	float m_Frequency;

Class LightProbes
LightProbes Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	LightProbeData m_Data;
		ProbeSetTetrahedralization m_Tetrahedralization;
			vector m_Tetrahedra;
				Array Array; // Align
					int size;
					Tetrahedron data;
						int indices[0];
						int indices[1];
						int indices[2];
						int indices[3];
						int neighbors[0];
						int neighbors[1];
						int neighbors[2];
						int neighbors[3];
						Matrix3x4f matrix;
							float e00;
							float e01;
							float e02;
							float e03;
							float e10;
							float e11;
							float e12;
							float e13;
							float e20;
							float e21;
							float e22;
							float e23;
			vector m_HullRays;
				Array Array; // Align
					int size;
					Vector3f data;
						float x;
						float y;
						float z;
		vector m_ProbeSets;
			Array Array; // Align
				int size;
				ProbeSetIndex data;
					Hash128 m_Hash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					int m_Offset;
					int m_Size;
		vector m_Positions;
			Array Array; // Align
				int size;
				Vector3f data;
					float x;
					float y;
					float z;
		map m_NonTetrahedralizedProbeSetIndexMap;
			Array Array;
				int size;
				pair data;
					Hash128 first;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					int second;
	vector m_BakedCoefficients;
		Array Array; // Align
			int size;
			SphericalHarmonicsL2 data;
				float sh[ 0];
				float sh[ 1];
				float sh[ 2];
				float sh[ 3];
				float sh[ 4];
				float sh[ 5];
				float sh[ 6];
				float sh[ 7];
				float sh[ 8];
				float sh[ 9];
				float sh[10];
				float sh[11];
				float sh[12];
				float sh[13];
				float sh[14];
				float sh[15];
				float sh[16];
				float sh[17];
				float sh[18];
				float sh[19];
				float sh[20];
				float sh[21];
				float sh[22];
				float sh[23];
				float sh[24];
				float sh[25];
				float sh[26];
	vector m_BakedLightOcclusion;
		Array Array; // Align
			int size;
			LightProbeOcclusion data;
				staticvector m_ProbeOcclusionLightIndex;
					Array Array;
						int size;
						int data;
				staticvector m_Occlusion;
					Array Array;
						int size;
						float data;
				staticvector m_OcclusionMaskChannel;
					Array Array;
						int size;
						SInt8 data;

Class LightProbeProxyVolume
LightProbeProxyVolume Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	int m_BoundingBoxMode;
	unsigned int m_ResolutionX;
	unsigned int m_ResolutionY;
	unsigned int m_ResolutionZ;
	float m_ResolutionProbesPerUnit;
	Vector3f m_BoundingBoxSize;
		float x;
		float y;
		float z;
	Vector3f m_BoundingBoxOrigin;
		float x;
		float y;
		float z;
	int m_ResolutionMode;
	int m_ProbePositionMode;
	int m_RefreshMode;

Class SampleClip
SampleClip Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;

Class AudioMixerSnapshot
AudioMixerSnapshot Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixer> m_AudioMixer;
		int m_FileID;
		SInt64 m_PathID;
	GUID m_SnapshotID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];

Class AudioMixerGroup
AudioMixerGroup Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<AudioMixer> m_AudioMixer;
		int m_FileID;
		SInt64 m_PathID;
	GUID m_GroupID;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	vector m_Children;
		Array Array; // Align
			int size;
			PPtr<AudioMixerGroup> data;
				int m_FileID;
				SInt64 m_PathID;

Class AssetBundleManifest
AssetBundleManifest Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map AssetBundleNames;
		Array Array;
			int size;
			pair data;
				int first;
				string second;
					Array Array; // Align
						int size;
						char data;
	set AssetBundlesWithVariant;
		Array Array;
			int size;
			int data;
	map AssetBundleInfos;
		Array Array;
			int size;
			pair data;
				int first;
				AssetBundleInfo second;
					Hash128 AssetBundleHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					set AssetBundleDependencies;
						Array Array;
							int size;
							int data;

Class RuntimeInitializeOnLoadManager
RuntimeInitializeOnLoadManager Base;
	vector m_AssemblyNames;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_NamespaceNames; // Align
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ClassInfos; // Align
		Array Array; // Align
			int size;
			ClassInfo data;
				int m_AssemblyNameIndex;
				int m_NamespaceIndex; // Align
				string m_ClassName; // Align
					Array Array; // Align
						int size;
						char data;
				int m_NumOfMethods;
				int m_MethodIndex; // Align
				bool m_IsUnityClass; // Align
	vector m_ClassMethodInfos; // Align
		Array Array; // Align
			int size;
			ClassMethodInfo data;
				int m_ClassIndex;
				string m_MethodName; // Align
					Array Array; // Align
						int size;
						char data;
				int m_OrderNumber; // Align
	vector m_BeforeUnityMethodExecutionOrders;
		Array Array; // Align
			int size;
			int data;
	vector m_AfterUnityMethodExecutionOrders;
		Array Array; // Align
			int size;
			int data;
	vector m_BeforeMethodExecutionOrders;
		Array Array; // Align
			int size;
			int data;
	vector m_AfterMethodExecutionOrders; // Align
		Array Array; // Align
			int size;
			int data;

Class CloudWebServicesManager
CloudWebServicesManager Base;

Class UnityAnalyticsManager
UnityAnalyticsManager Base;

Class CrashReportManager
CrashReportManager Base;

Class PerformanceReportingManager
PerformanceReportingManager Base;

Class UnityConnectSettings
UnityConnectSettings Base;
	bool m_Enabled;
	bool m_TestMode; // Align
	string m_TestEventUrl;
		Array Array; // Align
			int size;
			char data;
	string m_TestConfigUrl;
		Array Array; // Align
			int size;
			char data;
	int m_TestInitMode; // Align
	CrashReportingSettings CrashReportingSettings;
		string m_EventUrl;
			Array Array; // Align
				int size;
				char data;
		string m_NativeEventUrl;
			Array Array; // Align
				int size;
				char data;
		bool m_Enabled; // Align
	UnityPurchasingSettings UnityPurchasingSettings;
		bool m_Enabled;
		bool m_TestMode; // Align
	UnityAnalyticsSettings UnityAnalyticsSettings;
		bool m_Enabled;
		bool m_InitializeOnStartup;
		bool m_TestMode; // Align
		string m_TestEventUrl;
			Array Array; // Align
				int size;
				char data;
		string m_TestConfigUrl; // Align
			Array Array; // Align
				int size;
				char data;
	UnityAdsSettings UnityAdsSettings;
		bool m_Enabled;
		bool m_InitializeOnStartup;
		bool m_TestMode; // Align
		string m_GameId;
			Array Array; // Align
				int size;
				char data;
	PerformanceReportingSettings PerformanceReportingSettings;
		bool m_Enabled; // Align

Class AvatarMask
AvatarMask Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Mask;
		Array Array; // Align
			int size;
			unsigned int data;
	vector m_Elements;
		Array Array; // Align
			int size;
			TransformMaskElement data;
				string m_Path;
					Array Array; // Align
						int size;
						char data;
				float m_Weight;

Class PlayableDirector
PlayableDirector Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<Object> m_PlayableAsset;
		int m_FileID;
		SInt64 m_PathID;
	int m_InitialState;
	int m_WrapMode;
	int m_DirectorUpdateMode;
	double m_InitialTime;
	vector m_SceneBindings;
		Array Array; // Align
			int size;
			DirectorGenericBinding data;
				PPtr<Object> key;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<Object> value;
					int m_FileID;
					SInt64 m_PathID;
	ExposedReferenceTable m_ExposedReferences;
		map m_References; // Align
			Array Array;
				int size;
				pair data;
					string first;
						int id; // Align
					PPtr<Object> second;
						int m_FileID;
						SInt64 m_PathID;

Class VideoPlayer
VideoPlayer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	PPtr<VideoClip> m_VideoClip;
		int m_FileID;
		SInt64 m_PathID;
	float m_TargetCameraAlpha;
	int m_TargetCamera3DLayout;
	PPtr<Camera> m_TargetCamera;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<RenderTexture> m_TargetTexture;
		int m_FileID;
		SInt64 m_PathID;
	int m_TimeReference;
	PPtr<Renderer> m_TargetMaterialRenderer;
		int m_FileID;
		SInt64 m_PathID;
	string m_TargetMaterialProperty;
		Array Array; // Align
			int size;
			char data;
	int m_RenderMode;
	int m_AspectRatio;
	int m_DataSource;
	float m_PlaybackSpeed;
	int m_AudioOutputMode;
	vector m_TargetAudioSources;
		Array Array; // Align
			int size;
			PPtr<AudioSource> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_DirectAudioVolumes;
		Array Array; // Align
			int size;
			float data;
	string m_Url;
		Array Array; // Align
			int size;
			char data;
	vector m_EnabledAudioTracks; // Align
		Array Array; // Align
			int size;
			bool data;
	vector m_DirectAudioMutes; // Align
		Array Array; // Align
			int size;
			bool data;
	UInt16 m_ControlledAudioTrackCount;
	bool m_PlayOnAwake;
	bool m_SkipOnDrop;
	bool m_Looping;
	bool m_WaitForFirstFrame;
	bool m_FrameReadyEventEnabled;

Class VideoClip
VideoClip Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_OriginalPath; // Align
		Array Array; // Align
			int size;
			char data;
	unsigned int m_ProxyWidth;
	unsigned int m_ProxyHeight;
	unsigned int Width;
	unsigned int Height;
	unsigned int m_PixelAspecRatioNum;
	unsigned int m_PixelAspecRatioDen;
	double m_FrameRate;
	UInt64 m_FrameCount;
	int m_Format;
	vector m_AudioChannelCount; // Align
		Array Array; // Align
			int size;
			UInt16 data;
	vector m_AudioSampleRate; // Align
		Array Array; // Align
			int size;
			unsigned int data;
	vector m_AudioLanguage; // Align
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	StreamedResource m_ExternalResources;
		string m_Source;
			Array Array; // Align
				int size;
				char data;
		UInt64 m_Offset;
		UInt64 m_Size;
	bool m_HasSplitAlpha;

Class SpriteMask
SpriteMask Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	PPtr<Sprite> m_Sprite;
		int m_FileID;
		SInt64 m_PathID;
	float m_MaskAlphaCutoff;
	SInt16 m_FrontSortingLayer;
	SInt16 m_BackSortingLayer;
	SInt16 m_FrontSortingOrder;
	SInt16 m_BackSortingOrder;
	bool m_IsCustomRangeActive; // Align

Class WorldAnchor
WorldAnchor Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class OcclusionCullingData
OcclusionCullingData Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_PVSData;
		Array Array; // Align
			int size;
			UInt8 data;
	vector m_Scenes;
		Array Array; // Align
			int size;
			OcclusionScene data;
				int indexRenderers;
				int sizeRenderers;
				int indexPortals;
				int sizePortals;
				GUID scene;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];

Class Prefab
Prefab Base;
	PrefabModification m_Modification;
		PPtr<Transform> m_TransformParent;
			int m_FileID;
			SInt64 m_PathID;
		vector m_Modifications;
			Array Array; // Align
				int size;
				PropertyModification data;
					PPtr<Object> target;
						int m_FileID;
						SInt64 m_PathID;
					string propertyPath;
						Array Array; // Align
							int size;
							char data;
					string value;
						Array Array; // Align
							int size;
							char data;
					PPtr<Object> objectReference;
						int m_FileID;
						SInt64 m_PathID;
		vector m_RemovedComponents;
			Array Array; // Align
				int size;
				PPtr<Object> data;
					int m_FileID;
					SInt64 m_PathID;
	PPtr<Prefab> m_ParentPrefab;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_RootGameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsPrefabParent; // Align

Class EditorExtensionImpl
EditorExtensionImpl Base;

Class AssetImporter

Class AssetDatabaseV1
AssetDatabaseV1 Base;
	map m_AssetTimeStamps;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				AssetTimeStamp second;
					unsigned int modificationDate[0];
					unsigned int modificationDate[1];
					unsigned int metaModificationDate[0];
					unsigned int metaModificationDate[1];
	map m_Assets;
		Array Array;
			int size;
			pair data;
				GUID first;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
				Asset second;
					LibraryRepresentation mainRepresentation;
						string name;
							Array Array; // Align
								int size;
								char data;
						Image thumbnail;
							int m_Format;
							int m_Width;
							int m_Height;
							int m_RowBytes;
							TypelessData image data; // Align
								int size;
								UInt8 data;
						GUID guid;
							unsigned int data[0];
							unsigned int data[1];
							unsigned int data[2];
							unsigned int data[3];
						string path;
							Array Array; // Align
								int size;
								char data;
						SInt64 localIdentifier;
						int thumbnailClassID;
						UInt16 flags; // Align
						string scriptClassName;
							Array Array; // Align
								int size;
								char data;
					vector representations;
						Array Array; // Align
							int size;
							LibraryRepresentation data;
								string name;
									Array Array; // Align
										int size;
										char data;
								Image thumbnail;
									int m_Format;
									int m_Width;
									int m_Height;
									int m_RowBytes;
									TypelessData image data; // Align
										int size;
										UInt8 data;
								GUID guid;
									unsigned int data[0];
									unsigned int data[1];
									unsigned int data[2];
									unsigned int data[3];
								string path;
									Array Array; // Align
										int size;
										char data;
								SInt64 localIdentifier;
								int thumbnailClassID;
								UInt16 flags; // Align
								string scriptClassName;
									Array Array; // Align
										int size;
										char data;
					vector children;
						Array Array; // Align
							int size;
							GUID data;
								unsigned int data[0];
								unsigned int data[1];
								unsigned int data[2];
								unsigned int data[3];
					GUID parent;
						unsigned int data[0];
						unsigned int data[1];
						unsigned int data[2];
						unsigned int data[3];
					int type;
					AssetLabels labels;
						vector m_Labels;
							Array Array; // Align
								int size;
								string data;
									Array Array; // Align
										int size;
										char data;
					Type* importerClassId;
					string scriptedImporterClassID;
						Array Array; // Align
							int size;
							char data;
					unsigned int importerVersionHash;
					Hash128 hash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					int assetBundleIndex;
	int m_UnityShadersVersion;
	map m_lastValidVersions;
		Array Array;
			int size;
			pair data;
				AssetImporterHashKey first;
					Type* type;
					string ScriptClass;
						Array Array; // Align
							int size;
							char data;
				unsigned int second;
	map m_AssetBundleNames;
		Array Array;
			int size;
			pair data;
				int first;
				AssetBundleFullName second;
					string m_AssetBundleName;
						Array Array; // Align
							int size;
							char data;
					string m_AssetBundleVariant;
						Array Array; // Align
							int size;
							char data;
	AssetDatabaseMetrics m_Metrics;
		int totalAssetCount;

Class Mesh3DSImporter
ModelImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_FileIDToRecycleName;
		Array Array;
			int size;
			pair data;
				SInt64 first;
				string second;
					Array Array; // Align
						int size;
						char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	bool m_ImportMaterials;
	bool m_SupportsEmbeddedMaterials; // Align
	int m_MaterialName;
	int m_MaterialSearch;
	int m_MaterialLocation;
	set m_Materials;
		Array Array;
			int size;
			SourceAssetIdentifier data;
				string type;
					Array Array; // Align
						int size;
						char data;
				string assembly;
					Array Array; // Align
						int size;
						char data;
				string name;
					Array Array; // Align
						int size;
						char data;
	int m_LegacyGenerateAnimations;
	bool m_BakeSimulation;
	bool m_ResampleCurves;
	bool m_OptimizeGameObjects; // Align
	string m_MotionNodeName;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationRetargetingWarnings;
		Array Array; // Align
			int size;
			char data;
	bool m_AnimationDoRetargetingWarnings;
	bool m_ImportAnimatedCustomProperties; // Align
	int m_AnimationCompression;
	float m_AnimationRotationError;
	float m_AnimationPositionError;
	float m_AnimationScaleError;
	int m_AnimationWrapMode;
	vector m_ExtraExposedTransformPaths;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ExtraUserProperties;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ClipAnimations;
		Array Array; // Align
			int size;
			ClipAnimationInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string takeName;
					Array Array; // Align
						int size;
						char data;
				float firstFrame;
				float lastFrame;
				int wrapMode;
				float orientationOffsetY;
				float level;
				float cycleOffset;
				bool loop;
				bool hasAdditiveReferencePose;
				bool loopTime;
				bool loopBlend;
				bool loopBlendOrientation;
				bool loopBlendPositionY;
				bool loopBlendPositionXZ;
				bool keepOriginalOrientation;
				bool keepOriginalPositionY;
				bool keepOriginalPositionXZ;
				bool heightFromFeet;
				bool mirror; // Align
				vector bodyMask;
					Array Array; // Align
						int size;
						unsigned int data;
				vector curves;
					Array Array; // Align
						int size;
						ClipAnimationInfoCurve data;
							string name;
								Array Array; // Align
									int size;
									char data;
							AnimationCurve curve;
								vector m_Curve;
									Array Array; // Align
										int size;
										Keyframe data;
											float time;
											float value;
											float inSlope;
											float outSlope;
								int m_PreInfinity;
								int m_PostInfinity;
								int m_RotationOrder;
				vector events;
					Array Array; // Align
						int size;
						AnimationEvent data;
							float time;
							string functionName;
								Array Array; // Align
									int size;
									char data;
							string data;
								Array Array; // Align
									int size;
									char data;
							PPtr<Object> objectReferenceParameter;
								int m_FileID;
								SInt64 m_PathID;
							float floatParameter;
							int intParameter;
							int messageOptions;
				vector transformMask;
					Array Array; // Align
						int size;
						TransformMaskElement data;
							string m_Path;
								Array Array; // Align
									int size;
									char data;
							float m_Weight;
				int maskType;
				PPtr<AvatarMask> maskSource;
					int m_FileID;
					SInt64 m_PathID;
				float additiveReferencePoseFrame;
	bool m_IsReadable; // Align
	vector m_LODScreenPercentages;
		Array Array; // Align
			int size;
			float data;
	float m_GlobalScale;
	int m_MeshCompression;
	bool m_AddColliders;
	bool m_ImportVisibility;
	bool m_ImportBlendShapes;
	bool m_ImportCameras;
	bool m_ImportLights; // Align
	bool swapUVChannels;
	bool generateSecondaryUV;
	bool m_UseFileUnits;
	bool optimizeMeshForGPU;
	bool keepQuads;
	bool weldVertices;
	bool m_PreserveHierarchy; // Align
	int indexFormat;
	float secondaryUVAngleDistortion;
	float secondaryUVAreaDistortion;
	float secondaryUVHardAngle;
	float secondaryUVPackMargin;
	bool m_UseFileScale; // Align
	float m_FileScale; // Align
	float normalSmoothAngle; // Align
	int normalImportMode;
	int tangentImportMode;
	int normalCalculationMode; // Align
	vector m_ImportedTakeInfos;
		Array Array; // Align
			int size;
			TakeInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string defaultClipName;
					Array Array; // Align
						int size;
						char data;
				float startTime;
				float stopTime;
				float bakeStartTime;
				float bakeStopTime;
				float sampleRate;
				PPtr<AnimationClip> clip;
					int m_FileID;
					SInt64 m_PathID;
	vector m_ReferencedClips;
		Array Array; // Align
			int size;
			GUID data;
				unsigned int data[0];
				unsigned int data[1];
				unsigned int data[2];
				unsigned int data[3];
	vector m_ImportedRoots;
		Array Array; // Align
			int size;
			PPtr<GameObject> data;
				int m_FileID;
				SInt64 m_PathID;
	bool m_HasExtraRoot;
	bool m_HasEmbeddedTextures; // Align
	bool m_ImportAnimation;
	bool m_CopyAvatar; // Align
	HumanDescription m_HumanDescription;
		vector m_Human;
			Array Array; // Align
				int size;
				HumanBone data;
					string m_BoneName;
						Array Array; // Align
							int size;
							char data;
					string m_HumanName;
						Array Array; // Align
							int size;
							char data;
					SkeletonBoneLimit m_Limit;
						Vector3f m_Min;
							float x;
							float y;
							float z;
						Vector3f m_Max;
							float x;
							float y;
							float z;
						Vector3f m_Value;
							float x;
							float y;
							float z;
						float m_Length;
						bool m_Modified; // Align
		vector m_Skeleton;
			Array Array; // Align
				int size;
				SkeletonBone data;
					string m_Name;
						Array Array; // Align
							int size;
							char data;
					string m_ParentName;
						Array Array; // Align
							int size;
							char data;
					Vector3f m_Position;
						float x;
						float y;
						float z;
					Quaternionf m_Rotation;
						float x;
						float y;
						float z;
						float w;
					Vector3f m_Scale;
						float x;
						float y;
						float z;
		float m_ArmTwist;
		float m_ForeArmTwist;
		float m_UpperLegTwist;
		float m_LegTwist;
		float m_ArmStretch;
		float m_LegStretch;
		float m_FeetSpacing;
		string m_RootMotionBoneName;
			Array Array; // Align
				int size;
				char data;
		Quaternionf m_RootMotionBoneRotation;
			float x;
			float y;
			float z;
			float w;
		bool m_HasTranslationDoF;
		bool m_HasExtraRoot;
		bool m_SkeletonHasParents; // Align
	PPtr<Avatar> m_LastHumanDescriptionAvatarSource;
		int m_FileID;
		SInt64 m_PathID;
	int m_AnimationType;
	int m_HumanoidOversampling;
	bool m_AdditionalBone; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class TextureImporter
TextureImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_FileIDToRecycleName;
		Array Array;
			int size;
			pair data;
				SInt64 first;
				string second;
					Array Array; // Align
						int size;
						char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	int m_MipMapMode;
	int m_EnableMipMap;
	int m_sRGBTexture;
	int m_LinearTexture;
	int m_FadeOut;
	int m_BorderMipMap;
	int m_MipMapsPreserveCoverage;
	float m_AlphaTestReferenceValue;
	int m_MipMapFadeDistanceStart;
	int m_MipMapFadeDistanceEnd;
	int m_ConvertToNormalMap;
	int m_ExternalNormalMap;
	float m_HeightScale;
	int m_NormalMapFilter;
	int m_IsReadable;
	int m_GrayScaleToAlpha;
	int m_GenerateCubemap;
	int m_CubemapConvolution;
	int m_SeamlessCubemap;
	int m_TextureFormat;
	int m_MaxTextureSize;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	int m_NPOTScale;
	int m_Lightmap;
	int m_CompressionQuality;
	int m_SpriteMode;
	unsigned int m_SpriteExtrude;
	int m_SpriteMeshType;
	int m_Alignment;
	Vector2f m_SpritePivot;
		float x;
		float y;
	float m_SpritePixelsToUnits;
	Vector4f m_SpriteBorder;
		float x;
		float y;
		float z;
		float w;
	int m_SpriteGenerateFallbackPhysicsShape;
	int m_AlphaUsage;
	int m_AlphaIsTransparency;
	float m_SpriteTessellationDetail;
	int m_TextureType;
	int m_TextureShape;
	int m_MaxTextureSizeSet;
	int m_CompressionQualitySet;
	int m_TextureFormatSet; // Align
	vector m_PlatformSettings;
		Array Array; // Align
			int size;
			TextureImporterPlatformSettings data;
				string m_BuildTarget;
					Array Array; // Align
						int size;
						char data;
				int m_MaxTextureSize;
				int m_ResizeAlgorithm;
				int m_TextureFormat;
				int m_TextureCompression;
				int m_CompressionQuality;
				bool m_CrunchedCompression;
				bool m_AllowsAlphaSplitting;
				bool m_Overridden; // Align
				int m_AndroidETC2FallbackOverride;
	SpriteSheetMetaData m_SpriteSheet;
		vector m_Sprites;
			Array Array; // Align
				int size;
				SpriteMetaData data;
					string m_Name;
						Array Array; // Align
							int size;
							char data;
					Rectf m_Rect;
						float x;
						float y;
						float width;
						float height;
					int m_Alignment;
					Vector2f m_Pivot;
						float x;
						float y;
					Vector4f m_Border;
						float x;
						float y;
						float z;
						float w;
					vector m_Outline;
						Array Array; // Align
							int size;
							vector data;
								Array Array; // Align
									int size;
									Vector2f data;
										float x;
										float y;
					vector m_PhysicsShape;
						Array Array; // Align
							int size;
							vector data;
								Array Array; // Align
									int size;
									Vector2f data;
										float x;
										float y;
					float m_TessellationDetail;
		vector m_Outline;
			Array Array; // Align
				int size;
				vector data;
					Array Array; // Align
						int size;
						Vector2f data;
							float x;
							float y;
		vector m_PhysicsShape;
			Array Array; // Align
				int size;
				vector data;
					Array Array; // Align
						int size;
						Vector2f data;
							float x;
							float y;
	string m_SpritePackingTag;
		Array Array; // Align
			int size;
			char data;
	TextureImportOutput m_Output; // Align
		TextureImportInstructions textureImportInstructions;
			int compressedFormat;
			int uncompressedFormat;
			int desiredFormat;
			int usageMode;
			int colorSpace;
			int androidETC2FallbackFormat;
			int width;
			int height;
			int compressionQuality;
			bool androidETC2FallbackDownscale; // Align
		SourceTextureInformation sourceTextureInformation;
			int width;
			int height;
			bool doesTextureContainAlpha;
			bool sourceWasHDR; // Align
		string importInspectorWarnings;
			Array Array; // Align
				int size;
				char data;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class ShaderImporter
ShaderImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	vector m_DefaultTextures; // Align
		Array Array; // Align
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				PPtr<Texture> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class ComputeShaderImporter
ComputeShaderImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	unsigned int m_CurrentAPIMask; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class AudioImporter
AudioImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	SampleSettings m_DefaultSettings;
		int loadType;
		int sampleRateSetting;
		unsigned int sampleRateOverride;
		int compressionFormat;
		float quality;
		int conversionMode;
	map m_PlatformSettingOverrides;
		Array Array;
			int size;
			pair data;
				int first;
				SampleSettings second;
					int loadType;
					int sampleRateSetting;
					unsigned int sampleRateOverride;
					int compressionFormat;
					float quality;
					int conversionMode;
	bool m_ForceToMono;
	bool m_Normalize;
	bool m_PreloadAudioData;
	bool m_LoadInBackground;
	bool m_Ambisonic;
	bool m_3D; // Align
	PreviewData m_PreviewData;
		vector m_PreviewData;
			Array Array; // Align
				int size;
				float data;
		int m_OrigSize;
		int m_CompSize;
	AudioImporterOutput m_Output; // Align
		SampleSettings outputSettings;
			int loadType;
			int sampleRateSetting;
			unsigned int sampleRateOverride;
			int compressionFormat;
			float quality;
			int conversionMode;
		int outputContainerFormat;
		SampleSettings editorOutputSettings;
			int loadType;
			int sampleRateSetting;
			unsigned int sampleRateOverride;
			int compressionFormat;
			float quality;
			int conversionMode;
		int editorOutputContainerFormat;
		StreamedResource playerResource;
			string m_Source;
				Array Array; // Align
					int size;
					char data;
			UInt64 m_Offset;
			UInt64 m_Size;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class HierarchyState
HierarchyState Base;
	set expanded;
		Array Array;
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;
	set selection;
		Array Array;
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;
	float scrollposition_x;
	float scrollposition_y;

Class AssetMetaData
AssetMetaData Base;
	GUID guid;
		unsigned int data[0];
		unsigned int data[1];
		unsigned int data[2];
		unsigned int data[3];
	string pathName;
		Array Array; // Align
			int size;
			char data;
	string originalName;
		Array Array; // Align
			int size;
			char data;
	vector labels;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	UInt64 assetStoreRef;

Class DefaultAsset
DefaultAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_Message;
		Array Array; // Align
			int size;
			char data;
	bool m_IsWarning;

Class DefaultImporter
DefaultImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects; // Align
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class TextScriptImporter
TextScriptImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects; // Align
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class SceneAsset
DefaultAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_Message;
		Array Array; // Align
			int size;
			char data;
	bool m_IsWarning;

Class NativeFormatImporter
NativeFormatImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	SInt64 m_MainObjectFileID; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class MonoImporter
MonoImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	vector m_DefaultReferences;
		Array Array; // Align
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	SInt16 executionOrder; // Align
	PPtr<Texture2D> icon; // Align
		int m_FileID;
		SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class LibraryAssetImporter
LibraryAssetImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects; // Align
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class ModelImporter

Class FBXImporter
ModelImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_FileIDToRecycleName;
		Array Array;
			int size;
			pair data;
				SInt64 first;
				string second;
					Array Array; // Align
						int size;
						char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	bool m_ImportMaterials;
	bool m_SupportsEmbeddedMaterials; // Align
	int m_MaterialName;
	int m_MaterialSearch;
	int m_MaterialLocation;
	set m_Materials;
		Array Array;
			int size;
			SourceAssetIdentifier data;
				string type;
					Array Array; // Align
						int size;
						char data;
				string assembly;
					Array Array; // Align
						int size;
						char data;
				string name;
					Array Array; // Align
						int size;
						char data;
	int m_LegacyGenerateAnimations;
	bool m_BakeSimulation;
	bool m_ResampleCurves;
	bool m_OptimizeGameObjects; // Align
	string m_MotionNodeName;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationRetargetingWarnings;
		Array Array; // Align
			int size;
			char data;
	bool m_AnimationDoRetargetingWarnings;
	bool m_ImportAnimatedCustomProperties; // Align
	int m_AnimationCompression;
	float m_AnimationRotationError;
	float m_AnimationPositionError;
	float m_AnimationScaleError;
	int m_AnimationWrapMode;
	vector m_ExtraExposedTransformPaths;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ExtraUserProperties;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ClipAnimations;
		Array Array; // Align
			int size;
			ClipAnimationInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string takeName;
					Array Array; // Align
						int size;
						char data;
				float firstFrame;
				float lastFrame;
				int wrapMode;
				float orientationOffsetY;
				float level;
				float cycleOffset;
				bool loop;
				bool hasAdditiveReferencePose;
				bool loopTime;
				bool loopBlend;
				bool loopBlendOrientation;
				bool loopBlendPositionY;
				bool loopBlendPositionXZ;
				bool keepOriginalOrientation;
				bool keepOriginalPositionY;
				bool keepOriginalPositionXZ;
				bool heightFromFeet;
				bool mirror; // Align
				vector bodyMask;
					Array Array; // Align
						int size;
						unsigned int data;
				vector curves;
					Array Array; // Align
						int size;
						ClipAnimationInfoCurve data;
							string name;
								Array Array; // Align
									int size;
									char data;
							AnimationCurve curve;
								vector m_Curve;
									Array Array; // Align
										int size;
										Keyframe data;
											float time;
											float value;
											float inSlope;
											float outSlope;
								int m_PreInfinity;
								int m_PostInfinity;
								int m_RotationOrder;
				vector events;
					Array Array; // Align
						int size;
						AnimationEvent data;
							float time;
							string functionName;
								Array Array; // Align
									int size;
									char data;
							string data;
								Array Array; // Align
									int size;
									char data;
							PPtr<Object> objectReferenceParameter;
								int m_FileID;
								SInt64 m_PathID;
							float floatParameter;
							int intParameter;
							int messageOptions;
				vector transformMask;
					Array Array; // Align
						int size;
						TransformMaskElement data;
							string m_Path;
								Array Array; // Align
									int size;
									char data;
							float m_Weight;
				int maskType;
				PPtr<AvatarMask> maskSource;
					int m_FileID;
					SInt64 m_PathID;
				float additiveReferencePoseFrame;
	bool m_IsReadable; // Align
	vector m_LODScreenPercentages;
		Array Array; // Align
			int size;
			float data;
	float m_GlobalScale;
	int m_MeshCompression;
	bool m_AddColliders;
	bool m_ImportVisibility;
	bool m_ImportBlendShapes;
	bool m_ImportCameras;
	bool m_ImportLights; // Align
	bool swapUVChannels;
	bool generateSecondaryUV;
	bool m_UseFileUnits;
	bool optimizeMeshForGPU;
	bool keepQuads;
	bool weldVertices;
	bool m_PreserveHierarchy; // Align
	int indexFormat;
	float secondaryUVAngleDistortion;
	float secondaryUVAreaDistortion;
	float secondaryUVHardAngle;
	float secondaryUVPackMargin;
	bool m_UseFileScale; // Align
	float m_FileScale; // Align
	float normalSmoothAngle; // Align
	int normalImportMode;
	int tangentImportMode;
	int normalCalculationMode; // Align
	vector m_ImportedTakeInfos;
		Array Array; // Align
			int size;
			TakeInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string defaultClipName;
					Array Array; // Align
						int size;
						char data;
				float startTime;
				float stopTime;
				float bakeStartTime;
				float bakeStopTime;
				float sampleRate;
				PPtr<AnimationClip> clip;
					int m_FileID;
					SInt64 m_PathID;
	vector m_ReferencedClips;
		Array Array; // Align
			int size;
			GUID data;
				unsigned int data[0];
				unsigned int data[1];
				unsigned int data[2];
				unsigned int data[3];
	vector m_ImportedRoots;
		Array Array; // Align
			int size;
			PPtr<GameObject> data;
				int m_FileID;
				SInt64 m_PathID;
	bool m_HasExtraRoot;
	bool m_HasEmbeddedTextures; // Align
	bool m_ImportAnimation;
	bool m_CopyAvatar; // Align
	HumanDescription m_HumanDescription;
		vector m_Human;
			Array Array; // Align
				int size;
				HumanBone data;
					string m_BoneName;
						Array Array; // Align
							int size;
							char data;
					string m_HumanName;
						Array Array; // Align
							int size;
							char data;
					SkeletonBoneLimit m_Limit;
						Vector3f m_Min;
							float x;
							float y;
							float z;
						Vector3f m_Max;
							float x;
							float y;
							float z;
						Vector3f m_Value;
							float x;
							float y;
							float z;
						float m_Length;
						bool m_Modified; // Align
		vector m_Skeleton;
			Array Array; // Align
				int size;
				SkeletonBone data;
					string m_Name;
						Array Array; // Align
							int size;
							char data;
					string m_ParentName;
						Array Array; // Align
							int size;
							char data;
					Vector3f m_Position;
						float x;
						float y;
						float z;
					Quaternionf m_Rotation;
						float x;
						float y;
						float z;
						float w;
					Vector3f m_Scale;
						float x;
						float y;
						float z;
		float m_ArmTwist;
		float m_ForeArmTwist;
		float m_UpperLegTwist;
		float m_LegTwist;
		float m_ArmStretch;
		float m_LegStretch;
		float m_FeetSpacing;
		string m_RootMotionBoneName;
			Array Array; // Align
				int size;
				char data;
		Quaternionf m_RootMotionBoneRotation;
			float x;
			float y;
			float z;
			float w;
		bool m_HasTranslationDoF;
		bool m_HasExtraRoot;
		bool m_SkeletonHasParents; // Align
	PPtr<Avatar> m_LastHumanDescriptionAvatarSource;
		int m_FileID;
		SInt64 m_PathID;
	int m_AnimationType;
	int m_HumanoidOversampling;
	bool m_AdditionalBone; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class TrueTypeFontImporter
TrueTypeFontImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	int m_FontSize;
	int m_ForceTextureCase;
	int m_CharacterSpacing;
	int m_CharacterPadding;
	bool m_IncludeFontData; // Align
	string m_FontName;
		Array Array; // Align
			int size;
			char data;
	vector m_FontNames;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_FallbackFontReferences;
		Array Array; // Align
			int size;
			PPtr<Font> data;
				int m_FileID;
				SInt64 m_PathID;
	string m_CustomCharacters;
		Array Array; // Align
			int size;
			char data;
	int m_FontRenderingMode;
	Output m_Output; // Align
		bool hasEmptyFontData;
	int m_AscentCalculationMode;
	bool m_UseLegacyBoundsCalculation; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class MovieImporter
MovieImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	float m_Quality;
	bool m_LinearTexture; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class EditorBuildSettings
EditorBuildSettings Base;
	vector m_Scenes;
		Array Array; // Align
			int size;
			Scene data;
				bool enabled; // Align
				string path;
					Array Array; // Align
						int size;
						char data;
				GUID guid;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];

Class InspectorExpandedState
InspectorExpandedState Base;
	vector m_ExpandedData;
		Array Array;
			int size;
			ExpandedData data;
				bool m_InspectorExpanded; // Align
				Type* m_ClassID;
				string m_ScriptClass;
					Array Array; // Align
						int size;
						char data;
				vector m_ExpandedProperties;
					Array Array; // Align
						int size;
						string data;
							Array Array; // Align
								int size;
								char data;

Class AnnotationManager
AnnotationManager Base;
	vector m_CurrentPreset_m_AnnotationList;
		Array Array; // Align
			int size;
			Annotation data;
				bool m_IconEnabled; // Align
				bool m_GizmoEnabled; // Align
				Type* m_ClassID;
				string m_ScriptClass;
					Array Array; // Align
						int size;
						char data;
				int m_Flags;
	vector m_RecentlyChanged;
		Array Array; // Align
			int size;
			Annotation data;
				bool m_IconEnabled; // Align
				bool m_GizmoEnabled; // Align
				Type* m_ClassID;
				string m_ScriptClass;
					Array Array; // Align
						int size;
						char data;
				int m_Flags;
	float m_WorldIconSize;
	bool m_Use3dGizmos;
	bool m_ShowGrid;
	bool m_ShowSelectionOutline;
	bool m_ShowSelectionWire; // Align

Class PluginImporter
PluginImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	map m_IconMap;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				PPtr<Texture2D> second;
					int m_FileID;
					SInt64 m_PathID;
	map m_ExecutionOrder; // Align
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				int second;
	bool m_IsPreloaded;
	bool m_IsOverridable; // Align
	map m_PlatformData;
		Array Array;
			int size;
			pair data;
				pair first;
					string first;
						Array Array; // Align
							int size;
							char data;
					string second;
						Array Array; // Align
							int size;
							char data;
				PlatformSettingsData second;
					bool enabled; // Align
					map settings;
						Array Array;
							int size;
							pair data;
								string first;
									Array Array; // Align
										int size;
										char data;
								string second;
									Array Array; // Align
										int size;
										char data;
	PluginImportOutput m_Output; // Align
		int dllType;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class EditorUserBuildSettings
EditorUserBuildSettings Base;
	vector m_BuildLocation;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	int m_ActiveBuildTarget;
	int m_ActiveBuildTargetGroup;
	int m_SelectedBuildTargetGroup;
	int m_SelectedStandaloneTarget;
	int m_SelectedFacebookTarget;
	int m_ArchitectureFlags;
	int m_SelectedPSP2Subtarget;
	int m_SelectedPS4Subtarget;
	int m_PS4HardwareTarget;
	int m_SelectedPSMSubtarget;
	int m_SelectedWiiUDebugLevel;
	int m_SelectedWiiUBuildOutput;
	int m_SelectedWiiUBootMode;
	int m_SelectedXboxSubtarget;
	int m_SelectedIOSBuildType;
	int m_AndroidBuildSystem;
	int m_AndroidBuildType;
	int m_AndroidReleaseMinification;
	int m_AndroidDebugMinification;
	int m_SelectedAndroidETC2Fallback;
	string m_AndroidDeviceSocketAddress;
		Array Array; // Align
			int size;
			char data;
	map m_SelectedCompressionType;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				int second;
	string m_FacebookAccessToken;
		Array Array; // Align
			int size;
			char data;
	bool m_Development;
	bool m_WebGLUsePreBuiltUnityEngine;
	bool m_ConnectProfiler;
	bool m_AllowDebugging;
	bool m_InstallInBuildFolder;
	bool m_SymlinkLibraries;
	bool m_SymlinkTrampoline;
	bool m_NeedSubmissionMaterials;
	bool m_CompressWithPsArc;
	bool m_CompressFilesInPackage;
	bool m_ForceInstallation;
	bool m_ExplicitNullChecks;
	bool m_ExplicitDivideByZeroChecks;
	bool m_EnableHeadlessMode;
	bool m_BuildScriptsOnly;
	bool m_WiiUEnableNetAPI;
	bool m_ExportAsGoogleAndroidProject;
	bool m_CreateSolutionFileForSwitch;
	bool m_CreateRomFileForSwitch;
	bool m_NVNGraphicsDebuggerForSwitch;
	bool m_EnableDebugPadForSwitch;
	bool m_RedirectWritesToHostMountForSwitch;
	bool m_BuildAppBundle; // Align
	int m_SelectedAndroidSubtarget;
	int m_SelectedWSASubtarget;
	int m_SelectedWSAUWPBuildType;
	string m_SelectedWSAUWPSDK;
		Array Array; // Align
			int size;
			char data;
	string m_SelectedWSAUWPVSVersion;
		Array Array; // Align
			int size;
			char data;
	int m_SelectedWSABuildAndRunDeployTarget;
	bool m_GenerateWSAReferenceProjects; // Align
	vector m_WSADotNetNativeEnabled; // Align
		Array Array; // Align
			int size;
			bool data;
	int m_SelectedTizenSubtarget; // Align
	int m_XboxOneStreamingInstallLaunchChunkRange;
	int m_SelectedXboxOneDeployMethod;
	string m_XboxOneUsername;
		Array Array; // Align
			int size;
			char data;
	string m_XboxOneNetworkSharePath;
		Array Array; // Align
			int size;
			char data;
	map m_PlatformSettings;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				PlatformSettingsData second;
					map settings;
						Array Array;
							int size;
							pair data;
								string first;
									Array Array; // Align
										int size;
										char data;
								string second;
									Array Array; // Align
										int size;
										char data;

Class IHVImageFormatImporter
IHVImageFormatImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	GLTextureSettings m_TextureSettings;
		int m_FilterMode;
		int m_Aniso;
		float m_MipBias;
		int m_WrapU;
		int m_WrapV;
		int m_WrapW;
	bool m_IsReadable;
	bool m_sRGBTexture; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class AnimatorStateTransition
AnimatorStateTransition Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Conditions;
		Array Array; // Align
			int size;
			AnimatorCondition data;
				int m_ConditionMode;
				string m_ConditionEvent;
					Array Array; // Align
						int size;
						char data;
				float m_EventTreshold;
	PPtr<AnimatorStateMachine> m_DstStateMachine;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AnimatorState> m_DstState;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Solo;
	bool m_Mute;
	bool m_IsExit; // Align
	float m_TransitionDuration;
	float m_TransitionOffset;
	float m_ExitTime;
	bool m_HasExitTime;
	bool m_HasFixedDuration; // Align
	int m_InterruptionSource;
	bool m_OrderedInterruption;
	bool m_CanTransitionToSelf;

Class AnimatorState
AnimatorState Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float m_Speed;
	float m_CycleOffset;
	vector m_Transitions;
		Array Array; // Align
			int size;
			PPtr<AnimatorStateTransition> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_StateMachineBehaviours;
		Array Array; // Align
			int size;
			PPtr<MonoBehaviour> data;
				int m_FileID;
				SInt64 m_PathID;
	Vector3f m_Position;
		float x;
		float y;
		float z;
	bool m_IKOnFeet;
	bool m_WriteDefaultValues;
	bool m_Mirror;
	bool m_SpeedParameterActive;
	bool m_MirrorParameterActive;
	bool m_CycleOffsetParameterActive;
	bool m_TimeParameterActive; // Align
	PPtr<Motion> m_Motion;
		int m_FileID;
		SInt64 m_PathID;
	string m_Tag;
		Array Array; // Align
			int size;
			char data;
	string m_SpeedParameter;
		Array Array; // Align
			int size;
			char data;
	string m_MirrorParameter;
		Array Array; // Align
			int size;
			char data;
	string m_CycleOffsetParameter;
		Array Array; // Align
			int size;
			char data;
	string m_TimeParameter;
		Array Array; // Align
			int size;
			char data;

Class HumanTemplate
HumanTemplate Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_BoneTemplate;
		Array Array;
			int size;
			pair data;
				string first;
					Array Array; // Align
						int size;
						char data;
				string second;
					Array Array; // Align
						int size;
						char data;

Class AnimatorStateMachine
AnimatorStateMachine Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_ChildStates;
		Array Array; // Align
			int size;
			ChildAnimatorState data;
				PPtr<AnimatorState> m_State;
					int m_FileID;
					SInt64 m_PathID;
				Vector3f m_Position;
					float x;
					float y;
					float z;
	vector m_ChildStateMachines;
		Array Array; // Align
			int size;
			ChildAnimatorStateMachine data;
				PPtr<AnimatorStateMachine> m_StateMachine;
					int m_FileID;
					SInt64 m_PathID;
				Vector3f m_Position;
					float x;
					float y;
					float z;
	vector m_AnyStateTransitions;
		Array Array; // Align
			int size;
			PPtr<AnimatorStateTransition> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_EntryTransitions;
		Array Array; // Align
			int size;
			PPtr<AnimatorTransition> data;
				int m_FileID;
				SInt64 m_PathID;
	map m_StateMachineTransitions;
		Array Array;
			int size;
			pair data;
				PPtr<AnimatorStateMachine> first;
					int m_FileID;
					SInt64 m_PathID;
				vector second;
					Array Array; // Align
						int size;
						PPtr<AnimatorTransition> data;
							int m_FileID;
							SInt64 m_PathID;
	vector m_StateMachineBehaviours;
		Array Array; // Align
			int size;
			PPtr<MonoBehaviour> data;
				int m_FileID;
				SInt64 m_PathID;
	Vector3f m_AnyStatePosition;
		float x;
		float y;
		float z;
	Vector3f m_EntryPosition;
		float x;
		float y;
		float z;
	Vector3f m_ExitPosition;
		float x;
		float y;
		float z;
	Vector3f m_ParentStateMachinePosition;
		float x;
		float y;
		float z;
	PPtr<AnimatorState> m_DefaultState;
		int m_FileID;
		SInt64 m_PathID;

Class PreviewAnimationClip
PreviewAnimationClip Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	bool m_Legacy;
	bool m_Compressed;
	bool m_UseHighQualityCurve; // Align
	vector m_RotationCurves;
		Array Array; // Align
			int size;
			QuaternionCurve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Quaternionf value;
									float x;
									float y;
									float z;
									float w;
								Quaternionf inSlope;
									float x;
									float y;
									float z;
									float w;
								Quaternionf outSlope;
									float x;
									float y;
									float z;
									float w;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_CompressedRotationCurves;
		Array Array; // Align
			int size;
			CompressedAnimationCurve data;
				string m_Path;
					Array Array; // Align
						int size;
						char data;
				PackedBitVector m_Times;
					unsigned int m_NumItems;
					vector m_Data;
						Array Array; // Align
							int size;
							UInt8 data;
					UInt8 m_BitSize; // Align
				PackedBitVector m_Values;
					unsigned int m_NumItems;
					vector m_Data; // Align
						Array Array; // Align
							int size;
							UInt8 data;
				PackedBitVector m_Slopes;
					unsigned int m_NumItems;
					float m_Range;
					float m_Start;
					vector m_Data;
						Array Array; // Align
							int size;
							UInt8 data;
					UInt8 m_BitSize; // Align
				int m_PreInfinity;
				int m_PostInfinity;
	vector m_EulerCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_PositionCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_ScaleCurves;
		Array Array; // Align
			int size;
			Vector3Curve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								Vector3f value;
									float x;
									float y;
									float z;
								Vector3f inSlope;
									float x;
									float y;
									float z;
								Vector3f outSlope;
									float x;
									float y;
									float z;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string path;
					Array Array; // Align
						int size;
						char data;
	vector m_FloatCurves;
		Array Array; // Align
			int size;
			FloatCurve data;
				AnimationCurve curve;
					vector m_Curve;
						Array Array; // Align
							int size;
							Keyframe data;
								float time;
								float value;
								float inSlope;
								float outSlope;
					int m_PreInfinity;
					int m_PostInfinity;
					int m_RotationOrder;
				string attribute;
					Array Array; // Align
						int size;
						char data;
				string path;
					Array Array; // Align
						int size;
						char data;
				Type* classID;
				PPtr<MonoScript> script;
					int m_FileID;
					SInt64 m_PathID;
	vector m_PPtrCurves;
		Array Array; // Align
			int size;
			PPtrCurve data;
				vector curve;
					Array Array; // Align
						int size;
						PPtrKeyframe data;
							float time;
							PPtr<Object> value;
								int m_FileID;
								SInt64 m_PathID;
				string attribute;
					Array Array; // Align
						int size;
						char data;
				string path;
					Array Array; // Align
						int size;
						char data;
				Type* classID;
				PPtr<MonoScript> script;
					int m_FileID;
					SInt64 m_PathID;
	float m_SampleRate;
	int m_WrapMode;
	AABB m_Bounds;
		Vector3f m_Center;
			float x;
			float y;
			float z;
		Vector3f m_Extent;
			float x;
			float y;
			float z;
	unsigned int m_MuscleClipSize;
	ClipMuscleConstant m_MuscleClip;
		HumanPose m_DeltaPose;
			xform m_RootX;
				float3 t;
					float x;
					float y;
					float z;
				float4 q;
					float x;
					float y;
					float z;
					float w;
				float3 s;
					float x;
					float y;
					float z;
			float3 m_LookAtPosition;
				float x;
				float y;
				float z;
			float4 m_LookAtWeight;
				float x;
				float y;
				float z;
				float w;
			staticvector m_GoalArray;
				Array Array;
					int size;
					HumanGoal data;
						xform m_X;
							float3 t;
								float x;
								float y;
								float z;
							float4 q;
								float x;
								float y;
								float z;
								float w;
							float3 s;
								float x;
								float y;
								float z;
						float m_WeightT;
						float m_WeightR;
						float3 m_HintT;
							float x;
							float y;
							float z;
						float m_HintWeightT;
			HandPose m_LeftHandPose;
				xform m_GrabX;
					float3 t;
						float x;
						float y;
						float z;
					float4 q;
						float x;
						float y;
						float z;
						float w;
					float3 s;
						float x;
						float y;
						float z;
				staticvector m_DoFArray;
					Array Array;
						int size;
						float data;
				float m_Override;
				float m_CloseOpen;
				float m_InOut;
				float m_Grab;
			HandPose m_RightHandPose;
				xform m_GrabX;
					float3 t;
						float x;
						float y;
						float z;
					float4 q;
						float x;
						float y;
						float z;
						float w;
					float3 s;
						float x;
						float y;
						float z;
				staticvector m_DoFArray;
					Array Array;
						int size;
						float data;
				float m_Override;
				float m_CloseOpen;
				float m_InOut;
				float m_Grab;
			staticvector m_DoFArray;
				Array Array;
					int size;
					float data;
			staticvector m_TDoFArray;
				Array Array;
					int size;
					float3 data;
						float x;
						float y;
						float z;
		xform m_StartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_StopX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_LeftFootStartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		xform m_RightFootStartX;
			float3 t;
				float x;
				float y;
				float z;
			float4 q;
				float x;
				float y;
				float z;
				float w;
			float3 s;
				float x;
				float y;
				float z;
		float3 m_AverageSpeed;
			float x;
			float y;
			float z;
		OffsetPtr m_Clip;
			Clip data;
				StreamedClip m_StreamedClip;
					vector data;
						Array Array;
							int size;
							unsigned int data;
					unsigned int curveCount;
				DenseClip m_DenseClip;
					int m_FrameCount;
					unsigned int m_CurveCount;
					float m_SampleRate;
					float m_BeginTime;
					vector m_SampleArray;
						Array Array;
							int size;
							float data;
				ConstantClip m_ConstantClip;
					vector data;
						Array Array;
							int size;
							float data;
				OffsetPtr m_Binding;
					ValueArrayConstant data;
						vector m_ValueArray;
							Array Array;
								int size;
								ValueConstant data;
									unsigned int m_ID;
									unsigned int m_Type;
									unsigned int m_Index;
		float m_StartTime;
		float m_StopTime;
		float m_OrientationOffsetY;
		float m_Level;
		float m_CycleOffset;
		float m_AverageAngularSpeed;
		staticvector m_IndexArray;
			Array Array;
				int size;
				int data;
		vector m_ValueArrayDelta;
			Array Array;
				int size;
				ValueDelta data;
					float m_Start;
					float m_Stop;
		vector m_ValueArrayReferencePose;
			Array Array;
				int size;
				float data;
		bool m_Mirror;
		bool m_LoopTime;
		bool m_LoopBlend;
		bool m_LoopBlendOrientation;
		bool m_LoopBlendPositionY;
		bool m_LoopBlendPositionXZ;
		bool m_StartAtOrigin;
		bool m_KeepOriginalOrientation;
		bool m_KeepOriginalPositionY;
		bool m_KeepOriginalPositionXZ;
		bool m_HeightFromFeet; // Align
	AnimationClipBindingConstant m_ClipBindingConstant;
		vector genericBindings;
			Array Array; // Align
				int size;
				GenericBinding data;
					unsigned int path;
					unsigned int attribute;
					PPtr<Object> script;
						int m_FileID;
						SInt64 m_PathID;
					int typeID;
					UInt8 customType;
					UInt8 isPPtrCurve; // Align
		vector pptrCurveMapping;
			Array Array; // Align
				int size;
				PPtr<Object> data;
					int m_FileID;
					SInt64 m_PathID;
	vector m_Events;
		Array Array; // Align
			int size;
			AnimationEvent data;
				float time;
				string functionName;
					Array Array; // Align
						int size;
						char data;
				string data;
					Array Array; // Align
						int size;
						char data;
				PPtr<Object> objectReferenceParameter;
					int m_FileID;
					SInt64 m_PathID;
				float floatParameter;
				int intParameter;
				int messageOptions;

Class AnimatorTransition
AnimatorTransition Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Conditions;
		Array Array; // Align
			int size;
			AnimatorCondition data;
				int m_ConditionMode;
				string m_ConditionEvent;
					Array Array; // Align
						int size;
						char data;
				float m_EventTreshold;
	PPtr<AnimatorStateMachine> m_DstStateMachine;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AnimatorState> m_DstState;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Solo;
	bool m_Mute;
	bool m_IsExit; // Align

Class SpeedTreeImporter
SpeedTreeImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	ColorRGBA m_MainColor;
		float r;
		float g;
		float b;
		float a;
	ColorRGBA m_HueVariation;
		float r;
		float g;
		float b;
		float a;
	float m_AlphaTestRef;
	int m_BestWindQuality;
	bool m_HasBillboard; // Align
	vector m_LODSettings;
		Array Array; // Align
			int size;
			PerLODSettings data;
				float height;
				bool castShadows;
				bool receiveShadows;
				bool useLightProbes; // Align
				int reflectionProbeUsage;
				bool enableBump;
				bool enableHue; // Align
				int windQuality;
	bool m_EnableSmoothLODTransition;
	bool m_AnimateCrossFading; // Align
	float m_BillboardTransitionCrossFadeWidth;
	float m_FadeOutWidth;
	float m_ScaleFactor;
	int m_MaterialVersion; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class AnimatorTransitionBase
AnimatorTransitionBase Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_Conditions;
		Array Array; // Align
			int size;
			AnimatorCondition data;
				int m_ConditionMode;
				string m_ConditionEvent;
					Array Array; // Align
						int size;
						char data;
				float m_EventTreshold;
	PPtr<AnimatorStateMachine> m_DstStateMachine;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<AnimatorState> m_DstState;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Solo;
	bool m_Mute;
	bool m_IsExit; // Align

Class SubstanceImporter
SubstanceImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	vector m_MaterialInstances; // Align
		Array Array; // Align
			int size;
			MaterialInstanceSettings data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string prototypeName;
					Array Array; // Align
						int size;
						char data;
				string shaderName;
					Array Array; // Align
						int size;
						char data;
				PPtr<Shader> shader;
					int m_FileID;
					SInt64 m_PathID;
				string shaderKeywords;
					Array Array; // Align
						int size;
						char data;
				int renderQueue;
				unsigned int lightmapFlags;
				vector inputs;
					Array Array; // Align
						int size;
						InputImportSettings data;
							string name;
								Array Array; // Align
									int size;
									char data;
							SubstanceValue value;
								float scalar[0];
								float scalar[1];
								float scalar[2];
								float scalar[3];
								PPtr<Texture2D> texture;
									int m_FileID;
									SInt64 m_PathID;
								string stringvalue;
									Array Array; // Align
										int size;
										char data;
				ProceduralMaterialInformation materialInformation;
					Vector2f m_Offset;
						float x;
						float y;
					Vector2f m_Scale;
						float x;
						float y;
					bool m_GenerateMipmaps; // Align
					int m_GenerateAllOutputs;
					int m_AnimationUpdateRate;
				UnityPropertySheet materialProperties;
					map m_TexEnvs;
						Array Array;
							int size;
							pair data;
								string first;
									Array Array; // Align
										int size;
										char data;
								UnityTexEnv second;
									PPtr<Texture> m_Texture;
										int m_FileID;
										SInt64 m_PathID;
									Vector2f m_Scale;
										float x;
										float y;
									Vector2f m_Offset;
										float x;
										float y;
					map m_Floats;
						Array Array;
							int size;
							pair data;
								string first;
									Array Array; // Align
										int size;
										char data;
								float second;
					map m_Colors;
						Array Array;
							int size;
							pair data;
								string first;
									Array Array; // Align
										int size;
										char data;
								ColorRGBA second;
									float r;
									float g;
									float b;
									float a;
				vector textureParameters;
					Array Array; // Align
						int size;
						InputImportSettings data;
							string name;
								Array Array; // Align
									int size;
									char data;
							int alphaSource;
							int filterMode;
							int aniso;
							int wrapMode;
				vector textureAssignments;
					Array Array; // Align
						int size;
						ProceduralTextureAssignment data;
							string shaderProp;
								Array Array; // Align
									int size;
									char data;
							PPtr<ProceduralMaterial> material;
								int m_FileID;
								SInt64 m_PathID;
							unsigned int baseUID;
				vector buildTargetSettings;
					Array Array; // Align
						int size;
						BuildTargetSettings data;
							string m_BuildTarget;
								Array Array; // Align
									int size;
									char data;
							int m_TextureWidth;
							int m_TextureHeight;
							int m_TextureFormat;
							int m_LoadingBehavior;
	set m_DeletedPrototypes;
		Array Array;
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_MaterialImportOutputs; // Align
		Array Array; // Align
			int size;
			MaterialImportOutput data;
				BuildTargetSettings currentSettings;
					string m_BuildTarget;
						Array Array; // Align
							int size;
							char data;
					int m_TextureWidth;
					int m_TextureHeight;
					int m_TextureFormat;
					int m_LoadingBehavior;
				int baked;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class LightmapParameters
LightmapParameters Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	float resolution;
	float clusterResolution;
	int irradianceBudget;
	int irradianceQuality;
	float backFaceTolerance;
	int isTransparent;
	float modellingTolerance;
	int systemTag;
	int edgeStitching;
	int blurRadius;
	int directLightQuality;
	int antiAliasingSamples;
	int bakedLightmapTag;
	float pushoff;
	int AOQuality;
	int AOAntiAliasingSamples;

Class LightingDataAsset
LightingDataAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	PPtr<SceneAsset> m_Scene;
		int m_FileID;
		SInt64 m_PathID;
	vector m_Lightmaps;
		Array Array; // Align
			int size;
			LightmapData data;
				PPtr<Texture2D> m_Lightmap;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<Texture2D> m_DirLightmap;
					int m_FileID;
					SInt64 m_PathID;
				PPtr<Texture2D> m_ShadowMask;
					int m_FileID;
					SInt64 m_PathID;
	PPtr<LightProbes> m_LightProbes;
		int m_FileID;
		SInt64 m_PathID;
	int m_LightmapsMode;
	SphericalHarmonicsL2 m_BakedAmbientProbeInLinear;
		float sh[ 0];
		float sh[ 1];
		float sh[ 2];
		float sh[ 3];
		float sh[ 4];
		float sh[ 5];
		float sh[ 6];
		float sh[ 7];
		float sh[ 8];
		float sh[ 9];
		float sh[10];
		float sh[11];
		float sh[12];
		float sh[13];
		float sh[14];
		float sh[15];
		float sh[16];
		float sh[17];
		float sh[18];
		float sh[19];
		float sh[20];
		float sh[21];
		float sh[22];
		float sh[23];
		float sh[24];
		float sh[25];
		float sh[26];
	vector m_LightmappedRendererData;
		Array Array; // Align
			int size;
			RendererData data;
				PPtr<Mesh> uvMesh;
					int m_FileID;
					SInt64 m_PathID;
				Vector4f terrainDynamicUVST;
					float x;
					float y;
					float z;
					float w;
				Vector4f terrainChunkDynamicUVST;
					float x;
					float y;
					float z;
					float w;
				UInt16 lightmapIndex;
				UInt16 lightmapIndexDynamic;
				Vector4f lightmapST;
					float x;
					float y;
					float z;
					float w;
				Vector4f lightmapSTDynamic;
					float x;
					float y;
					float z;
					float w;
	vector m_LightmappedRendererDataIDs;
		Array Array; // Align
			int size;
			SceneObjectIdentifier data;
				SInt64 targetObject;
				SInt64 targetPrefab;
	EnlightenSceneMapping m_EnlightenSceneMapping;
		vector m_Renderers;
			Array Array; // Align
				int size;
				EnlightenRendererInformation data;
					PPtr<Object> renderer;
						int m_FileID;
						SInt64 m_PathID;
					Vector4f dynamicLightmapSTInSystem;
						float x;
						float y;
						float z;
						float w;
					int systemId;
					Hash128 instanceHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
		vector m_Systems;
			Array Array; // Align
				int size;
				EnlightenSystemInformation data;
					unsigned int rendererIndex;
					unsigned int rendererSize;
					int atlasIndex;
					int atlasOffsetX;
					int atlasOffsetY;
					Hash128 inputSystemHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					Hash128 radiositySystemHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
		vector m_Probesets;
			Array Array; // Align
				int size;
				Hash128 data;
					UInt8 bytes[0];
					UInt8 bytes[1];
					UInt8 bytes[2];
					UInt8 bytes[3];
					UInt8 bytes[4];
					UInt8 bytes[5];
					UInt8 bytes[6];
					UInt8 bytes[7];
					UInt8 bytes[8];
					UInt8 bytes[9];
					UInt8 bytes[10];
					UInt8 bytes[11];
					UInt8 bytes[12];
					UInt8 bytes[13];
					UInt8 bytes[14];
					UInt8 bytes[15];
		vector m_SystemAtlases;
			Array Array; // Align
				int size;
				EnlightenSystemAtlasInformation data;
					int atlasSize;
					Hash128 atlasHash;
						UInt8 bytes[0];
						UInt8 bytes[1];
						UInt8 bytes[2];
						UInt8 bytes[3];
						UInt8 bytes[4];
						UInt8 bytes[5];
						UInt8 bytes[6];
						UInt8 bytes[7];
						UInt8 bytes[8];
						UInt8 bytes[9];
						UInt8 bytes[10];
						UInt8 bytes[11];
						UInt8 bytes[12];
						UInt8 bytes[13];
						UInt8 bytes[14];
						UInt8 bytes[15];
					int firstSystemId;
		vector m_TerrainChunks;
			Array Array; // Align
				int size;
				EnlightenTerrainChunksInformation data;
					int firstSystemId;
					int numChunksInX;
					int numChunksInY;
	vector m_EnlightenSceneMappingRendererIDs;
		Array Array; // Align
			int size;
			SceneObjectIdentifier data;
				SInt64 targetObject;
				SInt64 targetPrefab;
	vector m_Lights;
		Array Array; // Align
			int size;
			SceneObjectIdentifier data;
				SInt64 targetObject;
				SInt64 targetPrefab;
	vector m_LightBakingOutputs;
		Array Array; // Align
			int size;
			LightBakingOutput data;
				int probeOcclusionLightIndex;
				int occlusionMaskChannel;
				LightmapBakeMode lightmapBakeMode;
					int lightmapBakeType;
					int mixedLightingMode;
				bool isBaked; // Align
	vector m_BakedReflectionProbeCubemaps;
		Array Array; // Align
			int size;
			PPtr<Texture> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_BakedReflectionProbes;
		Array Array; // Align
			int size;
			SceneObjectIdentifier data;
				SInt64 targetObject;
				SInt64 targetPrefab;
	vector m_EnlightenData;
		Array Array; // Align
			int size;
			UInt8 data;
	int m_EnlightenDataVersion;

Class SketchUpImporter
SketchUpImporter Base;
	bool m_GenerateBackFace;
	bool m_MergeCoplanarFaces; // Align
	vector m_SelectedNodes;
		Array Array; // Align
			int size;
			int data;
	Hash128 m_AssetHash;
		UInt8 bytes[0];
		UInt8 bytes[1];
		UInt8 bytes[2];
		UInt8 bytes[3];
		UInt8 bytes[4];
		UInt8 bytes[5];
		UInt8 bytes[6];
		UInt8 bytes[7];
		UInt8 bytes[8];
		UInt8 bytes[9];
		UInt8 bytes[10];
		UInt8 bytes[11];
		UInt8 bytes[12];
		UInt8 bytes[13];
		UInt8 bytes[14];
		UInt8 bytes[15];
	double m_Longitude;
	double m_Latitude;
	double m_NorthCorrection;
	int m_FileUnit; // Align
	SketchUpImportData m_SketchUpImportData;
		SketchUpImportCamera defaultCamera;
			Vector3f position;
				float x;
				float y;
				float z;
			Vector3f lookAt;
				float x;
				float y;
				float z;
			Vector3f up;
				float x;
				float y;
				float z;
			float fov;
			float aspectRatio;
			float orthoSize;
			int isPerspective; // Align
		vector scenes;
			Array Array; // Align
				int size;
				SketchUpImportScene data;
					SketchUpImportCamera camera;
						Vector3f position;
							float x;
							float y;
							float z;
						Vector3f lookAt;
							float x;
							float y;
							float z;
						Vector3f up;
							float x;
							float y;
							float z;
						float fov;
						float aspectRatio;
						float orthoSize;
						int isPerspective; // Align
					string name; // Align
						Array Array; // Align
							int size;
							char data;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_FileIDToRecycleName;
		Array Array;
			int size;
			pair data;
				SInt64 first;
				string second;
					Array Array; // Align
						int size;
						char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	bool m_ImportMaterials;
	bool m_SupportsEmbeddedMaterials; // Align
	int m_MaterialName;
	int m_MaterialSearch;
	int m_MaterialLocation;
	set m_Materials;
		Array Array;
			int size;
			SourceAssetIdentifier data;
				string type;
					Array Array; // Align
						int size;
						char data;
				string assembly;
					Array Array; // Align
						int size;
						char data;
				string name;
					Array Array; // Align
						int size;
						char data;
	int m_LegacyGenerateAnimations;
	bool m_BakeSimulation;
	bool m_ResampleCurves;
	bool m_OptimizeGameObjects; // Align
	string m_MotionNodeName;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_RigImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportErrors;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationImportWarnings;
		Array Array; // Align
			int size;
			char data;
	string m_AnimationRetargetingWarnings;
		Array Array; // Align
			int size;
			char data;
	bool m_AnimationDoRetargetingWarnings;
	bool m_ImportAnimatedCustomProperties; // Align
	int m_AnimationCompression;
	float m_AnimationRotationError;
	float m_AnimationPositionError;
	float m_AnimationScaleError;
	int m_AnimationWrapMode;
	vector m_ExtraExposedTransformPaths;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ExtraUserProperties;
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	vector m_ClipAnimations;
		Array Array; // Align
			int size;
			ClipAnimationInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string takeName;
					Array Array; // Align
						int size;
						char data;
				float firstFrame;
				float lastFrame;
				int wrapMode;
				float orientationOffsetY;
				float level;
				float cycleOffset;
				bool loop;
				bool hasAdditiveReferencePose;
				bool loopTime;
				bool loopBlend;
				bool loopBlendOrientation;
				bool loopBlendPositionY;
				bool loopBlendPositionXZ;
				bool keepOriginalOrientation;
				bool keepOriginalPositionY;
				bool keepOriginalPositionXZ;
				bool heightFromFeet;
				bool mirror; // Align
				vector bodyMask;
					Array Array; // Align
						int size;
						unsigned int data;
				vector curves;
					Array Array; // Align
						int size;
						ClipAnimationInfoCurve data;
							string name;
								Array Array; // Align
									int size;
									char data;
							AnimationCurve curve;
								vector m_Curve;
									Array Array; // Align
										int size;
										Keyframe data;
											float time;
											float value;
											float inSlope;
											float outSlope;
								int m_PreInfinity;
								int m_PostInfinity;
								int m_RotationOrder;
				vector events;
					Array Array; // Align
						int size;
						AnimationEvent data;
							float time;
							string functionName;
								Array Array; // Align
									int size;
									char data;
							string data;
								Array Array; // Align
									int size;
									char data;
							PPtr<Object> objectReferenceParameter;
								int m_FileID;
								SInt64 m_PathID;
							float floatParameter;
							int intParameter;
							int messageOptions;
				vector transformMask;
					Array Array; // Align
						int size;
						TransformMaskElement data;
							string m_Path;
								Array Array; // Align
									int size;
									char data;
							float m_Weight;
				int maskType;
				PPtr<AvatarMask> maskSource;
					int m_FileID;
					SInt64 m_PathID;
				float additiveReferencePoseFrame;
	bool m_IsReadable; // Align
	vector m_LODScreenPercentages;
		Array Array; // Align
			int size;
			float data;
	float m_GlobalScale;
	int m_MeshCompression;
	bool m_AddColliders;
	bool m_ImportVisibility;
	bool m_ImportBlendShapes;
	bool m_ImportCameras;
	bool m_ImportLights; // Align
	bool swapUVChannels;
	bool generateSecondaryUV;
	bool m_UseFileUnits;
	bool optimizeMeshForGPU;
	bool keepQuads;
	bool weldVertices;
	bool m_PreserveHierarchy; // Align
	int indexFormat;
	float secondaryUVAngleDistortion;
	float secondaryUVAreaDistortion;
	float secondaryUVHardAngle;
	float secondaryUVPackMargin;
	bool m_UseFileScale; // Align
	float m_FileScale; // Align
	float normalSmoothAngle; // Align
	int normalImportMode;
	int tangentImportMode;
	int normalCalculationMode; // Align
	vector m_ImportedTakeInfos;
		Array Array; // Align
			int size;
			TakeInfo data;
				string name;
					Array Array; // Align
						int size;
						char data;
				string defaultClipName;
					Array Array; // Align
						int size;
						char data;
				float startTime;
				float stopTime;
				float bakeStartTime;
				float bakeStopTime;
				float sampleRate;
				PPtr<AnimationClip> clip;
					int m_FileID;
					SInt64 m_PathID;
	vector m_ReferencedClips;
		Array Array; // Align
			int size;
			GUID data;
				unsigned int data[0];
				unsigned int data[1];
				unsigned int data[2];
				unsigned int data[3];
	vector m_ImportedRoots;
		Array Array; // Align
			int size;
			PPtr<GameObject> data;
				int m_FileID;
				SInt64 m_PathID;
	bool m_HasExtraRoot;
	bool m_HasEmbeddedTextures; // Align
	bool m_ImportAnimation;
	bool m_CopyAvatar; // Align
	HumanDescription m_HumanDescription;
		vector m_Human;
			Array Array; // Align
				int size;
				HumanBone data;
					string m_BoneName;
						Array Array; // Align
							int size;
							char data;
					string m_HumanName;
						Array Array; // Align
							int size;
							char data;
					SkeletonBoneLimit m_Limit;
						Vector3f m_Min;
							float x;
							float y;
							float z;
						Vector3f m_Max;
							float x;
							float y;
							float z;
						Vector3f m_Value;
							float x;
							float y;
							float z;
						float m_Length;
						bool m_Modified; // Align
		vector m_Skeleton;
			Array Array; // Align
				int size;
				SkeletonBone data;
					string m_Name;
						Array Array; // Align
							int size;
							char data;
					string m_ParentName;
						Array Array; // Align
							int size;
							char data;
					Vector3f m_Position;
						float x;
						float y;
						float z;
					Quaternionf m_Rotation;
						float x;
						float y;
						float z;
						float w;
					Vector3f m_Scale;
						float x;
						float y;
						float z;
		float m_ArmTwist;
		float m_ForeArmTwist;
		float m_UpperLegTwist;
		float m_LegTwist;
		float m_ArmStretch;
		float m_LegStretch;
		float m_FeetSpacing;
		string m_RootMotionBoneName;
			Array Array; // Align
				int size;
				char data;
		Quaternionf m_RootMotionBoneRotation;
			float x;
			float y;
			float z;
			float w;
		bool m_HasTranslationDoF;
		bool m_HasExtraRoot;
		bool m_SkeletonHasParents; // Align
	PPtr<Avatar> m_LastHumanDescriptionAvatarSource;
		int m_FileID;
		SInt64 m_PathID;
	int m_AnimationType;
	int m_HumanoidOversampling;
	bool m_AdditionalBone; // Align
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class BuildReport
BuildReport Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	BuildSummary m_Summary;
		string name;
			Array Array; // Align
				int size;
				char data;
		GUID buildGUID;
			unsigned int data[0];
			unsigned int data[1];
			unsigned int data[2];
			unsigned int data[3];
		string platformName;
			Array Array; // Align
				int size;
				char data;
		string platformGroupName;
			Array Array; // Align
				int size;
				char data;
		int options;
		int assetBundleOptions;
		string outputPath;
			Array Array; // Align
				int size;
				char data;
		unsigned int crc;
		UInt64 totalSize;
		UInt64 totalTimeMS;
		int totalErrors;
		int totalWarnings;
		int buildType;
		int buildResult; // Align
	vector m_Files;
		Array Array; // Align
			int size;
			BuildReportFile data;
				string path;
					Array Array; // Align
						int size;
						char data;
				string role;
					Array Array; // Align
						int size;
						char data;
				unsigned int id;
				UInt64 totalSize;
	vector m_BuildSteps;
		Array Array; // Align
			int size;
			BuildStepInfo data;
				string stepName;
					Array Array; // Align
						int size;
						char data;
				UInt64 duration;
				vector messages;
					Array Array; // Align
						int size;
						BuildStepMessage data;
							int type;
							string content;
								Array Array; // Align
									int size;
									char data;
	vector m_Appendices;
		Array Array; // Align
			int size;
			PPtr<Object> data;
				int m_FileID;
				SInt64 m_PathID;

Class PackedAssets
PackedAssets Base;
	unsigned int m_File;
	string m_ShortPath;
		Array Array; // Align
			int size;
			char data;
	UInt64 m_Overhead;
	vector m_Contents;
		Array Array; // Align
			int size;
			BuildReportPackedAssetInfo data;
				SInt64 fileID;
				Type* classID;
				int packedSize;
				GUID sourceAssetGUID;
					unsigned int data[0];
					unsigned int data[1];
					unsigned int data[2];
					unsigned int data[3];
				string buildTimeAssetPath;
					Array Array; // Align
						int size;
						char data;

Class VideoClipImporter
VideoClipImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects;
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	bool m_UseLegacyImporter; // Align
	float m_Quality;
	bool m_IsColorLinear; // Align
	int m_FrameRange;
	int m_StartFrame;
	int m_EndFrame;
	int m_ColorSpace;
	int m_Deinterlace;
	bool m_EncodeAlpha;
	bool m_FlipVertical;
	bool m_FlipHorizontal; // Align
	bool m_ImportAudio; // Align
	map m_TargetSettings;
		Array Array;
			int size;
			pair data;
				int first;
				VideoClipImporterTargetSettings second;
					bool enableTranscoding; // Align
					int codec;
					int resizeFormat;
					int aspectRatio; // Align
					int customWidth;
					int customHeight;
					int bitrateMode;
					int spatialQuality;
	VideoClipImporterOutput m_Output; // Align
		unsigned int sourcePixelAspectRatioNumerator;
		unsigned int sourcePixelAspectRatioDenominator;
		double sourceFrameRate;
		UInt64 sourceFileSize;
		vector sourceAudioChannelCount;
			Array Array; // Align
				int size;
				UInt16 data;
		bool sourceHasAlpha;
		bool transcodeSkipped; // Align
		vector sourceAudioSampleRate; // Align
			Array Array; // Align
				int size;
				unsigned int data;
		int originalWidth;
		int originalHeight;
		int originalFrameCount;
		VideoClipImporterTargetSettings encodedSettings; // Align
			bool enableTranscoding; // Align
			int codec;
			int resizeFormat;
			int aspectRatio; // Align
			int customWidth;
			int customHeight;
			int bitrateMode;
			int spatialQuality;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class int

Class bool

Class float

Class MonoObject

Class Collision

Class Vector3f

Class RootMotionData

Class Collision2D

Class AudioMixerLiveUpdateFloat

Class AudioMixerLiveUpdateBool

Class Polygon2D

Class void

Class TilemapCollider2D
TilemapCollider2D Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	float m_Density;
	PPtr<PhysicsMaterial2D> m_Material;
		int m_FileID;
		SInt64 m_PathID;
	bool m_IsTrigger;
	bool m_UsedByEffector;
	bool m_UsedByComposite; // Align
	Vector2f m_Offset;
		float x;
		float y;

Class Grid
Grid Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	Vector3f m_CellSize;
		float x;
		float y;
		float z;
	Vector3f m_CellGap;
		float x;
		float y;
		float z;
	int m_CellLayout;
	int m_CellSwizzle;

Class TilemapRenderer
TilemapRenderer Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	bool m_Enabled;
	UInt8 m_CastShadows;
	UInt8 m_ReceiveShadows;
	UInt8 m_DynamicOccludee;
	UInt8 m_MotionVectors;
	UInt8 m_LightProbeUsage;
	UInt8 m_ReflectionProbeUsage; // Align
	UInt16 m_LightmapIndex;
	UInt16 m_LightmapIndexDynamic;
	Vector4f m_LightmapTilingOffset;
		float x;
		float y;
		float z;
		float w;
	Vector4f m_LightmapTilingOffsetDynamic;
		float x;
		float y;
		float z;
		float w;
	vector m_Materials;
		Array Array; // Align
			int size;
			PPtr<Material> data;
				int m_FileID;
				SInt64 m_PathID;
	StaticBatchInfo m_StaticBatchInfo;
		UInt16 firstSubMesh;
		UInt16 subMeshCount;
	PPtr<Transform> m_StaticBatchRoot;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<Transform> m_ProbeAnchor;
		int m_FileID;
		SInt64 m_PathID;
	PPtr<GameObject> m_LightProbeVolumeOverride; // Align
		int m_FileID;
		SInt64 m_PathID;
	int m_SortingLayerID;
	SInt16 m_SortingLayer;
	SInt16 m_SortingOrder; // Align
	int3_storage m_ChunkSize;
		int x;
		int y;
		int z;
	unsigned int m_MaxChunkCount;
	unsigned int m_MaxFrameAge;
	int m_SortOrder;
	int m_MaskInteraction; // Align

Class SpriteAtlasDatabase
SpriteAtlasDatabase Base;

Class CachedSpriteAtlasRuntimeData
CachedSpriteAtlasRuntimeData Base;
	vector textures;
		Array Array; // Align
			int size;
			PPtr<Texture2D> data;
				int m_FileID;
				SInt64 m_PathID;
	vector alphaTextures;
		Array Array; // Align
			int size;
			PPtr<Texture2D> data;
				int m_FileID;
				SInt64 m_PathID;
	map frames;
		Array Array;
			int size;
			pair data;
				pair first;
					GUID first;
						unsigned int data[0];
						unsigned int data[1];
						unsigned int data[2];
						unsigned int data[3];
					SInt64 second;
				SpriteAtlasData second;
					PPtr<Texture2D> texture;
						int m_FileID;
						SInt64 m_PathID;
					PPtr<Texture2D> alphaTexture;
						int m_FileID;
						SInt64 m_PathID;
					Rectf textureRect;
						float x;
						float y;
						float width;
						float height;
					Vector2f textureRectOffset;
						float x;
						float y;
					Vector2f atlasRectOffset;
						float x;
						float y;
					Vector4f uvTransform;
						float x;
						float y;
						float z;
						float w;
					float downscaleMultiplier;
					unsigned int settingsRaw;

Class BuiltAssetBundleInfoSet
BuiltAssetBundleInfoSet Base;
	vector bundleInfos;
		Array Array; // Align
			int size;
			BuiltAssetBundleInfo data;
				string bundleName;
					Array Array; // Align
						int size;
						char data;
				unsigned int bundleArchiveFile;
				vector packagedFileIndices;
					Array Array; // Align
						int size;
						unsigned int data;

Class SpriteAtlas
SpriteAtlas Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	vector m_PackedSprites;
		Array Array; // Align
			int size;
			PPtr<Sprite> data;
				int m_FileID;
				SInt64 m_PathID;
	vector m_PackedSpriteNamesToIndex; // Align
		Array Array; // Align
			int size;
			string data;
				Array Array; // Align
					int size;
					char data;
	map m_RenderDataMap;
		Array Array;
			int size;
			pair data;
				pair first;
					GUID first;
						unsigned int data[0];
						unsigned int data[1];
						unsigned int data[2];
						unsigned int data[3];
					SInt64 second;
				SpriteAtlasData second;
					PPtr<Texture2D> texture;
						int m_FileID;
						SInt64 m_PathID;
					PPtr<Texture2D> alphaTexture;
						int m_FileID;
						SInt64 m_PathID;
					Rectf textureRect;
						float x;
						float y;
						float width;
						float height;
					Vector2f textureRectOffset;
						float x;
						float y;
					Vector2f atlasRectOffset;
						float x;
						float y;
					Vector4f uvTransform;
						float x;
						float y;
						float z;
						float w;
					float downscaleMultiplier;
					unsigned int settingsRaw;
	string m_Tag;
		Array Array; // Align
			int size;
			char data;
	bool m_IsVariant; // Align

Class AssemblyDefinitionAsset
AssemblyDefinitionAsset Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	string m_Script;
		Array Array; // Align
			int size;
			char data;

Class GameObjectRecorder
GameObjectRecorder Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;

Class LightingDataAssetParent
NamedObject Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;

Class LowerResBlitTexture
Texture Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	int m_ForcedFallbackFormat;
	bool m_DownscaleFallback; // Align

Class RenderPassAttachment
RenderPassAttachment Base;

Class GridLayout
Component Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;

Class AssemblyDefinitionImporter
AssemblyDefinitionImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_ExternalObjects; // Align
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;

Class Tilemap
Tilemap Base;
	PPtr<GameObject> m_GameObject;
		int m_FileID;
		SInt64 m_PathID;
	UInt8 m_Enabled; // Align
	map m_Tiles;
		Array Array;
			int size;
			pair data;
				int3_storage first;
					int x;
					int y;
					int z;
				Tile second;
					unsigned int m_TileIndex;
					unsigned int m_TileSpriteIndex;
					unsigned int m_TileMatrixIndex;
					unsigned int m_TileColorIndex;
					PPtr<GameObject> m_ObjectToInstantiate;
						int m_FileID;
						SInt64 m_PathID;
					int m_TileFlags;
					int m_ColliderType;
	map m_AnimatedTiles;
		Array Array;
			int size;
			pair data;
				int3_storage first;
					int x;
					int y;
					int z;
				TileAnimationData second;
					vector m_AnimatedSprites;
						Array Array; // Align
							int size;
							PPtr<Sprite> data;
								int m_FileID;
								SInt64 m_PathID;
					float m_AnimationSpeed;
					float m_AnimationTimeOffset;
					bool m_IsLooping; // Align
	vector m_TileAssetArray;
		Array Array; // Align
			int size;
			TilemapRefCountedData data;
				unsigned int m_RefCount;
				PPtr<Object> m_Data;
					int m_FileID;
					SInt64 m_PathID;
	vector m_TileSpriteArray;
		Array Array; // Align
			int size;
			TilemapRefCountedData data;
				unsigned int m_RefCount;
				PPtr<Sprite> m_Data;
					int m_FileID;
					SInt64 m_PathID;
	vector m_TileMatrixArray;
		Array Array; // Align
			int size;
			TilemapRefCountedData data;
				unsigned int m_RefCount;
				Matrix4x4f m_Data;
					float e00;
					float e01;
					float e02;
					float e03;
					float e10;
					float e11;
					float e12;
					float e13;
					float e20;
					float e21;
					float e22;
					float e23;
					float e30;
					float e31;
					float e32;
					float e33;
	vector m_TileColorArray;
		Array Array; // Align
			int size;
			TilemapRefCountedData data;
				unsigned int m_RefCount;
				ColorRGBA m_Data;
					float r;
					float g;
					float b;
					float a;
	float m_AnimationFrameRate;
	ColorRGBA m_Color;
		float r;
		float g;
		float b;
		float a;
	int3_storage m_Origin;
		int x;
		int y;
		int z;
	int3_storage m_Size;
		int x;
		int y;
		int z;
	Vector3f m_TileAnchor;
		float x;
		float y;
		float z;
	int m_TileOrientation; // Align
	Matrix4x4f m_TileOrientationMatrix;
		float e00;
		float e01;
		float e02;
		float e03;
		float e10;
		float e11;
		float e12;
		float e13;
		float e20;
		float e21;
		float e22;
		float e23;
		float e30;
		float e31;
		float e32;
		float e33;

Class ScriptedImporter
ScriptedImporter Base;
	string m_Name;
		Array Array; // Align
			int size;
			char data;
	map m_FileIDToRecycleName;
		Array Array;
			int size;
			pair data;
				SInt64 first;
				string second;
					Array Array; // Align
						int size;
						char data;
	map m_ExternalObjects; // Align
		Array Array;
			int size;
			pair data;
				SourceAssetIdentifier first;
					string type;
						Array Array; // Align
							int size;
							char data;
					string assembly;
						Array Array; // Align
							int size;
							char data;
					string name;
						Array Array; // Align
							int size;
							char data;
				PPtr<Object> second;
					int m_FileID;
					SInt64 m_PathID;
	string m_UserData;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleName;
		Array Array; // Align
			int size;
			char data;
	string m_AssetBundleVariant;
		Array Array; // Align
			int size;
			char data;
	PPtr<MonoScript> m_Script;
		int m_FileID;
		SInt64 m_PathID;

Class TilemapEditorUserSettings
TilemapEditorUserSettings Base;
	PPtr<GameObject> m_LastUsedPalette;
		int m_FileID;
		SInt64 m_PathID;
	int m_FocusMode; // Align

