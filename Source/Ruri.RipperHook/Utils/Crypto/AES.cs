// Simple, thoroughly commented implementation of 128-bit AES / Rijndael using C#
// Chris Hulbert - chris.hulbert@gmail.com - http://splinter.com.au/blog - http://github.com/chrishulbert/crypto
using System;
using System.Collections.Generic;

namespace Ruri.RipperHook.Crypto;
public static class AES
{
    static byte[] ShiftRowsTableInv = { 0x00, 0x0D, 0x0A, 0x07, 0x04, 0x01, 0x0E, 0x0B, 0x08, 0x05, 0x02, 0x0F, 0x0C, 0x09, 0x06, 0x03 };
    static byte[] LookupSBoxInv = { 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D };
    static byte[] LookupG9 = { 0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F, 0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77, 0x90, 0x99, 0x82, 0x8B, 0xB4, 0xBD, 0xA6, 0xAF, 0xD8, 0xD1, 0xCA, 0xC3, 0xFC, 0xF5, 0xEE, 0xE7, 0x3B, 0x32, 0x29, 0x20, 0x1F, 0x16, 0x0D, 0x04, 0x73, 0x7A, 0x61, 0x68, 0x57, 0x5E, 0x45, 0x4C, 0xAB, 0xA2, 0xB9, 0xB0, 0x8F, 0x86, 0x9D, 0x94, 0xE3, 0xEA, 0xF1, 0xF8, 0xC7, 0xCE, 0xD5, 0xDC, 0x76, 0x7F, 0x64, 0x6D, 0x52, 0x5B, 0x40, 0x49, 0x3E, 0x37, 0x2C, 0x25, 0x1A, 0x13, 0x08, 0x01, 0xE6, 0xEF, 0xF4, 0xFD, 0xC2, 0xCB, 0xD0, 0xD9, 0xAE, 0xA7, 0xBC, 0xB5, 0x8A, 0x83, 0x98, 0x91, 0x4D, 0x44, 0x5F, 0x56, 0x69, 0x60, 0x7B, 0x72, 0x05, 0x0C, 0x17, 0x1E, 0x21, 0x28, 0x33, 0x3A, 0xDD, 0xD4, 0xCF, 0xC6, 0xF9, 0xF0, 0xEB, 0xE2, 0x95, 0x9C, 0x87, 0x8E, 0xB1, 0xB8, 0xA3, 0xAA, 0xEC, 0xE5, 0xFE, 0xF7, 0xC8, 0xC1, 0xDA, 0xD3, 0xA4, 0xAD, 0xB6, 0xBF, 0x80, 0x89, 0x92, 0x9B, 0x7C, 0x75, 0x6E, 0x67, 0x58, 0x51, 0x4A, 0x43, 0x34, 0x3D, 0x26, 0x2F, 0x10, 0x19, 0x02, 0x0B, 0xD7, 0xDE, 0xC5, 0xCC, 0xF3, 0xFA, 0xE1, 0xE8, 0x9F, 0x96, 0x8D, 0x84, 0xBB, 0xB2, 0xA9, 0xA0, 0x47, 0x4E, 0x55, 0x5C, 0x63, 0x6A, 0x71, 0x78, 0x0F, 0x06, 0x1D, 0x14, 0x2B, 0x22, 0x39, 0x30, 0x9A, 0x93, 0x88, 0x81, 0xBE, 0xB7, 0xAC, 0xA5, 0xD2, 0xDB, 0xC0, 0xC9, 0xF6, 0xFF, 0xE4, 0xED, 0x0A, 0x03, 0x18, 0x11, 0x2E, 0x27, 0x3C, 0x35, 0x42, 0x4B, 0x50, 0x59, 0x66, 0x6F, 0x74, 0x7D, 0xA1, 0xA8, 0xB3, 0xBA, 0x85, 0x8C, 0x97, 0x9E, 0xE9, 0xE0, 0xFB, 0xF2, 0xCD, 0xC4, 0xDF, 0xD6, 0x31, 0x38, 0x23, 0x2A, 0x15, 0x1C, 0x07, 0x0E, 0x79, 0x70, 0x6B, 0x62, 0x5D, 0x54, 0x4F, 0x46 };
    static byte[] LookupG11 = { 0x00, 0x0B, 0x16, 0x1D, 0x2C, 0x27, 0x3A, 0x31, 0x58, 0x53, 0x4E, 0x45, 0x74, 0x7F, 0x62, 0x69, 0xB0, 0xBB, 0xA6, 0xAD, 0x9C, 0x97, 0x8A, 0x81, 0xE8, 0xE3, 0xFE, 0xF5, 0xC4, 0xCF, 0xD2, 0xD9, 0x7B, 0x70, 0x6D, 0x66, 0x57, 0x5C, 0x41, 0x4A, 0x23, 0x28, 0x35, 0x3E, 0x0F, 0x04, 0x19, 0x12, 0xCB, 0xC0, 0xDD, 0xD6, 0xE7, 0xEC, 0xF1, 0xFA, 0x93, 0x98, 0x85, 0x8E, 0xBF, 0xB4, 0xA9, 0xA2, 0xF6, 0xFD, 0xE0, 0xEB, 0xDA, 0xD1, 0xCC, 0xC7, 0xAE, 0xA5, 0xB8, 0xB3, 0x82, 0x89, 0x94, 0x9F, 0x46, 0x4D, 0x50, 0x5B, 0x6A, 0x61, 0x7C, 0x77, 0x1E, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2F, 0x8D, 0x86, 0x9B, 0x90, 0xA1, 0xAA, 0xB7, 0xBC, 0xD5, 0xDE, 0xC3, 0xC8, 0xF9, 0xF2, 0xEF, 0xE4, 0x3D, 0x36, 0x2B, 0x20, 0x11, 0x1A, 0x07, 0x0C, 0x65, 0x6E, 0x73, 0x78, 0x49, 0x42, 0x5F, 0x54, 0xF7, 0xFC, 0xE1, 0xEA, 0xDB, 0xD0, 0xCD, 0xC6, 0xAF, 0xA4, 0xB9, 0xB2, 0x83, 0x88, 0x95, 0x9E, 0x47, 0x4C, 0x51, 0x5A, 0x6B, 0x60, 0x7D, 0x76, 0x1F, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2E, 0x8C, 0x87, 0x9A, 0x91, 0xA0, 0xAB, 0xB6, 0xBD, 0xD4, 0xDF, 0xC2, 0xC9, 0xF8, 0xF3, 0xEE, 0xE5, 0x3C, 0x37, 0x2A, 0x21, 0x10, 0x1B, 0x06, 0x0D, 0x64, 0x6F, 0x72, 0x79, 0x48, 0x43, 0x5E, 0x55, 0x01, 0x0A, 0x17, 0x1C, 0x2D, 0x26, 0x3B, 0x30, 0x59, 0x52, 0x4F, 0x44, 0x75, 0x7E, 0x63, 0x68, 0xB1, 0xBA, 0xA7, 0xAC, 0x9D, 0x96, 0x8B, 0x80, 0xE9, 0xE2, 0xFF, 0xF4, 0xC5, 0xCE, 0xD3, 0xD8, 0x7A, 0x71, 0x6C, 0x67, 0x56, 0x5D, 0x40, 0x4B, 0x22, 0x29, 0x34, 0x3F, 0x0E, 0x05, 0x18, 0x13, 0xCA, 0xC1, 0xDC, 0xD7, 0xE6, 0xED, 0xF0, 0xFB, 0x92, 0x99, 0x84, 0x8F, 0xBE, 0xB5, 0xA8, 0xA3 };
    static byte[] LookupG13 = { 0x00, 0x0D, 0x1A, 0x17, 0x34, 0x39, 0x2E, 0x23, 0x68, 0x65, 0x72, 0x7F, 0x5C, 0x51, 0x46, 0x4B, 0xD0, 0xDD, 0xCA, 0xC7, 0xE4, 0xE9, 0xFE, 0xF3, 0xB8, 0xB5, 0xA2, 0xAF, 0x8C, 0x81, 0x96, 0x9B, 0xBB, 0xB6, 0xA1, 0xAC, 0x8F, 0x82, 0x95, 0x98, 0xD3, 0xDE, 0xC9, 0xC4, 0xE7, 0xEA, 0xFD, 0xF0, 0x6B, 0x66, 0x71, 0x7C, 0x5F, 0x52, 0x45, 0x48, 0x03, 0x0E, 0x19, 0x14, 0x37, 0x3A, 0x2D, 0x20, 0x6D, 0x60, 0x77, 0x7A, 0x59, 0x54, 0x43, 0x4E, 0x05, 0x08, 0x1F, 0x12, 0x31, 0x3C, 0x2B, 0x26, 0xBD, 0xB0, 0xA7, 0xAA, 0x89, 0x84, 0x93, 0x9E, 0xD5, 0xD8, 0xCF, 0xC2, 0xE1, 0xEC, 0xFB, 0xF6, 0xD6, 0xDB, 0xCC, 0xC1, 0xE2, 0xEF, 0xF8, 0xF5, 0xBE, 0xB3, 0xA4, 0xA9, 0x8A, 0x87, 0x90, 0x9D, 0x06, 0x0B, 0x1C, 0x11, 0x32, 0x3F, 0x28, 0x25, 0x6E, 0x63, 0x74, 0x79, 0x5A, 0x57, 0x40, 0x4D, 0xDA, 0xD7, 0xC0, 0xCD, 0xEE, 0xE3, 0xF4, 0xF9, 0xB2, 0xBF, 0xA8, 0xA5, 0x86, 0x8B, 0x9C, 0x91, 0x0A, 0x07, 0x10, 0x1D, 0x3E, 0x33, 0x24, 0x29, 0x62, 0x6F, 0x78, 0x75, 0x56, 0x5B, 0x4C, 0x41, 0x61, 0x6C, 0x7B, 0x76, 0x55, 0x58, 0x4F, 0x42, 0x09, 0x04, 0x13, 0x1E, 0x3D, 0x30, 0x27, 0x2A, 0xB1, 0xBC, 0xAB, 0xA6, 0x85, 0x88, 0x9F, 0x92, 0xD9, 0xD4, 0xC3, 0xCE, 0xED, 0xE0, 0xF7, 0xFA, 0xB7, 0xBA, 0xAD, 0xA0, 0x83, 0x8E, 0x99, 0x94, 0xDF, 0xD2, 0xC5, 0xC8, 0xEB, 0xE6, 0xF1, 0xFC, 0x67, 0x6A, 0x7D, 0x70, 0x53, 0x5E, 0x49, 0x44, 0x0F, 0x02, 0x15, 0x18, 0x3B, 0x36, 0x21, 0x2C, 0x0C, 0x01, 0x16, 0x1B, 0x38, 0x35, 0x22, 0x2F, 0x64, 0x69, 0x7E, 0x73, 0x50, 0x5D, 0x4A, 0x47, 0xDC, 0xD1, 0xC6, 0xCB, 0xE8, 0xE5, 0xF2, 0xFF, 0xB4, 0xB9, 0xAE, 0xA3, 0x80, 0x8D, 0x9A, 0x97 };
    static byte[] LookupG14 = { 0x00, 0x0E, 0x1C, 0x12, 0x38, 0x36, 0x24, 0x2A, 0x70, 0x7E, 0x6C, 0x62, 0x48, 0x46, 0x54, 0x5A, 0xE0, 0xEE, 0xFC, 0xF2, 0xD8, 0xD6, 0xC4, 0xCA, 0x90, 0x9E, 0x8C, 0x82, 0xA8, 0xA6, 0xB4, 0xBA, 0xDB, 0xD5, 0xC7, 0xC9, 0xE3, 0xED, 0xFF, 0xF1, 0xAB, 0xA5, 0xB7, 0xB9, 0x93, 0x9D, 0x8F, 0x81, 0x3B, 0x35, 0x27, 0x29, 0x03, 0x0D, 0x1F, 0x11, 0x4B, 0x45, 0x57, 0x59, 0x73, 0x7D, 0x6F, 0x61, 0xAD, 0xA3, 0xB1, 0xBF, 0x95, 0x9B, 0x89, 0x87, 0xDD, 0xD3, 0xC1, 0xCF, 0xE5, 0xEB, 0xF9, 0xF7, 0x4D, 0x43, 0x51, 0x5F, 0x75, 0x7B, 0x69, 0x67, 0x3D, 0x33, 0x21, 0x2F, 0x05, 0x0B, 0x19, 0x17, 0x76, 0x78, 0x6A, 0x64, 0x4E, 0x40, 0x52, 0x5C, 0x06, 0x08, 0x1A, 0x14, 0x3E, 0x30, 0x22, 0x2C, 0x96, 0x98, 0x8A, 0x84, 0xAE, 0xA0, 0xB2, 0xBC, 0xE6, 0xE8, 0xFA, 0xF4, 0xDE, 0xD0, 0xC2, 0xCC, 0x41, 0x4F, 0x5D, 0x53, 0x79, 0x77, 0x65, 0x6B, 0x31, 0x3F, 0x2D, 0x23, 0x09, 0x07, 0x15, 0x1B, 0xA1, 0xAF, 0xBD, 0xB3, 0x99, 0x97, 0x85, 0x8B, 0xD1, 0xDF, 0xCD, 0xC3, 0xE9, 0xE7, 0xF5, 0xFB, 0x9A, 0x94, 0x86, 0x88, 0xA2, 0xAC, 0xBE, 0xB0, 0xEA, 0xE4, 0xF6, 0xF8, 0xD2, 0xDC, 0xCE, 0xC0, 0x7A, 0x74, 0x66, 0x68, 0x42, 0x4C, 0x5E, 0x50, 0x0A, 0x04, 0x16, 0x18, 0x32, 0x3C, 0x2E, 0x20, 0xEC, 0xE2, 0xF0, 0xFE, 0xD4, 0xDA, 0xC8, 0xC6, 0x9C, 0x92, 0x80, 0x8E, 0xA4, 0xAA, 0xB8, 0xB6, 0x0C, 0x02, 0x10, 0x1E, 0x34, 0x3A, 0x28, 0x26, 0x7C, 0x72, 0x60, 0x6E, 0x44, 0x4A, 0x58, 0x56, 0x37, 0x39, 0x2B, 0x25, 0x0F, 0x01, 0x13, 0x1D, 0x47, 0x49, 0x5B, 0x55, 0x7F, 0x71, 0x63, 0x6D, 0xD7, 0xD9, 0xCB, 0xC5, 0xEF, 0xE1, 0xF3, 0xFD, 0xA7, 0xA9, 0xBB, 0xB5, 0x9F, 0x91, 0x83, 0x8D };

    private static void KeyScheduleCore(byte[] a, int i)
    {
        byte temp = a[0];
        a[0] = a[1];
        a[1] = a[2];
        a[2] = a[3];
        a[3] = temp;
        AES.SubBytes(a);
        int num = 0;
        a[num] ^= AES.LookupRcon[i];
    }
    private static void Xor(byte[] a, List<byte> b, int offB)
    {
        for (int i = 0; i < a.Length; i++)
        {
            int num = i;
            a[num] ^= b[offB + i];
        }
    }

    private static void SubBytes(byte[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = AES.LookupSBox[(int)a[i]];
        }
    }
    static void SubBytesInv(byte[] a)
    {
        for (int i = 0; i < a.Length; i++)
            a[i] = LookupSBoxInv[a[i]];
    }
    static void XorRoundKey(byte[] state, byte[] keys, int round)
    {
        for (int i = 0; i < 0x10; i++)
            state[i] ^= keys[i + round * 0x10];
    }
    private static void ShiftRows(byte[] state)
    {
        byte[] temp = new byte[16];
        Array.Copy(state, temp, 16);
        for (int i = 0; i < 16; i++)
        {
            state[i] = temp[(int)AES.ShiftRowsTable[i]];
        }
    }

    static void ShiftRowsInv(byte[] state)
    {
        byte[] temp = new byte[0x10];
        Array.Copy(state, temp, 0x10);
        for (int i = 0; i < 0x10; i++)
            state[i] = temp[ShiftRowsTableInv[i]];
    }
    private static void MixCol(byte[] state, int off)
    {
        byte a0 = state[off];
        byte a = state[off + 1];
        byte a2 = state[off + 2];
        byte a3 = state[off + 3];
        state[off] = (byte)(AES.LookupG2[(int)a0] ^ AES.LookupG3[(int)a] ^ a2 ^ a3);
        state[off + 1] = (byte)(AES.LookupG2[(int)a] ^ AES.LookupG3[(int)a2] ^ a3 ^ a0);
        state[off + 2] = (byte)(AES.LookupG2[(int)a2] ^ AES.LookupG3[(int)a3] ^ a0 ^ a);
        state[off + 3] = (byte)(AES.LookupG2[(int)a3] ^ AES.LookupG3[(int)a0] ^ a ^ a2);
    }

    static void MixColInv(byte[] state, int off)
    {
        byte a0 = state[off + 0];
        byte a1 = state[off + 1];
        byte a2 = state[off + 2];
        byte a3 = state[off + 3];
        state[off + 0] = (byte)(LookupG14[a0] ^ LookupG9[a3] ^ LookupG13[a2] ^ LookupG11[a1]);
        state[off + 1] = (byte)(LookupG14[a1] ^ LookupG9[a0] ^ LookupG13[a3] ^ LookupG11[a2]);
        state[off + 2] = (byte)(LookupG14[a2] ^ LookupG9[a1] ^ LookupG13[a0] ^ LookupG11[a3]);
        state[off + 3] = (byte)(LookupG14[a3] ^ LookupG9[a2] ^ LookupG13[a1] ^ LookupG11[a0]);
    }
    private static void MixCols(byte[] state)
    {
        AES.MixCol(state, 0);
        AES.MixCol(state, 4);
        AES.MixCol(state, 8);
        AES.MixCol(state, 12);
    }

    static void MixColsInv(byte[] state)
    {
        MixColInv(state, 0x00);
        MixColInv(state, 0x04);
        MixColInv(state, 0x08);
        MixColInv(state, 0x0C);
    }
    public static byte[] Expand(byte[] key)
    {
        List<byte> keys = new List<byte>();
        keys.AddRange(key);
        int i = 1;
        byte[] t = new byte[4];
        while (keys.Count < 176)
        {
            keys.CopyTo(keys.Count - 4, t, 0, 4);
            AES.KeyScheduleCore(t, i);
            i++;
            AES.Xor(t, keys, keys.Count - 16);
            keys.AddRange(t);
            for (int j = 0; j < 3; j++)
            {
                keys.CopyTo(keys.Count - 4, t, 0, 4);
                AES.Xor(t, keys, keys.Count - 16);
                keys.AddRange(t);
            }
        }
        return keys.ToArray();
    }

    public static void Decrypt(byte[] m, byte[] keys)
    {
        byte[] c = new byte[0x10];
        Array.Copy(m, c, 0x10);
        XorRoundKey(c, keys, 0);

        for (int i = 0; i < 9; i++)
        {
            SubBytesInv(c);
            ShiftRowsInv(c);
            MixColsInv(c);
            XorRoundKey(c, keys, i + 1);
        }

        SubBytesInv(c);
        ShiftRowsInv(c);
        XorRoundKey(c, keys, 0xA);
        Array.Copy(c, m, 0x10);
    }
    private static byte[] LookupRcon = new byte[]
    {
            141, 1, 2, 4, 8, 16, 32, 64, 128, 27,
            54, 108, 216, 171, 77, 154
    };
    private static byte[] ShiftRowsTable = new byte[]
    {
            0, 5, 10, 15, 4, 9, 14, 3, 8, 13,
            2, 7, 12, 1, 6, 11
    };

    private static byte[] LookupSBox = new byte[]
    {
            99, 124, 119, 123, 242, 107, 111, 197, 48, 1,
            103, 43, 254, 215, 171, 118, 202, 130, 201, 125,
            250, 89, 71, 240, 173, 212, 162, 175, 156, 164,
            114, 192, 183, 253, 147, 38, 54, 63, 247, 204,
            52, 165, 229, 241, 113, 216, 49, 21, 4, 199,
            35, 195, 24, 150, 5, 154, 7, 18, 128, 226,
            235, 39, 178, 117, 9, 131, 44, 26, 27, 110,
            90, 160, 82, 59, 214, 179, 41, 227, 47, 132,
            83, 209, 0, 237, 32, 252, 177, 91, 106, 203,
            190, 57, 74, 76, 88, 207, 208, 239, 170, 251,
            67, 77, 51, 133, 69, 249, 2, 127, 80, 60,
            159, 168, 81, 163, 64, 143, 146, 157, 56, 245,
            188, 182, 218, 33, 16, 255, 243, 210, 205, 12,
            19, 236, 95, 151, 68, 23, 196, 167, 126, 61,
            100, 93, 25, 115, 96, 129, 79, 220, 34, 42,
            144, 136, 70, 238, 184, 20, 222, 94, 11, 219,
            224, 50, 58, 10, 73, 6, 36, 92, 194, 211,
            172, 98, 145, 149, 228, 121, 231, 200, 55, 109,
            141, 213, 78, 169, 108, 86, 244, 234, 101, 122,
            174, 8, 186, 120, 37, 46, 28, 166, 180, 198,
            232, 221, 116, 31, 75, 189, 139, 138, 112, 62,
            181, 102, 72, 3, 246, 14, 97, 53, 87, 185,
            134, 193, 29, 158, 225, 248, 152, 17, 105, 217,
            142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
            140, 161, 137, 13, 191, 230, 66, 104, 65, 153,
            45, 15, 176, 84, 187, 22
    };

    private static byte[] LookupG2 = new byte[]
    {
            0, 2, 4, 6, 8, 10, 12, 14, 16, 18,
            20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
            40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
            60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
            80, 82, 84, 86, 88, 90, 92, 94, 96, 98,
            100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
            120, 122, 124, 126, 128, 130, 132, 134, 136, 138,
            140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
            160, 162, 164, 166, 168, 170, 172, 174, 176, 178,
            180, 182, 184, 186, 188, 190, 192, 194, 196, 198,
            200, 202, 204, 206, 208, 210, 212, 214, 216, 218,
            220, 222, 224, 226, 228, 230, 232, 234, 236, 238,
            240, 242, 244, 246, 248, 250, 252, 254, 27, 25,
            31, 29, 19, 17, 23, 21, 11, 9, 15, 13,
            3, 1, 7, 5, 59, 57, 63, 61, 51, 49,
            55, 53, 43, 41, 47, 45, 35, 33, 39, 37,
            91, 89, 95, 93, 83, 81, 87, 85, 75, 73,
            79, 77, 67, 65, 71, 69, 123, 121, 127, 125,
            115, 113, 119, 117, 107, 105, 111, 109, 99, 97,
            103, 101, 155, 153, 159, 157, 147, 145, 151, 149,
            139, 137, 143, 141, 131, 129, 135, 133, 187, 185,
            191, 189, 179, 177, 183, 181, 171, 169, 175, 173,
            163, 161, 167, 165, 219, 217, 223, 221, 211, 209,
            215, 213, 203, 201, 207, 205, 195, 193, 199, 197,
            251, 249, 255, 253, 243, 241, 247, 245, 235, 233,
            239, 237, 227, 225, 231, 229
    };

    private static byte[] LookupG3 = new byte[]
    {
            0, 3, 6, 5, 12, 15, 10, 9, 24, 27,
            30, 29, 20, 23, 18, 17, 48, 51, 54, 53,
            60, 63, 58, 57, 40, 43, 46, 45, 36, 39,
            34, 33, 96, 99, 102, 101, 108, 111, 106, 105,
            120, 123, 126, 125, 116, 119, 114, 113, 80, 83,
            86, 85, 92, 95, 90, 89, 72, 75, 78, 77,
            68, 71, 66, 65, 192, 195, 198, 197, 204, 207,
            202, 201, 216, 219, 222, 221, 212, 215, 210, 209,
            240, 243, 246, 245, 252, 255, 250, 249, 232, 235,
            238, 237, 228, 231, 226, 225, 160, 163, 166, 165,
            172, 175, 170, 169, 184, 187, 190, 189, 180, 183,
            178, 177, 144, 147, 150, 149, 156, 159, 154, 153,
            136, 139, 142, 141, 132, 135, 130, 129, 155, 152,
            157, 158, 151, 148, 145, 146, 131, 128, 133, 134,
            143, 140, 137, 138, 171, 168, 173, 174, 167, 164,
            161, 162, 179, 176, 181, 182, 191, 188, 185, 186,
            251, 248, 253, 254, 247, 244, 241, 242, 227, 224,
            229, 230, 239, 236, 233, 234, 203, 200, 205, 206,
            199, 196, 193, 194, 211, 208, 213, 214, 223, 220,
            217, 218, 91, 88, 93, 94, 87, 84, 81, 82,
            67, 64, 69, 70, 79, 76, 73, 74, 107, 104,
            109, 110, 103, 100, 97, 98, 115, 112, 117, 118,
            127, 124, 121, 122, 59, 56, 61, 62, 55, 52,
            49, 50, 35, 32, 37, 38, 47, 44, 41, 42,
            11, 8, 13, 14, 7, 4, 1, 2, 19, 16,
            21, 22, 31, 28, 25, 26
    };
    public static void Encrypt(byte[] m, byte[] keys)
    {
        byte[] c = new byte[16];
        Array.Copy(m, c, 16);
        AES.XorRoundKey(c, keys, 0);
        for (int i = 0; i < 9; i++)
        {
            AES.SubBytes(c);
            AES.ShiftRows(c);
            AES.MixCols(c);
            AES.XorRoundKey(c, keys, i + 1);
        }
        AES.SubBytes(c);
        AES.ShiftRows(c);
        AES.XorRoundKey(c, keys, 10);
        Array.Copy(c, m, 16);
    }
}